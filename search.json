[{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing data","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"function readImmunoSeq imports AIRR-seq receptor files Adaptive ImmunoSEQ assay well well BGI-IRSeq assay. sequences can (.tsv) files processed using one three following platforms: Adaptive Biotechnologies ImmunoSEQ analyzer, BGI IR-SEQ iMonitor platform, MiXCR pipeline AIRR-seq data analysis. function ability identify file type based headers provided (.tsv) file, accordingly data transformed format compatible AIRR-Community guidelines (https://github.com/airr-community/airr-standards). explore features LymphoSeq2, package includes 2 example data sets. first data set T cell receptor beta (TCRB) sequencing 10 blood samples acquired serially single patient underwent bone marrow transplant (Kanakry, C.G., et al. JCI Insight 2016;1(5):pii: e86252). second, data set B cell receptor immunoglobulin heavy (IGH) chain sequencing Burkitt lymphoma tumor biopsies acquired 10 different individuals (Lombardo, K.., et al. Blood Advances 2017 1:535-544). improve performance, data sets contain top 1,000 frequent sequences. complete data sets publicly available Adapatives’ immuneACCESS portal. shown example , can specify path example data sets using command readImmunoSeq can take input, single file name, list files path directory containing AIRR-seq data. columns renamed follow AIRR-community guidelines based input file type. function returns tibble individual file names set repertoire_id. CDR3 nucleotide amino acid sequences denoted junction junction_aa fields respectively. counts CDR3 sequences observed, frequency individual repertoire denoted duplicate_count duplicate_frequency field respectively. Looking study_table see tibble 145 columns 1000 rows Since study table tibble, can use tidyverse syntax extract list sample names","code":"system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") #For the TCRB files #> [1] \"/home/runner/work/_temp/Library/LymphoSeq2/extdata/TCRB_sequencing\" system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") #For the IGH files. #> [1] \"/home/runner/work/_temp/Library/LymphoSeq2/extdata/IGH_sequencing\" study_files <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  study_table <- LymphoSeq2::readImmunoSeq(study_files, threads = 1) %>%      topSeqs(top = 100) study_table #> # A tibble: 1,000 × 145 #>    sequence_id   sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>    <chr>         <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #>  1 TRB_CD4_949_4 GAGTCAG… CASSESAGST… FALSE    FALSE      NA          FALSE      #>  2 TRB_CD4_949_5 GCCCTCA… NA          FALSE    TRUE       NA          TRUE       #>  3 TRB_CD4_949_6 ATTCCCT… NA          FALSE    TRUE       NA          TRUE       #>  4 TRB_CD4_949_7 GTGACAT… CASSPRQGES… FALSE    FALSE      NA          FALSE      #>  5 TRB_CD4_949_8 ACCTTGG… CASSLDGQGQ… FALSE    FALSE      NA          FALSE      #>  6 TRB_CD4_949_9 GTGACCA… CSAKTSGITY… FALSE    FALSE      NA          FALSE      #>  7 TRB_CD4_949_… ACCCTGC… CASSQD*ASS… FALSE    TRUE       NA          TRUE       #>  8 TRB_CD4_949_… CTCCTTC… CAWSDFQGPR… FALSE    FALSE      NA          FALSE      #>  9 TRB_CD4_949_… CTGACGA… CASSPDKWGY… FALSE    FALSE      NA          FALSE      #> 10 TRB_CD4_949_… TCAGAAC… CASSFRTGPT… FALSE    FALSE      NA          FALSE      #> # ℹ 990 more rows #> # ℹ 138 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, … study_table %>%  dplyr::pull(repertoire_id) %>%  unique() #>  [1] \"TRB_CD4_949\"       \"TRB_CD8_949\"       \"TRB_CD8_CMV_369\"   #>  [4] \"TRB_Unsorted_0\"    \"TRB_Unsorted_1320\" \"TRB_Unsorted_1496\" #>  [7] \"TRB_Unsorted_32\"   \"TRB_Unsorted_369\"  \"TRB_Unsorted_83\"   #> [10] \"TRB_Unsorted_949\""},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"subsetting-data","dir":"Articles","previous_headings":"","what":"Subsetting Data","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"tibble structure TCR data allows easy subsampling data. select TCR sequences given samples dataset, filter function dplyr package can used. str_detect function stringr package can used conjunction filter find samples using pattern metadata file TCR sequencing samples can easily combined study_table reading metadata file tibble using dplyr::left_join function merge two tables. example , metadata file imported example TCRB data set contains information number days post bone marrow transplant sample collected cellular phenotype blood sample sorted prior sequencing. Now metadata information can used subset data. instance select “Unsorted” samples collected 300 days bone marrow transplant, use following code","code":"TRB_Unsorted_0 <- study_table %>%    dplyr::filter(repertoire_id == \"TRB_Unsorted_0\") TRB_Unsorted_0 #> # A tibble: 100 × 145 #>    sequence_id   sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>    <chr>         <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #>  1 TRB_Unsorted… TCAATTC… NA          FALSE    TRUE       NA          TRUE       #>  2 TRB_Unsorted… CTGATTC… CASSPVSNEQ… FALSE    FALSE      NA          FALSE      #>  3 TRB_Unsorted… ATCAATT… CASSQEVPPY… FALSE    FALSE      NA          FALSE      #>  4 TRB_Unsorted… CACACCC… CASSQEASGR… FALSE    FALSE      NA          FALSE      #>  5 TRB_Unsorted… TGCCATC… NA          FALSE    TRUE       NA          TRUE       #>  6 TRB_Unsorted… GCCAGCA… CASSLEHTGA… FALSE    FALSE      NA          FALSE      #>  7 TRB_Unsorted… CCCCTGA… CASSPGDEQYF FALSE    FALSE      NA          FALSE      #>  8 TRB_Unsorted… AGTGCCC… CSARSPSTGT… FALSE    FALSE      NA          FALSE      #>  9 TRB_Unsorted… GGAGCTT… NA          FALSE    TRUE       NA          TRUE       #> 10 TRB_Unsorted… CTGTAGT… CASSEKREGH… FALSE    FALSE      NA          FALSE      #> # ℹ 90 more rows #> # ℹ 138 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, … CMV <- study_table %>%         dplyr::filter(str_detect(repertoire_id, \"CMV\")) CMV #> # A tibble: 100 × 145 #>    sequence_id   sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>    <chr>         <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #>  1 TRB_CD8_CMV_… CAGCGCA… CASSPPTGER… FALSE    FALSE      NA          FALSE      #>  2 TRB_CD8_CMV_… CAGCCCT… CASSPAGAYY… FALSE    FALSE      NA          FALSE      #>  3 TRB_CD8_CMV_… CAGCCTG… CASSQDWERL… FALSE    FALSE      NA          FALSE      #>  4 TRB_CD8_CMV_… TCGGCCC… CASSQDLMTV… FALSE    FALSE      NA          FALSE      #>  5 TRB_CD8_CMV_… ATCCTGG… CASSLQGREK… FALSE    FALSE      NA          FALSE      #>  6 TRB_CD8_CMV_… GAGGATC… NA          FALSE    TRUE       NA          TRUE       #>  7 TRB_CD8_CMV_… ACCCTGC… CASSQDLGQA… FALSE    FALSE      NA          FALSE      #>  8 TRB_CD8_CMV_… GAGTCCG… CASSLAGDSQ… FALSE    FALSE      NA          FALSE      #>  9 TRB_CD8_CMV_… CTCCTCA… CAISDTGELFF FALSE    FALSE      NA          FALSE      #> 10 TRB_CD8_CMV_… TCCAGCC… NA          FALSE    TRUE       NA          TRUE       #> # ℹ 90 more rows #> # ℹ 138 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, … TCRB_metadata <- readr::read_csv(system.file(\"extdata\", \"TCRB_metadata.csv\", package = \"LymphoSeq2\"), show_col_types = FALSE) TCRB_metadata #> # A tibble: 10 × 3 #>    samples             day phenotype #>    <chr>             <dbl> <chr>     #>  1 TRB_Unsorted_0        0 Unsorted  #>  2 TRB_Unsorted_32      32 Unsorted  #>  3 TRB_Unsorted_83      82 Unsorted  #>  4 TRB_CD8_CMV_369     369 CD8+CMV+  #>  5 TRB_Unsorted_369    369 Unsorted  #>  6 TRB_CD4_949         949 CD4+      #>  7 TRB_CD8_949         949 CD8+      #>  8 TRB_Unsorted_949    949 Unsorted  #>  9 TRB_Unsorted_1320  1320 Unsorted  #> 10 TRB_Unsorted_1496  1496 Unsorted study_table <- dplyr::left_join(study_table, TCRB_metadata, by = c(\"repertoire_id\" = \"samples\")) study_table #> # A tibble: 1,000 × 147 #>    sequence_id   sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>    <chr>         <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #>  1 TRB_CD4_949_4 GAGTCAG… CASSESAGST… FALSE    FALSE      NA          FALSE      #>  2 TRB_CD4_949_5 GCCCTCA… NA          FALSE    TRUE       NA          TRUE       #>  3 TRB_CD4_949_6 ATTCCCT… NA          FALSE    TRUE       NA          TRUE       #>  4 TRB_CD4_949_7 GTGACAT… CASSPRQGES… FALSE    FALSE      NA          FALSE      #>  5 TRB_CD4_949_8 ACCTTGG… CASSLDGQGQ… FALSE    FALSE      NA          FALSE      #>  6 TRB_CD4_949_9 GTGACCA… CSAKTSGITY… FALSE    FALSE      NA          FALSE      #>  7 TRB_CD4_949_… ACCCTGC… CASSQD*ASS… FALSE    TRUE       NA          TRUE       #>  8 TRB_CD4_949_… CTCCTTC… CAWSDFQGPR… FALSE    FALSE      NA          FALSE      #>  9 TRB_CD4_949_… CTGACGA… CASSPDKWGY… FALSE    FALSE      NA          FALSE      #> 10 TRB_CD4_949_… TCAGAAC… CASSFRTGPT… FALSE    FALSE      NA          FALSE      #> # ℹ 990 more rows #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, … unsorted_300 <- study_table %>%                  dplyr::filter(day > 300 & phenotype == \"Unsorted\") unsorted_300 #> # A tibble: 400 × 147 #>    sequence_id   sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>    <chr>         <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #>  1 TRB_Unsorted… CAGCCCT… CASSPAGAYY… FALSE    FALSE      NA          FALSE      #>  2 TRB_Unsorted… CAGCGCA… CASSPPTGER… FALSE    FALSE      NA          FALSE      #>  3 TRB_Unsorted… GAGGATC… NA          FALSE    TRUE       NA          TRUE       #>  4 TRB_Unsorted… ATCCTGG… CASSLQGREK… FALSE    FALSE      NA          FALSE      #>  5 TRB_Unsorted… GAGTCAG… CASSESAGST… FALSE    FALSE      NA          FALSE      #>  6 TRB_Unsorted… CAGCCTG… CASSQDWERL… FALSE    FALSE      NA          FALSE      #>  7 TRB_Unsorted… GAGTCCG… CASSLAGDSQ… FALSE    FALSE      NA          FALSE      #>  8 TRB_Unsorted… GCCCTCA… NA          FALSE    TRUE       NA          TRUE       #>  9 TRB_Unsorted… TCGGCCC… CASSQDLMTV… FALSE    FALSE      NA          FALSE      #> 10 TRB_Unsorted… CTCAGGC… CASSYVGDGY… FALSE    FALSE      NA          FALSE      #> # ℹ 390 more rows #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, …"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"extracting-productive-sequences","dir":"Articles","previous_headings":"","what":"Extracting productive sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"AIRR-seq samples derived genomic DNA rather complimentary DNA made RNA, find productive unproductive sequences. Productive sequences defined -frame sequences without early stop codons. filter productive sequences, can use productiveSeq remove unproductive sequences recompute duplicate_frequency reflect productive amino acid nucleotide sequence frequencies. interested just complementarity determining region 3 (CDR3) amino acid sequences, set aggregate junction_aa duplicate_count duplicate amino acid sequences summed. resulting tibble junction_aa, duplicate_count, duplicate_frequency, reading_frame, frequent VDJ gene combinations duplicated amino acid sequences corresponding gene family names. gene names kept consistency tibble structure, since single amino acid sequence can generated different VDJ combinations, inadvisable use values downstream analysis Alternatively can aggregate junction group sequences CDR3 nucleotide sequences. option produce tibble similar output readImmunoSeq. Many functions within LymphoSeq2 use results productiveSeq function. Please sure check function documentation. parameter prevalence set TRUE, new column added data frames giving prevalence TCR beta CDR3 amino acid sequence 55 healthy donor peripheral blood samples. Values range 0 100 percent 100 percent means sequence appeared blood 55 individuals. Notice example amino acid sequences given first fourth row study_table table sample “TRB_Unsorted_949”. nucleotide sequence frame produce productively transcribed amino acid sequence. asterisk (*) appears amino acid sequences, indicate early stop codon. productiveSeq run, unproductive sequences removed duplicate_frequency recalculated sequence. two identical amino acid sequences differed nucleotide sequence, combined counts added together.","code":"aa_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\", prevalence = FALSE) aa_table #> # A tibble: 810 × 11 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAISVGGSSPLHF   TRBV1… TRBD2… TRBJ1… TRBV10   TRBD2    TRBJ1    #>  2 TRB_CD4_949   CASDGGFRNTIYF   TRBV1… TRBD2… TRBJ1… TRBV19   TRBD2    TRBJ1    #>  3 TRB_CD4_949   CASGGLNTEAFF    NA     NA     TRBJ1… NA       NA       TRBJ1    #>  4 TRB_CD4_949   CASGLVAGSTLGGE… TRBV1… TRBD2… TRBJ2… TRBV12   TRBD2    TRBJ2    #>  5 TRB_CD4_949   CASGTGGETQYF    TRBV6… TRBD2… TRBJ2… TRBV6    TRBD2    TRBJ2    #>  6 TRB_CD4_949   CASHSSGNTIYF    TRBV6… NA     TRBJ1… TRBV6    NA       TRBJ1    #>  7 TRB_CD4_949   CASKPPGQGGYGYTF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  8 TRB_CD4_949   CASMIDPSGNTIYF  TRBV5… NA     TRBJ1… TRBV5    NA       TRBJ1    #>  9 TRB_CD4_949   CASNARVDSPLHF   TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #> 10 TRB_CD4_949   CASRLGESPLHF    NA     NA     TRBJ1… NA       NA       TRBJ1    #> # ℹ 800 more rows #> # ℹ 3 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl> nuc_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction\",                            prevalence = FALSE) nuc_table #> # A tibble: 812 × 12 #>    repertoire_id junction     junction_aa v_call d_call j_call v_family d_family #>    <chr>         <chr>        <chr>       <chr>  <chr>  <chr>  <chr>    <chr>    #>  1 TRB_CD4_949   AACCTGAGCTC… CASSVEVGSA… TRBV9… NA     TRBJ1… TRBV9    NA       #>  2 TRB_CD4_949   AACCTGAGCTC… CASSVMVGTE… TRBV9… NA     TRBJ1… TRBV9    NA       #>  3 TRB_CD4_949   AACGCCTTGGA… CASSDSGVPG… TRBV5… TRBD1… TRBJ1… TRBV5    TRBD1    #>  4 TRB_CD4_949   AACGCCTTGTT… CASSSQGLNT… TRBV5… TRBD1… TRBJ2… TRBV5    TRBD1    #>  5 TRB_CD4_949   AACGCCTTGTT… CASSLTGRSD… TRBV5… NA     TRBJ2… TRBV5    NA       #>  6 TRB_CD4_949   AAGATCCAGCC… CASSSNPDQP… NA     NA     TRBJ1… NA       NA       #>  7 TRB_CD4_949   AATCTTCACAT… CASSQGGPLHF NA     TRBD2… TRBJ1… NA       TRBD2    #>  8 TRB_CD4_949   AATGTGAACGC… CASSLAGNTE… TRBV5… TRBD2… TRBJ1… TRBV5    TRBD2    #>  9 TRB_CD4_949   AATTCCCTGGA… CASSQPGLTN… NA     TRBD1… TRBJ1… NA       TRBD1    #> 10 TRB_CD4_949   AATTCCCTGGA… CASSQGGSYN… NA     NA     TRBJ1… NA       NA       #> # ℹ 802 more rows #> # ℹ 4 more variables: j_family <chr>, reading_frame <chr>, #> #   duplicate_count <dbl>, duplicate_frequency <dbl> study_table %>%  dplyr::filter(repertoire_id == \"TRB_Unsorted_0\")  #> # A tibble: 100 × 147 #>    sequence_id   sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>    <chr>         <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #>  1 TRB_Unsorted… TCAATTC… NA          FALSE    TRUE       NA          TRUE       #>  2 TRB_Unsorted… CTGATTC… CASSPVSNEQ… FALSE    FALSE      NA          FALSE      #>  3 TRB_Unsorted… ATCAATT… CASSQEVPPY… FALSE    FALSE      NA          FALSE      #>  4 TRB_Unsorted… CACACCC… CASSQEASGR… FALSE    FALSE      NA          FALSE      #>  5 TRB_Unsorted… TGCCATC… NA          FALSE    TRUE       NA          TRUE       #>  6 TRB_Unsorted… GCCAGCA… CASSLEHTGA… FALSE    FALSE      NA          FALSE      #>  7 TRB_Unsorted… CCCCTGA… CASSPGDEQYF FALSE    FALSE      NA          FALSE      #>  8 TRB_Unsorted… AGTGCCC… CSARSPSTGT… FALSE    FALSE      NA          FALSE      #>  9 TRB_Unsorted… GGAGCTT… NA          FALSE    TRUE       NA          TRUE       #> 10 TRB_Unsorted… CTGTAGT… CASSEKREGH… FALSE    FALSE      NA          FALSE      #> # ℹ 90 more rows #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, … aa_table %>%  dplyr::filter(repertoire_id == \"TRB_Unsorted_0\") #> # A tibble: 83 × 11 #>    repertoire_id  junction_aa    v_call d_call j_call v_family d_family j_family #>    <chr>          <chr>          <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_Unsorted_0 CAISDLAVPPSYN… TRBV1… TRBD2… TRBJ2… TRBV10   TRBD2    TRBJ2    #>  2 TRB_Unsorted_0 CARPPYWDYGYTF  TRBV1… NA     TRBJ1… TRBV10   NA       TRBJ1    #>  3 TRB_Unsorted_0 CASKYGGAEKLFF  TRBV7… TRBD2… TRBJ1… TRBV7    TRBD2    TRBJ1    #>  4 TRB_Unsorted_0 CASREAWTATNEK… TRBV2… TRBD1… TRBJ1… TRBV2    TRBD1    TRBJ1    #>  5 TRB_Unsorted_0 CASRHREANYGYTF TRBV2… NA     TRBJ1… TRBV28   NA       TRBJ1    #>  6 TRB_Unsorted_0 CASRPDRGSSPLHF TRBV2… TRBD1… TRBJ1… TRBV28   TRBD1    TRBJ1    #>  7 TRB_Unsorted_0 CASRPGQGVGEQYF TRBV1… TRBD1… TRBJ2… TRBV10   TRBD1    TRBJ2    #>  8 TRB_Unsorted_0 CASRPTKNSDGEL… TRBV1… NA     TRBJ2… TRBV19   NA       TRBJ2    #>  9 TRB_Unsorted_0 CASRSGRTNQPQHF TRBV2… TRBD2… TRBJ1… TRBV2    TRBD2    TRBJ1    #> 10 TRB_Unsorted_0 CASSARSYEQYF   TRBV7… NA     TRBJ2… TRBV7    NA       TRBJ2    #> # ℹ 73 more rows #> # ℹ 3 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"create-a-table-of-summary-statistics","dir":"Articles","previous_headings":"","what":"Create a table of summary statistics","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"create table summarizing total number sequences, number unique productive sequences, number genomes, clonality, Gini coefficient, frequency (%) top productive sequence, Simpson index, Inverse Simpson index, Hill diversity index, Chao1 index Kemp index imported file, use function clonality. clonality score derived Shannon entropy, calculated frequencies productive sequences divided logarithm total number unique productive sequences. normalized entropy value inverted (1 - normalized entropy) produce clonality metric. Gini coefficient, Chao1 estimate, Kemp estimate, Hill estimate, Simpson index Inverse Simpson index alternative metric measure sequence diversity within immune repertoire. Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve. Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads. line passing origin slope 1 reflects equal frequencies clones. Gini coefficient ratio area line equality observed Lorenz curve total area line equality.","code":"LymphoSeq2::clonality(study_table = study_table) #> # A tibble: 10 × 8 #>    repertoire_id    total_sequences unique_productive_se…¹ total_count clonality #>    <chr>                      <int>                  <int>       <dbl>     <dbl> #>  1 TRB_CD4_949                  100                     80       23093     0.349 #>  2 TRB_CD8_949                  100                     81       23072     0.292 #>  3 TRB_CD8_CMV_369              100                     78        1456     0.305 #>  4 TRB_Unsorted_0               100                     83       14776     0.128 #>  5 TRB_Unsorted_13…             100                     83      157660     0.279 #>  6 TRB_Unsorted_14…             100                     82       28876     0.260 #>  7 TRB_Unsorted_32              100                     82       17043     0.105 #>  8 TRB_Unsorted_369             100                     80      274812     0.387 #>  9 TRB_Unsorted_83              100                     81      170526     0.328 #> 10 TRB_Unsorted_949             100                     82        4971     0.247 #> # ℹ abbreviated name: ¹​unique_productive_sequences #> # ℹ 3 more variables: gini_coefficient <dbl>, top_productive_sequence <dbl>, #> #   convergence <dbl>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"calculate-clonal-relatedness","dir":"Articles","previous_headings":"","what":"Calculate clonal relatedness","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"One drawbacks clonality metric take account sequence similarity. particularly important studying affinity maturation B cell malignancies(Lombardo, K.., et al. Blood Advances 2017 1:535-544). Clonal relatedness useful metric takes account sequence similarity without regard clonal frequency. defined proportion nucleotide sequences related defined edit distance threshold. value ranges 0 1 0 indicates sequences related 1 indicates sequences related. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence . example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid nucleotide.","code":"IGH_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  IGH_table <- LymphoSeq2::readImmunoSeq(path = IGH_path, threads = 1) %>%    LymphoSeq2::topSeqs(top = 100) LymphoSeq2::clonalRelatedness(study_table = IGH_table, edit_distance = 10) #> # A tibble: 10 × 2 #>    repertoire_id     relatedness #>    <chr>                   <dbl> #>  1 IGH_MVQ108911A_BL        0.61 #>  2 IGH_MVQ194745A_BL        0.7  #>  3 IGH_MVQ81231A_BL         0.61 #>  4 IGH_MVQ89037A_BL         0.35 #>  5 IGH_MVQ90143A_BL         0.03 #>  6 IGH_MVQ92552A_BL         0.08 #>  7 IGH_MVQ93505A_BL         0.31 #>  8 IGH_MVQ93631A_BL         0.83 #>  9 IGH_MVQ94865A_BL         0.06 #> 10 IGH_MVQ95413A_BL         0.01"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"draw-a-phylogenetic-tree","dir":"Articles","previous_headings":"","what":"Draw a phylogenetic tree","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"phylogenetic tree useful way visualize similarity sequences. phyloTree function create phylogenetic tree single sample using neighbor joining tree estimation amino acid nucleotide CDR3 sequences. leaf tree represents sequence color coded V, D, J gene usage. number next leaf refers sequence count. triangle shaped leaf indicates frequent sequence. distance leaves horizontal axis corresponds sequence similarity (.e. apart leaves horizontally, less similar sequences one another).","code":"nuc_IGH_table <- LymphoSeq2::productiveSeq(study_table = IGH_table, aggregate = \"junction\") LymphoSeq2::phyloTree(study_table = nuc_IGH_table,                        repertoire_ids = \"IGH_MVQ92552A_BL\",                        type = \"junction\",                        layout = \"rectangular\") Warning:  [1m [22mThe `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as of ggplot2 3.3.4.  [36mℹ [39m The deprecated feature was likely used in the  [34mLymphoSeq2 [39m package.   Please report the issue at    [3m [34m<https://github.com/shashidhar22/LymphoSeq2/issues> [39m [23m.  [90mThis warning is displayed once every 8 hours. [39m  [90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was [39m  [90mgenerated. [39m"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"multiple-sequence-alignment","dir":"Articles","previous_headings":"","what":"Multiple sequence alignment","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"LymphoSeq2, can perform multiple sequence alignment using one three methods provided Bioconductor msa package (ClustalW, ClustalOmega, Muscle), change functionality however , now function returns msa S4 object. One may perform alignment amino acid nucleotide sequences single sample. Alternatively, one may search given sequence within list samples using edit distance threshold. use default substitution matrix","code":"alignment <- LymphoSeq2::alignSeq(study_table = nuc_IGH_table,                                    repertoire_ids = \"IGH_MVQ92552A_BL\",                                    type = \"junction_aa\",                                    method = \"ClustalW\") LymphoSeq2::plotAlignment(alignment) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"searching-for-sequences","dir":"Articles","previous_headings":"","what":"Searching for sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"search one amino acid nucleotide CDR3 sequences list data frames, use function searchSeq. function allows sequence search edit distance threshold. example, edit distance 0 means sequences identical edit distance 1 indicates sequences differ single amino acid nucleotide. Match options include “global” matching performs end--end matching sequences. “partial” matching allows searching sub strings CDR3 sequences.","code":"LymphoSeq2::searchSeq(study_table = aa_table,                        sequence = \"CASSPVSNEQFF\",                        seq_type = \"junction_aa\",                        match = \"global\",                        edit_distance = 0) #> # A tibble: 1 × 13 #>   repertoire_id  junction_aa  v_call   d_call  j_call v_family d_family j_family #>   <chr>          <chr>        <chr>    <chr>   <chr>  <chr>    <chr>    <chr>    #> 1 TRB_Unsorted_0 CASSPVSNEQFF TRBV28-1 TRBD2-1 TRBJ2… TRBV28   TRBD2    TRBJ2    #> # ℹ 5 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, edit_distance <dbl>, searchSequence <chr>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"searching-for-published-sequences","dir":"Articles","previous_headings":"","what":"Searching for published sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"search entire list data frames published amino acid CDR3 TCRB sequence known antigen specificity, use function searchPublished. found sequence, table provides listing antigen, epitope, HLA type, PubMed ID (PMID), prevalence percentage sequence among 55 healthy donor blood samples. can even search productive CDR3 amino acid sequences repertoires found public databases VdjDB, IEDB, McPas-TCR using function searchDB. specifying dbname=\"\" searchDB look CDR3 amino acid sequence dataset three public databases. can also pass vector three databases (“VdjDB”, “IEDB”, “McPAS-TCR”) search just databases.","code":"LymphoSeq2::searchPublished(study_table = aa_table) %>%  dplyr::filter(!is.na(PMID)) #> # A tibble: 26 × 16 #>    repertoire_id     junction_aa v_call d_call j_call v_family d_family j_family #>    <chr>             <chr>       <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949       CASSQDPGYE… TRBV4… TRBD1… TRBJ2… TRBV4    TRBD1    TRBJ2    #>  2 TRB_CD8_949       CASSPGTGTY… TRBV1… TRBD1… TRBJ1… TRBV10   TRBD1    TRBJ1    #>  3 TRB_CD8_949       CASSPSRNTE… TRBV4… TRBD2… TRBJ1… TRBV4    TRBD2    TRBJ1    #>  4 TRB_CD8_949       CASSYSGNTE… NA     NA     TRBJ1… NA       NA       TRBJ1    #>  5 TRB_CD8_CMV_369   CASSPARNTE… TRBV4… NA     TRBJ1… TRBV4    NA       TRBJ1    #>  6 TRB_CD8_CMV_369   CASSPGTGTY… TRBV1… TRBD1… TRBJ1… TRBV10   TRBD1    TRBJ1    #>  7 TRB_CD8_CMV_369   CASSPSRNTE… TRBV4… TRBD2… TRBJ1… TRBV4    TRBD2    TRBJ1    #>  8 TRB_CD8_CMV_369   CASSYSGNTE… NA     NA     TRBJ1… NA       NA       TRBJ1    #>  9 TRB_Unsorted_0    CASSPQRNTE… TRBV4… TRBD2… TRBJ1… TRBV4    TRBD2    TRBJ1    #> 10 TRB_Unsorted_1320 CASSLEGDQP… TRBV5… TRBD1… TRBJ1… TRBV5    TRBD1    TRBJ1    #> # ℹ 16 more rows #> # ℹ 8 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, PMID <fct>, HLA <fct>, antigen <fct>, #> #   epitope <fct>, prevalence <dbl> LymphoSeq2::searchDB(study_table = aa_table, dbname = \"all\", chain = \"trb\") #> # A tibble: 839 × 26 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAISVGGSSPLHF   TRBV1… TRBD2… TRBJ1… TRBV10   TRBD2    TRBJ1    #>  2 TRB_CD4_949   CASDGGFRNTIYF   TRBV1… TRBD2… TRBJ1… TRBV19   TRBD2    TRBJ1    #>  3 TRB_CD4_949   CASGGLNTEAFF    NA     NA     TRBJ1… NA       NA       TRBJ1    #>  4 TRB_CD4_949   CASGLVAGSTLGGE… TRBV1… TRBD2… TRBJ2… TRBV12   TRBD2    TRBJ2    #>  5 TRB_CD4_949   CASGTGGETQYF    TRBV6… TRBD2… TRBJ2… TRBV6    TRBD2    TRBJ2    #>  6 TRB_CD4_949   CASHSSGNTIYF    TRBV6… NA     TRBJ1… TRBV6    NA       TRBJ1    #>  7 TRB_CD4_949   CASKPPGQGGYGYTF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  8 TRB_CD4_949   CASMIDPSGNTIYF  TRBV5… NA     TRBJ1… TRBV5    NA       TRBJ1    #>  9 TRB_CD4_949   CASNARVDSPLHF   TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #> 10 TRB_CD4_949   CASRLGESPLHF    NA     NA     TRBJ1… NA       NA       TRBJ1    #> # ℹ 829 more rows #> # ℹ 18 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, tra_cdr3_aa <chr>, gene <chr>, epitope <chr>, #> #   pathology <chr>, antigen <chr>, tra_v_call <chr>, tra_j_call <chr>, #> #   mhc_allele <chr>, reference <chr>, score <dbl>, cell_type <chr>, #> #   source <chr>, trb_v_call <chr>, trb_j_call <chr>, Species <chr>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"visualizing-repertoire-diversity","dir":"Articles","previous_headings":"","what":"Visualizing repertoire diversity","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"Antigen receptor repertoire diversity can characterized number clonality Gini coefficient calculated clonality function. Alternatively, can visualize repertoire diversity plotting Lorenz curve sample defined . plot, diverse samples appear near dotted diagonal line (line equality) whereas clonal samples appear bowed shape.  Alternatively, can get feel repertoire diversity plotting cumulative frequency selected number top frequent clones using function topSeqsPlot. case, top sequences represented different color less frequent clones assigned single color (violet).  functions built using ggplot2 package. can reformat plot using ggplot2 functions. Please refer lorenzCurve topSeqsPlot manual specific examples.","code":"samples <- aa_table %>%             dplyr::pull(repertoire_id) %>% unique() LymphoSeq2::lorenzCurve(repertoire_ids = samples, study_table = aa_table) LymphoSeq2::topSeqsPlot(study_table = aa_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"comparing-samples","dir":"Articles","previous_headings":"","what":"Comparing samples","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"compare T B cell repertoires samples pairwise fashion, use bhattacharyyaMatrix similarityMatrix functions. Bhattacharyya coefficient similarity score measures amount overlap two samples. value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies. Bhattacharyya coefficient differs similarity score involves weighting shared sequence two distributions arithmetic mean frequency sequence, calculating similarity scores involves weighting shared sequence two distributions geometric mean frequency sequence two distributions.  view sequences shared two samples, use function commonSeqs. function requires productive amino acid list specified. visualize number overlapping sequences two three samples form Venn diagram, use function commonSeqVenn   compare frequency sequences two samples scatter plot, use function commonSeqsPlot.  3 samples compare, use commonSeqBar function. can chose color single sample color.sample argument desired intersection color.intersection argument.","code":"bhattacharyya_matrix <- LymphoSeq2::scoringMatrix(aa_table, mode = \"Bhattacharyya\") LymphoSeq2::pairwisePlot(bhattacharyya_matrix) common <- LymphoSeq2::commonSeqs(study_table = aa_table,                                   repertoire_ids =  c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\")) common #> # A tibble: 1 × 3 #>   junction_aa     TRB_Unsorted_0 TRB_Unsorted_32 #>   <chr>                    <dbl>           <dbl> #> 1 CASSQDRTGQYGYTF        0.00429          0.0152 LymphoSeq2::commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\"),                             amino_table = aa_table) LymphoSeq2::commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\", \"TRB_Unsorted_83\"),                             amino_table = aa_table) LymphoSeq2::commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",                             amino_table = aa_table, show = \"common\") LymphoSeq2::commonSeqsBar(amino_table = aa_table,                            repertoire_ids = c(\"TRB_CD4_949\", \"TRB_CD8_949\",                                               \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"),                            color_sample = \"TRB_CD8_949\",                           labels = \"no\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"differential-abundance","dir":"Articles","previous_headings":"","what":"Differential abundance","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"comparing sample two different time points, useful identify sequences significantly less abundant one versus time point (DeWitt, W.S., et al. Journal Virology 2015 89(8):4517-4526). differentialAbundance function uses Fisher exact test calculate differential abundance sequence two time points reports log2 transformed fold change, P value adjusted P value.","code":"LymphoSeq2::differentialAbundance(study_table = aa_table,                                    repertoire_ids =c(\"TRB_Unsorted_949\",                                                      \"TRB_Unsorted_1320\"),                                    type = \"junction_aa\", q = 0.01) #> # A tibble: 107 × 6 #>    junction_aa     TRB_Unsorted_949 TRB_Unsorted_1320        p        q    l2fc #>    <chr>                      <dbl>             <dbl>    <dbl>    <dbl>   <dbl> #>  1 CAIKMETPNGEQYF                29               326 1.14e- 6 1.14e- 6   -3.49 #>  2 CAISEGQGVKPQHF                 0               167 1.09e- 2 1.09e- 2 -Inf    #>  3 CAISESGVLNEKLFF               13               150 1.20e- 3 1.20e- 3   -3.53 #>  4 CASDGGFRNTIYF                 17               387 1.40e- 1 1.40e- 1   -4.51 #>  5 CASKPPGQGGYGYTF                0               173 1.12e- 2 1.12e- 2 -Inf    #>  6 CASNRVPEETQYF                  0               127 5.75e- 2 5.75e- 2 -Inf    #>  7 CASNSKADSTDTQYF               21              1325 1.52e- 3 1.52e- 3   -5.98 #>  8 CASRDGQGSGNTIYF               48               358 6.73e-16 6.73e-16   -2.90 #>  9 CASREDRGSSPLHF                 0               147 2.45e- 2 2.45e- 2 -Inf    #> 10 CASRLGPGAGDEAFF               12               619 1.26e- 1 1.26e- 1   -5.69 #> # ℹ 97 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"finding-recurring-sequences","dir":"Articles","previous_headings":"","what":"Finding recurring sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"create tibble unique, productive amino acid sequences rows sample names headers use seqMatrix function. value data frame represents frequency sequence appears sample. can specify list sequences unique sequences list using output function uniqueSeqs. uniqueSeqs function creates tibble unique, productive sequences reports total count samples. just top clones frequency greater specified amount interest , use topFreq function. creates tibble top productive amino acid sequences minimum specified frequency reports minimum, maximum, mean frequency sequence appears list samples. TCRB sequences, prevalence percentage published antigen specificity sequence also provided. One useful thing merge output seqMatrix topFreq.","code":"unique_seqs <- LymphoSeq2::uniqueSeqs(productive_table = aa_table) unique_seqs #> # A tibble: 438 × 2 #>    junction_aa            duplicate_count #>    <chr>                            <dbl> #>  1 CASSQDWERLGEQFF                  99480 #>  2 CASSLQGREKLFF                    90563 #>  3 CASSQDLMTVDSLFAGANVLTF           68679 #>  4 CASSPAGAYYNEQFF                  30418 #>  5 CASSPPTGERDTQYF                  24552 #>  6 CASSLAGDSQETQYF                  22147 #>  7 CASSESAGSTGELFF                  17438 #>  8 CASRDGQGSGNTIYF                  11516 #>  9 CASSPSRNTEAFF                     8705 #> 10 CASSQDRTGQYGYTF                   8017 #> # ℹ 428 more rows sequence_matrix <- LymphoSeq2::seqMatrix(amino_table = aa_table, sequences = unique_seqs$junction_aa) sequence_matrix #> # A tibble: 438 × 11 #>    junction_aa        TRB_CD4_949 TRB_CD8_949 TRB_CD8_CMV_369 TRB_Unsorted_0 #>    <chr>                    <dbl>       <dbl>           <dbl>          <dbl> #>  1 CAISVGGSSPLHF         0.000695           0               0              0 #>  2 CASDGGFRNTIYF         0.0318             0               0              0 #>  3 CASGGLNTEAFF          0.00160            0               0              0 #>  4 CASGLVAGSTLGGETQYF    0.00202            0               0              0 #>  5 CASGTGGETQYF          0.00146            0               0              0 #>  6 CASHSSGNTIYF          0.000765           0               0              0 #>  7 CASKPPGQGGYGYTF       0.00827            0               0              0 #>  8 CASMIDPSGNTIYF        0.000765           0               0              0 #>  9 CASNARVDSPLHF         0.000834           0               0              0 #> 10 CASRLGESPLHF          0.00167            0               0              0 #> # ℹ 428 more rows #> # ℹ 6 more variables: TRB_Unsorted_1320 <dbl>, TRB_Unsorted_1496 <dbl>, #> #   TRB_Unsorted_32 <dbl>, TRB_Unsorted_369 <dbl>, TRB_Unsorted_83 <dbl>, #> #   TRB_Unsorted_949 <dbl> top_freq <- LymphoSeq2::topFreq(productive_table = aa_table, frequency = 0.001) top_freq #> # A tibble: 425 × 7 #>    junction_aa  minFrequency maxFrequency meanFrequency numberSamples prevalence #>    <chr>               <dbl>        <dbl>         <dbl>         <int>      <dbl> #>  1 CASSQDRTGQY…      0.00429       0.0248       0.0106              9          0 #>  2 CASSLQGREKL…      0.0569        0.322        0.113               8          0 #>  3 CASSQDLMTVD…      0.0292        0.166        0.0924              8          0 #>  4 CASSREGDQPQ…      0.00157       0.0520       0.00913             8          0 #>  5 CASRDGQGSGN…      0.00278       0.0351       0.0155              7          0 #>  6 CASSPFDRGPD…      0.00508       0.0165       0.0112              7          0 #>  7 CASSQDLGQAF…      0.00223       0.0235       0.0111              7          0 #>  8 CASSQDSSDTE…      0.00147       0.0488       0.0106              7          0 #>  9 CAIKMETPNGE…      0.00253       0.0118       0.00704             7          0 #> 10 CASSPGTGTYG…      0.00121       0.0156       0.00585             7          0 #> # ℹ 415 more rows #> # ℹ 1 more variable: antigen <fct> top_freq_matrix <- dplyr::full_join(top_freq, sequence_matrix) #> Joining with `by = join_by(junction_aa)` top_freq_matrix #> # A tibble: 438 × 17 #>    junction_aa  minFrequency maxFrequency meanFrequency numberSamples prevalence #>    <chr>               <dbl>        <dbl>         <dbl>         <int>      <dbl> #>  1 CASSQDRTGQY…      0.00429       0.0248       0.0106              9          0 #>  2 CASSLQGREKL…      0.0569        0.322        0.113               8          0 #>  3 CASSQDLMTVD…      0.0292        0.166        0.0924              8          0 #>  4 CASSREGDQPQ…      0.00157       0.0520       0.00913             8          0 #>  5 CASRDGQGSGN…      0.00278       0.0351       0.0155              7          0 #>  6 CASSPFDRGPD…      0.00508       0.0165       0.0112              7          0 #>  7 CASSQDLGQAF…      0.00223       0.0235       0.0111              7          0 #>  8 CASSQDSSDTE…      0.00147       0.0488       0.0106              7          0 #>  9 CAIKMETPNGE…      0.00253       0.0118       0.00704             7          0 #> 10 CASSPGTGTYG…      0.00121       0.0156       0.00585             7          0 #> # ℹ 428 more rows #> # ℹ 11 more variables: antigen <fct>, TRB_CD4_949 <dbl>, TRB_CD8_949 <dbl>, #> #   TRB_CD8_CMV_369 <dbl>, TRB_Unsorted_0 <dbl>, TRB_Unsorted_1320 <dbl>, #> #   TRB_Unsorted_1496 <dbl>, TRB_Unsorted_32 <dbl>, TRB_Unsorted_369 <dbl>, #> #   TRB_Unsorted_83 <dbl>, TRB_Unsorted_949 <dbl>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"tracking-sequences-across-samples","dir":"Articles","previous_headings":"","what":"Tracking sequences across samples","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"visually track frequency sequences across multiple samples, use function cloneTrack function takes output seqMatrix function. can specify character vector amino acid sequences using parameter track highlight sequences different color. Alternatively, can highlight sequences given sample using parameter map. mapping feature use, must specify productive amino acid list character vector labels title mapped samples.  can track particular sequences across samples providing optional list CDR3 amino acid sequences.  Alternatively can use function plotTrackSingular retrieve list alluvial diagrams tracking one single amino acid clone track table. Considering plot generated unique CDR3 sequence, recommend running feature clone track table derived top sequences repertoire described example .","code":"ctable <- LymphoSeq2::cloneTrack(study_table = aa_table,                                  sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\")) LymphoSeq2::plotTrack(ctable) ttable <- LymphoSeq2::topSeqs(aa_table, top = 10) ctable <- LymphoSeq2::cloneTrack(ttable) LymphoSeq2::plotTrack(ctable, alist = c(\"CASSESAGSTGELFF\", \"CASSLAGDSQETQYF\")) + ggplot2::theme(legend.position = \"bottom\") lalluvial <- ctable %>% LymphoSeq2::topSeqs(top = 1) %>%    LymphoSeq2::plotTrackSingular() lalluvial[[1]]"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"comparing-vdj-gene-usage","dir":"Articles","previous_headings":"","what":"Comparing V(D)J gene usage","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"compare V, D, J gene usage across samples, start creating data frame V, D, J gene counts frequencies using function geneFreq. can specify interested “VDJ”, “DJ”, “VJ”, “DJ”, “V”, “D”, “J” loci using locus parameter. Set family TRUE prefer family names instead gene names reported ImmunoSeq. create chord diagram showing VJ DJ gene associations one samples, combine output geneFreq function chordDiagramVDJ. function works well topSeqs function creates data frame selected number top productive sequences. example , chord diagram made showing association V J genes just single dominant clones sample. size ribbons connecting VJ genes correspond number samples recombination event. thicker ribbon, higher frequency recombination.  can also visualize results geneFreq heat map, word cloud, cumulative frequency bar plot support additional R packages shown .","code":"vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) vGenes #> # A tibble: 167 × 5 #>    repertoire_id gene_name duplicate_count gene_type gene_frequency #>    <chr>         <chr>               <dbl> <chr>              <dbl> #>  1 TRB_CD4_949   NA                   2945 v_family         0.205   #>  2 TRB_CD4_949   TRBV10               5071 v_family         0.353   #>  3 TRB_CD4_949   TRBV11                107 v_family         0.00744 #>  4 TRB_CD4_949   TRBV12                 29 v_family         0.00202 #>  5 TRB_CD4_949   TRBV18                226 v_family         0.0157  #>  6 TRB_CD4_949   TRBV19               1643 v_family         0.114   #>  7 TRB_CD4_949   TRBV2                 230 v_family         0.0160  #>  8 TRB_CD4_949   TRBV21                 18 v_family         0.00125 #>  9 TRB_CD4_949   TRBV27                 84 v_family         0.00584 #> 10 TRB_CD4_949   TRBV28                208 v_family         0.0145  #> # ℹ 157 more rows top_seqs <- LymphoSeq2::topSeqs(nuc_table, top = 1) LymphoSeq2::chordDiagramVDJ(study_table = top_seqs,                              association = \"VJ\",                              colors = c(\"darkred\", \"navyblue\")) vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) RedBlue <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(11, \"RdBu\")))(256) vtable <- vGenes %>% dplyr::filter(repertoire_id == \"TRB_Unsorted_83\") %>%   dplyr::select(gene_name, gene_frequency) wordcloud2::wordcloud2(data = vtable,                       color = RedBlue) vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) %>%             tidyr::pivot_wider(id_cols = gene_name,                                names_from = repertoire_id,                                values_from = gene_frequency,                                values_fn = sum,                               values_fill = 0) gene_names <- vGenes %>%                dplyr::pull(gene_name) vGenes <- vGenes %>%            dplyr::select(-gene_name) %>%            as.matrix() rownames(vGenes) <- gene_names pheatmap::pheatmap(vGenes, scale = \"row\") vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) multicolors <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(9, \"Set1\")))(28) ggplot2::ggplot(vGenes, aes(x = repertoire_id, y = gene_frequency, fill = gene_name)) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::theme_minimal() +    ggplot2::scale_y_continuous(expand = c(0, 0)) +    ggplot2::guides(fill = ggplot2::guide_legend(ncol = 2)) +   ggplot2::scale_fill_manual(values = multicolors) +    ggplot2::labs(y = \"Frequency (%)\", x = \"\", fill = \"\") +   ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust = 1))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"removing-sequences","dir":"Articles","previous_headings":"","what":"Removing sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"Occasionally may identify one sequences data set appear contamination. can remove amino acid sequence data frames using function removeSeq recompute frequencyCount remaining sequences.","code":"LymphoSeq2::searchSeq(study_table = aa_table, sequence = \"CASSESAGSTGELFF\", seq_type = \"junction_aa\") #> # A tibble: 4 × 13 #>   repertoire_id     junction_aa  v_call d_call j_call v_family d_family j_family #>   <chr>             <chr>        <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #> 1 TRB_CD4_949       CASSESAGSTG… TRBV1… TRBD2… TRBJ2… TRBV10   TRBD2    TRBJ2    #> 2 TRB_Unsorted_1320 CASSESAGSTG… TRBV1… TRBD2… TRBJ2… TRBV10   TRBD2    TRBJ2    #> 3 TRB_Unsorted_1496 CASSESAGSTG… TRBV1… TRBD2… TRBJ2… TRBV10   TRBD2    TRBJ2    #> 4 TRB_Unsorted_949  CASSESAGSTG… TRBV1… TRBD2… TRBJ2… TRBV10   TRBD2    TRBJ2    #> # ℹ 5 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, edit_distance <dbl>, searchSequence <chr> cleansed <- LymphoSeq2::removeSeq(study_table = aa_table, sequence = \"CASSESAGSTGELFF\") LymphoSeq2::searchSeq(study_table = cleansed, sequence = \"CASSESAGSTGELFF\", seq_type = \"junction_aa\") #> # A tibble: 0 × 13 #> # ℹ 13 variables: repertoire_id <chr>, junction_aa <chr>, v_call <chr>, #> #   d_call <chr>, j_call <chr>, v_family <chr>, d_family <chr>, j_family <chr>, #> #   reading_frame <chr>, duplicate_count <dbl>, duplicate_frequency <dbl>, #> #   edit_distance <dbl>, searchSequence <chr>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"rarefaction-curves","dir":"Articles","previous_headings":"","what":"Rarefaction curves","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"Rarefaction extrapolation curves allow comparison TCR diversity across repertoires given ideal sequencing depth. Rarefaction extrapolation curves drawn sampling sequencing dataset various depths understand trajectory sequence diversity extrapolating curve ideal depth.","code":"LymphoSeq2::plotRarefactionCurve(study_table = aa_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] vroom_1.6.3        lubridate_1.9.2    forcats_1.0.0      stringr_1.5.0      #>  [5] dplyr_1.1.2        purrr_1.0.1        readr_2.1.4        tidyr_1.3.0        #>  [9] tibble_3.2.1       ggplot2_3.4.2      tidyverse_2.0.0    wordcloud2_0.2.1   #> [13] RColorBrewer_1.1-3 LymphoSeq2_1.0.0   data.table_1.14.8  #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7            gridExtra_2.3           formatR_1.14            #>   [4] phangorn_2.11.1         rlang_1.1.1             magrittr_2.0.3          #>   [7] compiler_4.3.1          reshape2_1.4.4          ggalluvial_0.12.5       #>  [10] systemfonts_1.0.4       vctrs_0.6.3             maps_3.4.1              #>  [13] quadprog_1.5-8          shape_1.4.6             pkgconfig_2.0.3         #>  [16] crayon_1.5.2            fastmap_1.1.1           ellipsis_0.3.2          #>  [19] XVector_0.40.0          labeling_0.4.2          utf8_1.2.3              #>  [22] rmarkdown_2.23          tzdb_0.4.0              seqmagick_0.1.6         #>  [25] UpSetR_1.4.0            ragg_1.2.5              bit_4.0.5               #>  [28] xfun_0.39               zlibbioc_1.46.0         cachem_1.0.8            #>  [31] aplot_0.1.10            ash_1.0-15              GenomeInfoDb_1.36.1     #>  [34] jsonlite_1.8.7          progress_1.2.2          highr_0.10              #>  [37] tweenr_2.0.2            parallel_4.3.1          prettyunits_1.1.1       #>  [40] R6_2.5.1                bslib_0.5.0             ggmsa_1.3.4             #>  [43] stringi_1.7.12          extrafontdb_1.0         jquerylib_0.1.4         #>  [46] Rcpp_1.0.11             knitr_1.43              iNEXT_3.0.0             #>  [49] VennDiagram_1.7.3       extrafont_0.19          IRanges_2.34.1          #>  [52] Matrix_1.5-4.1          igraph_1.5.0.1          timechange_0.2.0        #>  [55] tidyselect_1.2.0        stringdist_0.9.10       yaml_2.3.7              #>  [58] codetools_0.2-19        plyr_1.8.8              lattice_0.21-8          #>  [61] treeio_1.25.2           withr_2.5.0             evaluate_0.21           #>  [64] lambda.r_1.2.4          gridGraphics_0.5-1      desc_1.4.2              #>  [67] futile.logger_1.4.3     polyclip_1.10-4         circlize_0.4.15         #>  [70] Biostrings_2.68.1       pillar_1.9.0            ggtree_3.9.0.001        #>  [73] KernSmooth_2.23-21      stats4_4.3.1            ggfun_0.1.1             #>  [76] generics_0.1.3          rprojroot_2.0.3         dtplyr_1.3.1            #>  [79] RCurl_1.98-1.12         S4Vectors_0.38.1        hms_1.1.3               #>  [82] munsell_0.5.0           scales_1.2.1            tidytree_0.4.4          #>  [85] glue_1.6.2              pheatmap_1.0.12         lazyeval_0.2.2          #>  [88] tools_4.3.1             fs_1.6.3                fastmatch_1.1-3         #>  [91] grid_4.3.1              ape_5.7-1               Rttf2pt1_1.3.12         #>  [94] R4RNA_1.28.0            colorspace_2.1-0        nlme_3.1-162            #>  [97] GenomeInfoDbData_1.2.10 patchwork_1.1.2         ggalt_0.4.0             #> [100] ggforce_0.4.1           cli_3.6.1               msa_1.32.0              #> [103] textshaping_0.3.6       futile.options_1.0.1    ineq_0.2-13             #> [106] proj4_1.0-12            fansi_1.0.4             gtable_0.3.3            #> [109] yulab.utils_0.0.6       sass_0.4.7              digest_0.6.33           #> [112] BiocGenerics_0.46.0     ggplotify_0.1.1         htmlwidgets_1.6.2       #> [115] farver_2.1.1            memoise_2.0.1           htmltools_0.5.5         #> [118] pkgdown_2.0.7           lifecycle_1.0.3         GlobalOptions_0.1.2     #> [121] bit64_4.0.5             MASS_7.3-60"},{"path":"https://shashidhar22.github.io/LymphoSeq2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wu Elena. Author. Ravishankar Shashidhar. Maintainer, author. Coffey David. Author.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Elena W, Shashidhar R, David C (2023). LymphoSeq2: Analyze high-throughput sequencing T B cell receptors. https://github.com/shashidhar22/LymphoSeq2, https://shashidhar22.github.io/LymphoSeq2.","code":"@Manual{,   title = {LymphoSeq2: Analyze high-throughput sequencing of T and B cell receptors},   author = {Wu Elena and Ravishankar Shashidhar and Coffey David},   year = {2023},   note = {https://github.com/shashidhar22/LymphoSeq2, https://shashidhar22.github.io/LymphoSeq2}, }"},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"lymphoseq2","dir":"","previous_headings":"","what":"Analyze high-throughput sequencing of T and B cell receptors","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"Adaptive Immune Receptor Repertoire Sequencing (AIRR-seq) provides unique opportunity interrogate adaptive immune repertoire various clinical conditions. utility offered technology quickly garnered interest community clinicians researchers investigating immunological landscapes large spectrum health disease states. LymphoSeq2 toolkit allows users import, manipulate visualize AIRR-Seq data various AIRR-Seq assays Adaptive ImmunoSEQ BGI-IRSeq, support 10X VDJ sequencing coming soon. platform also supports importing AIRR-seq data processed using MiXCR pipeline. vignette highlights key features LymphoSeq2.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"install latest version LymphoSeq2 can use devtools package install LymphoSeq2 GitHub","code":"# install.packages(\"devtools\") devtools::install_github(\"shashidhar22/LymphoSeq2\", build_vignettes = TRUE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"import AIRR-Seq data using LymphoSeq2 can use readImmunoSeq function. Currently function can import data MiXCR, Adaptive ImmunoSEQ, BGI IR-SEQ, 10X Genomic single cell VDJ rearrangements. get quick summary repertoire characteristics, use clonality function. calculate many standard repertoire diversity metrics clonality, gini coefficient, convergence, unique productive sequence repertoires input dataset. compare samples varying depth sequencing, can use clonality function sample repertoires minimum number sequences. Since randomly sample sequences repertoire, mode clonality function repeat operation user specified number iterations caculate average value diversity metrics.","code":"library(LymphoSeq2) #> Loading required package: data.table #> Registered S3 methods overwritten by 'ggalt': #>   method                  from    #>   grid.draw.absoluteGrob  ggplot2 #>   grobHeight.absoluteGrob ggplot2 #>   grobWidth.absoluteGrob  ggplot2 #>   grobX.absoluteGrob      ggplot2 #>   grobY.absoluteGrob      ggplot2 study_files <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  study_table <- LymphoSeq2::readImmunoSeq(study_files) #> Registered S3 methods overwritten by 'readr': #>   method                    from  #>   as.data.frame.spec_tbl_df vroom #>   as_tibble.spec_tbl_df     vroom #>   format.col_spec           vroom #>   print.col_spec            vroom #>   print.collector           vroom #>   print.date_names          vroom #>   print.locale              vroom #>   str.col_spec              vroom summary_table <- LymphoSeq2::clonality(study_table) summary_table #> # A tibble: 10 × 8 #>    repertoire_id     total_seq…¹ uniqu…² total…³ clona…⁴ gini_…⁵ top_p…⁶ conve…⁷ #>    <chr>                   <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 TRB_CD4_949              1000     845   25769   0.443   0.867   30.1     1    #>  2 TRB_CD8_949              1000     794   26239   0.431   0.903   19.3     1.01 #>  3 TRB_CD8_CMV_369           414     281    1794   0.332   0.761   16.5     1.12 #>  4 TRB_Unsorted_0           1000     838   18161   0.281   0.818    5.77    1    #>  5 TRB_Unsorted_1320        1000     838  178190   0.422   0.902   14.6     1    #>  6 TRB_Unsorted_1496        1000     832   33669   0.389   0.881   14.2     1    #>  7 TRB_Unsorted_32           920     767   31078   0.134   0.601    4.87    1.01 #>  8 TRB_Unsorted_369         1000     830  339413   0.426   0.845   29.7     1    #>  9 TRB_Unsorted_83          1000     823  236732   0.338   0.777   23.6     1    #> 10 TRB_Unsorted_949         1000     831    6549   0.306   0.765   13.8     1    #> # … with abbreviated variable names ¹​total_sequences, #> #   ²​unique_productive_sequences, ³​total_count, ⁴​clonality, ⁵​gini_coefficient, #> #   ⁶​top_productive_sequence, ⁷​convergence sampled_summary <- LymphoSeq2::clonality(study_table, rarefy = TRUE, iterations = 5, min_count = 1000) sampled_summary #> # A tibble: 10 × 8 #>    repertoire_id     total_seq…¹ uniqu…² total…³ clona…⁴ gini_…⁵ top_p…⁶ conve…⁷ #>    <chr>                   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 TRB_CD4_949              156.    129     1000  0.319    0.735   31.3     1    #>  2 TRB_CD8_949              192.    154.    1000  0.293    0.734   18.6     1.01 #>  3 TRB_CD8_CMV_369          266     183.    1000  0.303    0.723   17.1     1.09 #>  4 TRB_Unsorted_0           254.    212.    1000  0.158    0.616    6.11    1.00 #>  5 TRB_Unsorted_1320        191.    156.    1000  0.277    0.726   14.6     1.02 #>  6 TRB_Unsorted_1496        206     168.    1000  0.260    0.710   14.0     1.00 #>  7 TRB_Unsorted_32          417.    349.    1000  0.0952   0.466    5.54    1.01 #>  8 TRB_Unsorted_369         245.    203     1000  0.336    0.711   30.2     1    #>  9 TRB_Unsorted_83          320.    264.    1000  0.261    0.639   23.4     1    #> 10 TRB_Unsorted_949         301.    249.    1000  0.222    0.630   13.0     1.00 #> # … with abbreviated variable names ¹​total_sequences, #> #   ²​unique_productive_sequences, ³​total_count, ⁴​clonality, ⁵​gini_coefficient, #> #   ⁶​top_productive_sequence, ⁷​convergence"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Align multiple sequences — alignSeq","title":"Align multiple sequences — alignSeq","text":"Perform multiple sequence alignment using one three methods output results console pdf file. One may perform alignment amino acid nucleotide sequences single repertoire_id. Alternatively, one may search given sequence within list samples using edit distance threshold.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align multiple sequences — alignSeq","text":"","code":"alignSeq(   study_table,   repertoire_ids = NULL,   sequence_list = NULL,   edit_distance = 15,   type = \"junction\",   method = \"ClustalOmega\",   top = 150 )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align multiple sequences — alignSeq","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq2 function readImmunoSeq(). repertoire_ids character vector indicating name repertoire_id productive sequence list. sequence_list character vector one ore amino acid nucleotide CDR3 sequences search. edit_distance integer giving minimum edit distance sequence must less equal .  See details . type character vector indicating whether \"junction_aa\" \"junction\" sequences aligned.  \"junction_aa\" specified, run productiveSeq() first. method character vector indicating multiple sequence alignment method used.  Refer Bioconductor \"msa\" package details. Options include \"ClustalW\", \"ClustalOmega\", \"Muscle\". top number top sequences perform alignment.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align multiple sequences — alignSeq","text":"Performs multiple sequence alignment object.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align multiple sequences — alignSeq","text":"Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence .  example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align multiple sequences — alignSeq","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) #> Registered S3 methods overwritten by 'readr': #>   method                    from  #>   as.data.frame.spec_tbl_df vroom #>   as_tibble.spec_tbl_df     vroom #>   format.col_spec           vroom #>   print.col_spec            vroom #>   print.collector           vroom #>   print.date_names          vroom #>   print.locale              vroom #>   str.col_spec              vroom study_table <- LymphoSeq2::topSeqs(study_table, top = 100) nucleotide_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction\") LymphoSeq2::alignSeq(nucleotide_table,   repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction\",   method = \"ClustalW\" ) #> use default substitution matrix #> CLUSTAL 2.1   #>  #> Call: #>    msa::msa(string_list, method = method) #>  #> MsaDNAMultipleAlignment with 42 rows and 179 columns #>      aln                                                   names #>  [1] -------------------------...CCACATGGACGTCTGGGGCAAAGGG IGH_MVQ92552A_BL_23 #>  [2] -------------------------...CGCTATGGACGTCTGGGGCCAAGGG IGH_MVQ92552A_BL_36 #>  [3] -------------------------...CTACATGGACGTCTGGGGCAAAGGG IGH_MVQ92552A_BL_40 #>  [4] -------------------------...CCACATGGACGTCTGGGGCAAAGGG IGH_MVQ92552A_BL_6 #>  [5] ------------------------G...-GGTATGGACGTCTGGGGCCAAGGG IGH_MVQ92552A_BL_38 #>  [6] ---------------------CGCG...CTACATGGACGTCTGGGGCAAAGGG IGH_MVQ92552A_BL_24 #>  [7] ------------------------A...TGCTTTTGATGTTTGGGGCCAAGGG IGH_MVQ92552A_BL_3 #>  [8] -------------------------...CGCTATGGACGTCTGGGGCCAAGGG IGH_MVQ92552A_BL_11 #>  [9] -------------------------...CTACTTTGACGACTGGGGCCAGGGA IGH_MVQ92552A_BL_8  #>  ... ... #> [35] ------------CACCATCTCCAGA...--TCTTTGAATACTGGGGCCAGGGA IGH_MVQ92552A_BL_12 #> [36] ---------AGTCACGATTACCGCG...--GTTCGGGGAATTGGGGCCAGGGA IGH_MVQ92552A_BL_5 #> [37] ------------------GACAACA...--CTTTTGATTTTTGGGGCCAAGGG IGH_MVQ92552A_BL_34 #> [38] ---------------CATGACCAGG...--ACTTTGACTACTGGGGCCAGGGA IGH_MVQ92552A_BL_21 #> [39] ---------------------CGCG...--GCTTTGACCAGTGGGGCCAGGGA IGH_MVQ92552A_BL_25 #> [40] ------------------CTCCAGA...--TCCTCGACTATTGGGGCCAGGGA IGH_MVQ92552A_BL_29 #> [41] ------------------CTCCAGA...--ACATGGACGTCTGGGGCAAAGGG IGH_MVQ92552A_BL_28 #> [42] ----------------------GCC...CTACATGGACGTCTGGGGCAAAGGG IGH_MVQ92552A_BL_37 #>  Con ----------------------???...--?CTT?GAC?ACTGGGGCCAGGGA Consensus"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/antigen_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Antigen DB — antigen_db","title":"Antigen DB — antigen_db","text":"database created flat file versions IEDB, McPAS-TCR, VdjDB slim order generates RDA file T-cells B-cells recorded show antigenic specificity three databases. script internal use run every six months update databases.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/antigen_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antigen DB — antigen_db","text":"","code":"antigen_db"},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/antigen_db.html","id":"antigen-db","dir":"Reference","previous_headings":"","what":"antigen_db","title":"Antigen DB — antigen_db","text":"tibble 320,786 rows 16 columns: tra_cdr3_aa T-cell receptor alpha chain amino acid sequence gene Antigen gene/protein name epitope Antigen epitope sequence/target pathology Pathology associated epitope antigen Name antigen tra_v_call T-cell receptor alpha chain V gene tra_j_call T-cell receptor alpha chain J gene mhc_allele MHC allele associated epitope reference Reference known antigenic specificity score Confidence antigenic specificity cell_type Immune cell type source Database name trb_cdr3_aa T-cell receptor beta chain amino acid sequence trb_v_call T-cell receptor beta chain V gene trb_j_call T-cell receptor beta chain J gene Species Species","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/antigen_db.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Antigen DB — antigen_db","text":"flat files function can downloaded following links: IEDB: https://www.iedb.org/downloader.php?file_name=doc/receptor_full_v3.zip McPAS-TCR: http://friedmanlab.weizmann.ac.il/McPAS-TCR/ VdjDB: https://github.com/antigenomics/vdjdb-db/releases Note: vdjdb.slim.txt used input Note: order input matters, please provide flat file paths order IEDB, McPAS-TCR, VdjDB.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Bhattacharyya coefficient — bhattacharyyaCoefficient","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"Calculates Bhattacharyya coefficient two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"","code":"bhattacharyyaCoefficient(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"sample_list list two tibble corresponding derived productiveSeq()function LymphoSeq2. \"duplicate_frequency\", \"junction_aa\", \"repertoire_id\" columns necessary calculation Bhattacharyya coefficient.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"tibble one row three columns sample1, sample2, bhattacharyya coefficient","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/calculateCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate k-mer counts — calculateCounts","title":"Calculate k-mer counts — calculateCounts","text":"Calculate k-mer counts","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/calculateCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate k-mer counts — calculateCounts","text":"","code":"calculateCounts(study_table, k)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/calculateCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate k-mer counts — calculateCounts","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq(). \"repertoire_id\" \"junction\" required columns. k length k-mers find.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":null,"dir":"Reference","previous_headings":"","what":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"Creates chord diagram showing VJ DJ gene associations one samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"","code":"chordDiagramVDJ(study_table, association = \"VJ\", colors = c(\"red\", \"blue\"))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"study_table tibble consisting frequencies antigen receptor sequences.  \"v_family\", \"j_family\", applicable, \"d_family\" required columns.  Using output LymphoSeq2 function topSeqs() recommended. association character vector gene families associate. Options include \"VJ\" \"DJ\". colors character vector 2 colors corresponding V/D J gene colors respectively.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"Returns chord diagram showing VJ DJ gene associations one samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"size ribbons connecting VJ DJ genes correspond number samples number sequences make recombination event. thicker ribbon, higher frequency recombination.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) nucleotide_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction\") top_seqs <- LymphoSeq2::topSeqs(nucleotide_table, top = 100) chordDiagramVDJ(top_seqs,   association = \"VJ\",   colors = c(\"red\", \"blue\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Clonal relatedness — clonalRelatedness","title":"Clonal relatedness — clonalRelatedness","text":"Calculates clonal relatedness repertoire study.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clonal relatedness — clonalRelatedness","text":"","code":"clonalRelatedness(study_table, edit_distance = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clonal relatedness — clonalRelatedness","text":"study_table tibble raw productive nucleotide junction sequences. \"junction\" \"duplicate_count\" required columns. edit_distance integer giving minimum edit distance sequence must less equal . See details . Deafult 10 (default)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clonal relatedness — clonalRelatedness","text":"Returns tibble calculated clonal relatedness repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clonal relatedness — clonalRelatedness","text":"Clonal relatedness proportion junction sequences related defined edit distance threshold.  value ranges 0 1 0 indicates sequences related 1 indicates sequences related. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence . example, edit distance 0 means sequences identical edit distance 1 indicates sequences differ single amino acid junction.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clonal relatedness — clonalRelatedness","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1)  study_table <- LymphoSeq2::topSeqs(study_table, top = 100) clonal_relatedness <- LymphoSeq2::clonalRelatedness(study_table, edit_distance = 10) # Merge results with clonality table clonality <- LymphoSeq2::clonality(study_table) merged <- dplyr::full_join(clonality, clonal_relatedness, by = \"repertoire_id\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":null,"dir":"Reference","previous_headings":"","what":"Clonality (summary statistics) — clonality","title":"Clonality (summary statistics) — clonality","text":"clonality() Creates tibble giving total number sequences, number unique productive sequences, number genomes, entropy, clonality, Gini coefficient, TCR/BCR convergence, frequency top productive sequences given sample.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clonality (summary statistics) — clonality","text":"","code":"clonality(study_table, rarefy = FALSE, iterations = 100, min_count = 1000)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clonality (summary statistics) — clonality","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. Note clonality usually calculated productive junction sequences. Therefore, recommended run function using productive sequence list aggregated amino acids. rarefy Boolean value TRUE : Rarefied diversity metrics calculated sampling repertoire input table repertoire smallest number sequences calculating diversity metrics sampled data. process repeated number iterations specified user diversity metrics averaged number iterations. Default 100 (default) FALSE (default): Diversity metrics calculated considering raw repertoire data samples iterations Number iterations run sampled clonality metrics. min_count minimum depth repertoire study must sampled . Default 1000 (default)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clonality (summary statistics) — clonality","text":"Returns tibble giving total number sequences, number unique productive sequences, number genomes, clonality, Gini coefficient, Simpson index, inverse Simpson index, frequency top productive sequence repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clonality (summary statistics) — clonality","text":"Clonality derived Shannon entropy, calculated frequencies productive sequences divided logarithm total number unique productive sequences.  normalized entropy value inverted (1 - normalized entropy) produce clonality metric. Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve.  Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads.  line passing origin slope 1 reflects equal frequencies clones. Gini coefficient ratio area line equality observed Lorenz curve total area line equality. Gini coefficient clonality reported scale 0 1 0 indicates sequences frequency 1 indicates repertoire dominated single sequence. TCR/BCR convergence defined average number productive CDR3 nucleotide sequences form productive CDR3 amino acid sequence. Sequencing depth amount input available can often confound diversity metrics. example, peripheral blood sample can appear clonal tumor sample sequenced adequate depth. overcome can sample sample repertoires depth sample least number sequences calculate diversity metrics. Repeating process multiple times averaging diversity metrics can give accurate representation sample diversity enable comparison repertoire samples different experiments different tissue origin","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clonality (summary statistics) — clonality","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) raw_clonality <- LymphoSeq2::clonality(study_table) sampled_clonality <- LymphoSeq2::clonality(study_table,   rarefy = TRUE,   iterations = 100,   min_count = 100 )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone tracking line plot — cloneTrack","title":"Clone tracking line plot — cloneTrack","text":"Creates line plot tracking amino acid frequencies across multiple samples","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone tracking line plot — cloneTrack","text":"","code":"cloneTrack(study_table, sample_list = NULL, sequence_track = NULL)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone tracking line plot — cloneTrack","text":"study_table tibble productive amino acid sequences generated LymphoSeq2 function productiveSeq() aggregate parameter set \"junction_aa\" sample_list character vector one repertoire_ids track. set NULL (default), repertoire_ids sequence matrix tracked. sequence_track optional character vector one amino acid sequences track. set NULL (default), pull junction_aa sequences sequence matrix.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone tracking line plot — cloneTrack","text":"Returns line plot showing amino acid frequencies across multiple samples sequence matrix line represents one unique sequence.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone tracking line plot — cloneTrack","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,    aggregate = \"junction_aa\") top_freq <- LymphoSeq2::topFreq(amino_table, frequency = 0.001) # Track clones without mapping or tracking specific sequences LymphoSeq2::cloneTrack(amino_table) #> # A tibble: 810 × 12 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAISVGGSSPLHF   TRBV1… TRBD2… TRBJ1… TRBV10   TRBD2    TRBJ1    #>  2 TRB_CD4_949   CASDGGFRNTIYF   TRBV1… TRBD2… TRBJ1… TRBV19   TRBD2    TRBJ1    #>  3 TRB_CD4_949   CASGGLNTEAFF    NA     NA     TRBJ1… NA       NA       TRBJ1    #>  4 TRB_CD4_949   CASGLVAGSTLGGE… TRBV1… TRBD2… TRBJ2… TRBV12   TRBD2    TRBJ2    #>  5 TRB_CD4_949   CASGTGGETQYF    TRBV6… TRBD2… TRBJ2… TRBV6    TRBD2    TRBJ2    #>  6 TRB_CD4_949   CASHSSGNTIYF    TRBV6… NA     TRBJ1… TRBV6    NA       TRBJ1    #>  7 TRB_CD4_949   CASKPPGQGGYGYTF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  8 TRB_CD4_949   CASMIDPSGNTIYF  TRBV5… NA     TRBJ1… TRBV5    NA       TRBJ1    #>  9 TRB_CD4_949   CASNARVDSPLHF   TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #> 10 TRB_CD4_949   CASRLGESPLHF    NA     NA     TRBJ1… NA       NA       TRBJ1    #> # ℹ 800 more rows #> # ℹ 4 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, seen <int> # Track top 20 clones mapping to the CD4 and CD8 samples LymphoSeq2::cloneTrack(amino_table,   sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),   sequence_track = top_freq$junction_aa[1:20] ) #> # A tibble: 20 × 12 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CASSWEQGTNYGYTF TRBV2… TRBD1… TRBJ1… TRBV28   TRBD1    TRBJ1    #>  2 TRB_CD8_949   CAIKMETPNGEQYF  TRBV1… NA     TRBJ2… TRBV10   NA       TRBJ2    #>  3 TRB_CD8_949   CAISESGVLNEKLFF TRBV1… NA     TRBJ1… TRBV10   NA       TRBJ1    #>  4 TRB_CD8_949   CASRDGQGSGNTIYF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  5 TRB_CD8_949   CASSEALPGMVPLHF TRBV2… TRBD1… TRBJ1… TRBV2    TRBD1    TRBJ1    #>  6 TRB_CD8_949   CASSGGVAAFSSYN… TRBV5… TRBD1… TRBJ1… TRBV5    TRBD1    TRBJ1    #>  7 TRB_CD8_949   CASSLAGDSQETQYF TRBV2… NA     TRBJ2… TRBV28   NA       TRBJ2    #>  8 TRB_CD8_949   CASSLQGREKLFF   TRBV2… TRBD1… TRBJ1… TRBV27   TRBD1    TRBJ1    #>  9 TRB_CD8_949   CASSPAGAYYNEQFF NA     TRBD2… TRBJ2… NA       TRBD2    TRBJ2    #> 10 TRB_CD8_949   CASSPFDRGPDTEA… TRBV2… TRBD1… TRBJ1… TRBV28   TRBD1    TRBJ1    #> 11 TRB_CD8_949   CASSPGTGTYGYTF  TRBV1… TRBD1… TRBJ1… TRBV10   TRBD1    TRBJ1    #> 12 TRB_CD8_949   CASSPLDGLTNEQFF TRBV2… NA     TRBJ2… TRBV28   NA       TRBJ2    #> 13 TRB_CD8_949   CASSPPTGERDTQYF TRBV7… TRBD2… TRBJ2… TRBV7    TRBD2    TRBJ2    #> 14 TRB_CD8_949   CASSPSRNTEAFF   TRBV4… TRBD2… TRBJ1… TRBV4    TRBD2    TRBJ1    #> 15 TRB_CD8_949   CASSQDLGQAFSPL… TRBV4… TRBD1… TRBJ1… TRBV4    TRBD1    TRBJ1    #> 16 TRB_CD8_949   CASSQDLMTVDSLF… TRBV4… TRBD1… TRBJ2… TRBV4    TRBD1    TRBJ2    #> 17 TRB_CD8_949   CASSQDRTGQYGYTF TRBV4… TRBD1… TRBJ1… TRBV4    TRBD1    TRBJ1    #> 18 TRB_CD8_949   CASSQDSSDTEAFF  TRBV4… NA     TRBJ1… TRBV4    NA       TRBJ1    #> 19 TRB_CD8_949   CASSQDWERLGEQFF TRBV1… TRBD2… TRBJ2… TRBV14   TRBD2    TRBJ2    #> 20 TRB_CD8_949   CASSREGDQPQHF   TRBV5… TRBD1… TRBJ1… TRBV5    TRBD1    TRBJ1    #> # ℹ 4 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, seen <int> # Track the top 10 clones from top.freq LymphoSeq2::cloneTrack(study_table = amino_table,    sequence_track = top_freq$junction_aa[1:10]) #> # A tibble: 75 × 12 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD8_949   CAIKMETPNGEQYF  TRBV1… NA     TRBJ2… TRBV10   NA       TRBJ2    #>  2 TRB_CD8_949   CASRDGQGSGNTIYF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  3 TRB_CD8_949   CASSLQGREKLFF   TRBV2… TRBD1… TRBJ1… TRBV27   TRBD1    TRBJ1    #>  4 TRB_CD8_949   CASSPFDRGPDTEA… TRBV2… TRBD1… TRBJ1… TRBV28   TRBD1    TRBJ1    #>  5 TRB_CD8_949   CASSPGTGTYGYTF  TRBV1… TRBD1… TRBJ1… TRBV10   TRBD1    TRBJ1    #>  6 TRB_CD8_949   CASSQDLGQAFSPL… TRBV4… TRBD1… TRBJ1… TRBV4    TRBD1    TRBJ1    #>  7 TRB_CD8_949   CASSQDLMTVDSLF… TRBV4… TRBD1… TRBJ2… TRBV4    TRBD1    TRBJ2    #>  8 TRB_CD8_949   CASSQDRTGQYGYTF TRBV4… TRBD1… TRBJ1… TRBV4    TRBD1    TRBJ1    #>  9 TRB_CD8_949   CASSQDSSDTEAFF  TRBV4… NA     TRBJ1… TRBV4    NA       TRBJ1    #> 10 TRB_CD8_949   CASSREGDQPQHF   TRBV5… TRBD1… TRBJ1… TRBV5    TRBD1    TRBJ1    #> # ℹ 65 more rows #> # ℹ 4 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, seen <int> # Track clones mapping to the CD4 and CD8 samples while ignoring all others LymphoSeq2::cloneTrack(study_table = amino_table,    sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\")) #> # A tibble: 161 × 12 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAISVGGSSPLHF   TRBV1… TRBD2… TRBJ1… TRBV10   TRBD2    TRBJ1    #>  2 TRB_CD4_949   CASDGGFRNTIYF   TRBV1… TRBD2… TRBJ1… TRBV19   TRBD2    TRBJ1    #>  3 TRB_CD4_949   CASGGLNTEAFF    NA     NA     TRBJ1… NA       NA       TRBJ1    #>  4 TRB_CD4_949   CASGLVAGSTLGGE… TRBV1… TRBD2… TRBJ2… TRBV12   TRBD2    TRBJ2    #>  5 TRB_CD4_949   CASGTGGETQYF    TRBV6… TRBD2… TRBJ2… TRBV6    TRBD2    TRBJ2    #>  6 TRB_CD4_949   CASHSSGNTIYF    TRBV6… NA     TRBJ1… TRBV6    NA       TRBJ1    #>  7 TRB_CD4_949   CASKPPGQGGYGYTF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  8 TRB_CD4_949   CASMIDPSGNTIYF  TRBV5… NA     TRBJ1… TRBV5    NA       TRBJ1    #>  9 TRB_CD4_949   CASNARVDSPLHF   TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #> 10 TRB_CD4_949   CASRLGESPLHF    NA     NA     TRBJ1… NA       NA       TRBJ1    #> # ℹ 151 more rows #> # ℹ 4 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, seen <int> # Track clones mapping to the CD4 and CD8 samples and track 2 specific sequences LymphoSeq2::cloneTrack(   study_table = amino_table, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),   sequence_track = c(\"CASSPPTGERDTQYF\", \"CASSQDRTGQYGYTF\") ) #> # A tibble: 2 × 12 #>   repertoire_id junction_aa     v_call  d_call j_call v_family d_family j_family #>   <chr>         <chr>           <chr>   <chr>  <chr>  <chr>    <chr>    <chr>    #> 1 TRB_CD8_949   CASSPPTGERDTQYF TRBV7-9 TRBD2… TRBJ2… TRBV7    TRBD2    TRBJ2    #> 2 TRB_CD8_949   CASSQDRTGQYGYTF TRBV4-3 TRBD1… TRBJ1… TRBV4    TRBD1    TRBJ1    #> # ℹ 4 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, seen <int>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/collpase_chains.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 10x Genomics data containing alpha and beta chains — collpase_chains","title":"Read 10x Genomics data containing alpha and beta chains — collpase_chains","text":"Read 10x Genomics data collapse alpha beta chains appropriately.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/collpase_chains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 10x Genomics data containing alpha and beta chains — collpase_chains","text":"","code":"collpase_chains(clone_file)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/collpase_chains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 10x Genomics data containing alpha and beta chains — collpase_chains","text":"clone_file single .txv file 10x Genomics","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/collpase_chains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 10x Genomics data containing alpha and beta chains — collpase_chains","text":"tibble alpha beta chains collapsed","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences in two or more repertoire_ids — commonSeqs","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"Creates data frame common sequences two repertoire_ids, reporting frequencies .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"","code":"commonSeqs(study_table, repertoire_ids = NULL)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"study_table list productive amino acid sequences generated LymphoSeq2 function productiveSeq() aggregate = \"junction_aa\". repertoire_ids character vector two repertoire_id names study_table.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"Returns data frame common sequences two files displaying frequencies .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,   aggregate = \"junction_aa\") LymphoSeq2::commonSeqs(   repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\"),   study_table = amino_table ) #> # A tibble: 1 × 3 #>   junction_aa     TRB_Unsorted_0 TRB_Unsorted_32 #>   <chr>                    <dbl>           <dbl> #> 1 CASSQDRTGQYGYTF        0.00429          0.0152"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences bar plot — commonSeqsBar","title":"Common sequences bar plot — commonSeqsBar","text":"Creates UpSetR bar plot showing number intersecting sequences across multiple repertoire_ids. function useful 3 repertoire_ids compared.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences bar plot — commonSeqsBar","text":"","code":"commonSeqsBar(   amino_table,   repertoire_ids,   color_sample = NULL,   color_intersection = NULL,   color = \"#377eb8\",   labels = \"no\" )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences bar plot — commonSeqsBar","text":"amino_table tibble productive amino acid sequences generated LymphoSeq2 function productiveSeq aggregate parameter set \"junction_aa\". repertoire_ids names two repertoire_ids amino_table list whose intersections shown. color_sample name single repertoire_id amino_table whose sequences colored repertoire_ids appear . color_intersection names two repertoire_ids amino_table intersections colored. color character vector color name used highlight selected repertoire_id multiple repertoire_id intersections. labels character vector indicating whether number intersecting sequences shown tops bars.Options include \"yes\" \"\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences bar plot — commonSeqsBar","text":"Returns UpSetR bar plot showing number intersecting sequences across multiple repertoire_ids.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences bar plot — commonSeqsBar","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction_aa\") LymphoSeq2::commonSeqsBar(amino_table, repertoire_ids = c(   \"TRB_CD4_949\", \"TRB_CD8_949\",   \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\" ), color_sample = \"TRB_CD8_949\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences scatter plot — commonSeqsPlot","title":"Common sequences scatter plot — commonSeqsPlot","text":"Creates scatter plot just sequences common two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences scatter plot — commonSeqsPlot","text":"","code":"commonSeqsPlot(sample1, sample2, amino_table, show = \"common\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences scatter plot — commonSeqsPlot","text":"sample1 name repertoire_id list data frames generated LymphoSeq2 function productiveSeq(). sample2 name repertoire_id list data frames generated LymphoSeq function productiveSeq(). amino_table tibble productive amino acid sequences produced function productiveSeq() containing samples compared. show character vector specifying whether common sequences shown sequences.  Available options \"common\" \"\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences scatter plot — commonSeqsPlot","text":"Returns frequency scatter plot two samples showing shared sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Common sequences scatter plot — commonSeqsPlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions. See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences scatter plot — commonSeqsPlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- productiveSeq(study_table = study_table, aggregate = \"junction_aa\") commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",   amino_table = amino_table )  # Change the X and Y axis to log-10 scale commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",   amino_table = amino_table ) +   ggplot2::scale_x_log10() +   ggplot2::scale_y_log10() +   ggplot2::annotation_logticks(sides = \"bl\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences Venn diagram — commonSeqsVenn","title":"Common sequences Venn diagram — commonSeqsVenn","text":"Creates Venn diagram comparing number common sequences two three repertoire_ids.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences Venn diagram — commonSeqsVenn","text":"","code":"commonSeqsVenn(repertoire_ids, amino_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences Venn diagram — commonSeqsVenn","text":"repertoire_ids character vector two three names repertoire_ids productiveSeq() table compare. amino_table tibble amino acid sequences generated function productiveSeq().","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences Venn diagram — commonSeqsVenn","text":"Returns Venn diagram number common sequences two three repertoire_ids.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences Venn diagram — commonSeqsVenn","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,   aggregate = \"junction_aa\") # Plot a triple Venn diagram LymphoSeq2::commonSeqsVenn(   repertoire_ids = c(     \"TRB_Unsorted_0\",     \"TRB_Unsorted_32\", \"TRB_Unsorted_83\"   ),   amino_table = amino_table )  # Plot a double Venn diagram LymphoSeq2::commonSeqsVenn(repertoire_ids = c(   \"TRB_Unsorted_0\",   \"TRB_Unsorted_32\" ), amino_table = amino_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Find k-mers and its counts — countKmer","title":"Find k-mers and its counts — countKmer","text":"Calculate counts k-mers query nucleotide sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find k-mers and its counts — countKmer","text":"","code":"countKmer(study_table, k, separate = TRUE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find k-mers and its counts — countKmer","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq(). \"repertoire_id\" \"junction\" required columns. k length k-mers find. separate boolean value. TRUE (default):  separate counts k-mer repertoire_id. FALSE : show cumulative counts instead.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find k-mers and its counts — countKmer","text":"tibble k-mer counts. counts can cumulative counts entire study_table counts repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find k-mers and its counts — countKmer","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) kmer_table <- LymphoSeq2::countKmer(study_table = study_table, k = 5,    separate = TRUE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential abundance analysis — differentialAbundance","title":"Differential abundance analysis — differentialAbundance","text":"Use Fisher exact test calculate differential abundance sequence two samples reports log2 transformed fold change, P value adjusted P value.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential abundance analysis — differentialAbundance","text":"","code":"differentialAbundance(   study_table,   repertoire_ids = NULL,   abundance = \"duplicate_count\",   type = \"junction_aa\",   q = 1,   zero = 1,   parallel = FALSE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential abundance analysis — differentialAbundance","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq2 function readImmunoSeq(). repertoire_ids character vector two repertoire_ids study_table compared. NULL (default), first two repertoire_ids study_table used. abundance input value Fisher exact test. \"duplicate_count\" default value also recommended value. type character vector indicating whether \"junction_aa\" (default) \"junction\" sequences used.  \"junction_aa\" specified, run productiveSeq() first. q numeric value 0.0 1.0 indicating threshold Holms adjusted P value (also known false discovery rate q value) subset results . sequences q value greater value shown. zero numeric value set zero values calculating log2 transformed fold change samples 1 2. apply p q value calculations. parallel Boolean value TRUE : Enable parallel processing FALSE (default): Disable parallel processing","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential abundance analysis — differentialAbundance","text":"Returns data frame columns corresponding frequency abundance measure samples 1 2, P value, Q value (Holms adjusted P value, also known false discovery rate), log2 transformed fold change.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential abundance analysis — differentialAbundance","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1)  study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,    aggregate = \"junction_aa\") LymphoSeq2::differentialAbundance(   study_table = amino_table,   repertoire_ids = c(\"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"),   type = \"junction_aa\", q = 0.01, zero = 0.001 ) #> # A tibble: 107 × 6 #>    junction_aa     TRB_Unsorted_949 TRB_Unsorted_1320        p        q    l2fc #>    <chr>                      <dbl>             <dbl>    <dbl>    <dbl>   <dbl> #>  1 CAIKMETPNGEQYF                29               326 1.14e- 6 1.14e- 6   -3.49 #>  2 CAISEGQGVKPQHF                 0               167 1.09e- 2 1.09e- 2 -Inf    #>  3 CAISESGVLNEKLFF               13               150 1.20e- 3 1.20e- 3   -3.53 #>  4 CASDGGFRNTIYF                 17               387 1.40e- 1 1.40e- 1   -4.51 #>  5 CASKPPGQGGYGYTF                0               173 1.12e- 2 1.12e- 2 -Inf    #>  6 CASNRVPEETQYF                  0               127 5.75e- 2 5.75e- 2 -Inf    #>  7 CASNSKADSTDTQYF               21              1325 1.52e- 3 1.52e- 3   -5.98 #>  8 CASRDGQGSGNTIYF               48               358 6.73e-16 6.73e-16   -2.90 #>  9 CASREDRGSSPLHF                 0               147 2.45e- 2 2.45e- 2 -Inf    #> 10 CASRLGPGAGDEAFF               12               619 1.26e- 1 1.26e- 1   -5.69 #> # ℹ 97 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Export sequences in fasta format — exportFasta","title":"Export sequences in fasta format — exportFasta","text":"Export junction amino acid sequences fasta format.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export sequences in fasta format — exportFasta","text":"","code":"exportFasta(   study_table,   type = \"junction\",   names = c(\"rank\", \"junction_aa\", \"duplicate_count\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export sequences in fasta format — exportFasta","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq(). type character vector indicating whether \"junction_aa\" \"junction\" sequences exported.  \"junction_aa\" specified, run productiveSeq() first. names character vector one column names name sequences.\"rank\" specified, rank order sequences frequency used.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export sequences in fasta format — exportFasta","text":"Exports fasta files working directory.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export sequences in fasta format — exportFasta","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") # Export raw data study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) LymphoSeq2::exportFasta(study_table = study_table, type = \"junction\",    names = c(\"junction_aa\", \"duplicate_count\")) #> Fasta files saved to /home/runner/work/LymphoSeq2/LymphoSeq2/docs/reference # Export only productive junction amino acid sequences amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,    aggregate = \"junction_aa\") LymphoSeq2::exportFasta(study_table = amino_table, type = \"junction_aa\",    names = \"duplicate_frequency\") #> Fasta files saved to /home/runner/work/LymphoSeq2/LymphoSeq2/docs/reference"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/fisherFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher test — fisherFunction","title":"Fisher test — fisherFunction","text":"Fisher test","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/fisherFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher test — fisherFunction","text":"","code":"fisherFunction(x, y, not_x, not_y)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/fisherFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher test — fisherFunction","text":"x Number instances group 1 y Number instances group 2 not_x Number instances belonging group 1 not_y Number instances belonging group 2","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene frequencies — geneFreq","title":"Gene frequencies — geneFreq","text":"Creates data frame VDJ gene counts frequencies.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene frequencies — geneFreq","text":"","code":"geneFreq(nucleotide_table, locus = \"VDJ\", family = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene frequencies — geneFreq","text":"nucleotide_table tibble productive sequences generated LymphoSeq2 function productiveSeq() parameter aggregate set \"junction\". locus character vector indicating VDJ genes include output.  Available options include \"VDJ\", \"DJ\", \"VJ\", \"DJ\", \"V\", \"D\", \"J\". family Boolean value indicating whether family names instead gene names used.  TRUE, family names used FALSE, gene names used.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene frequencies — geneFreq","text":"Returns data frame repertoire_id names, VDJ gene name, duplicate_count, \\ 100\\","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene frequencies — geneFreq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1)  study_table <- LymphoSeq2::topSeqs(study_table, top = 100) nucleotide_table <- LymphoSeq2::productiveSeq(study_table = study_table,    aggregate = \"junction\") LymphoSeq2::geneFreq(nucleotide_table, locus = \"VDJ\", family = FALSE) #> # A tibble: 416 × 5 #>    repertoire_id gene_name duplicate_count gene_type gene_frequency #>    <chr>         <chr>               <dbl> <chr>              <dbl> #>  1 TRB_CD4_949   NA                   4419 d_call            0.255  #>  2 TRB_CD4_949   TRBD1-1              5584 d_call            0.322  #>  3 TRB_CD4_949   TRBD2-1              7323 d_call            0.423  #>  4 TRB_CD4_949   TRBJ1-1               525 j_call            0.0365 #>  5 TRB_CD4_949   TRBJ1-2               944 j_call            0.0656 #>  6 TRB_CD4_949   TRBJ1-3              2083 j_call            0.145  #>  7 TRB_CD4_949   TRBJ1-4               267 j_call            0.0186 #>  8 TRB_CD4_949   TRBJ1-5              1057 j_call            0.0735 #>  9 TRB_CD4_949   TRBJ1-6              1552 j_call            0.108  #> 10 TRB_CD4_949   TRBJ2-1               614 j_call            0.0427 #> # ℹ 406 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Group productive sequences by repertoire — getGliphTable","title":"Group productive sequences by repertoire — getGliphTable","text":"Group productive sequences repertoire","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group productive sequences by repertoire — getGliphTable","text":"","code":"getGliphTable(gliph_path, progress_bar)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group productive sequences by repertoire — getGliphTable","text":"gliph_path Path individual GLIPH file progress_bar Progress bar variable","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Lorenz curve — getLorenz","title":"Calculate Lorenz curve — getLorenz","text":"Calculate Lorenz curve derived frequency amino acid sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Lorenz curve — getLorenz","text":"","code":"getLorenz(sample_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Lorenz curve — getLorenz","text":"sample_table tibble single repertoire_id generated using LymphoSeq function readImmunoSeq() productiveSeq().  \"duplicate_frequency\" required column.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Lorenz curve — getLorenz","text":"Returns Lorenz curve tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relatedness — getRelatedness","title":"Calculate relatedness — getRelatedness","text":"Calculates clonal relatedness repertoire.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relatedness — getRelatedness","text":"","code":"getRelatedness(study_table, edit_distance = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relatedness — getRelatedness","text":"study_table tibble raw productive nucleotide junction sequences. \"junction\" \"duplicate_count\" required columns. edit_distance integer giving minimum edit distance sequence must less equal . See details . Deafult 10 (default)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/iterativeSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncount, sample and iteratively calculate repertoire summary statistics — iterativeSummary","title":"Uncount, sample and iteratively calculate repertoire summary statistics — iterativeSummary","text":"Uncount, sample iteratively calculate repertoire summary statistics","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/iterativeSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncount, sample and iteratively calculate repertoire summary statistics — iterativeSummary","text":"","code":"iterativeSummary(study_table, iterations, min_count = 1000)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/iterativeSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncount, sample and iteratively calculate repertoire summary statistics — iterativeSummary","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. Note clonality usually calculated productive junction sequences. Therefore, recommended run function using productive sequence list aggregated amino acids. iterations Number iterations run sampled clonality metrics. min_count minimum depth repertoire study must sampled . Default 1000 (default)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/iterativeSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncount, sample and iteratively calculate repertoire summary statistics — iterativeSummary","text":"Tibble summarizing sequence information repertoire_id normalized depth sequencing","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot kmer distributions — kmerPlot","title":"Plot kmer distributions — kmerPlot","text":"Plot k-mer distributions repertoire id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot kmer distributions — kmerPlot","text":"","code":"kmerPlot(kmer_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot kmer distributions — kmerPlot","text":"kmer_table tibble k-mer counts generated LymphoSeq2 function countKmer separate parameter set TRUE. top number top k-mer show","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot kmer distributions — kmerPlot","text":"stacked bar chart showing k-mer distributions repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot kmer distributions — kmerPlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) kmer_table <- LymphoSeq2::countKmer(study_table = study_table, k = 5, separate = TRUE) kmer_distributions <- LymphoSeq2::kmerPlot(kmer_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Lorenz curve — lorenzCurve","title":"Lorenz curve — lorenzCurve","text":"Plots Lorenz curve derived frequency amino acid sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lorenz curve — lorenzCurve","text":"","code":"lorenzCurve(repertoire_ids, study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lorenz curve — lorenzCurve","text":"repertoire_ids character vector repertoire_id names list. study_table tibble generated using LymphoSeq2 function readImmunoSeq() productiveSeq(). \"duplicate_frequency\" required column.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lorenz curve — lorenzCurve","text":"Returns Lorenz curve.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lorenz curve — lorenzCurve","text":"Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve.  Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads.  line passing origin slope 1 reflects equal frequencies sequences.  Gini coefficient ratio area line equality observed Lorenz curve total area line equality. plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lorenz curve — lorenzCurve","text":"","code":"library(magrittr) file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") # Plot Lorenz curve with raw data study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) %>%  LymphoSeq2::topSeqs(top = 100) repertoire_ids <- study_table %>%    dplyr::pull(repertoire_id) %>%    unique() LymphoSeq2::lorenzCurve(repertoire_ids = repertoire_ids, study_table = study_table)  # Plot Lorenz curve with productive amino acid sequences amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,    aggregate = \"junction_aa\") repertoire_ids <- amino_table %>%   dplyr::pull(repertoire_id) %>%   unique() LymphoSeq2::lorenzCurve(repertoire_ids = repertoire_ids, study_table = amino_table)  # Change the legend labels, line colors, and add a title repertoire_ids <- c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\",     \"TRB_Unsorted_83\", \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\") lorenz_curve <- LymphoSeq2::lorenzCurve(repertoire_ids = repertoire_ids,    study_table = amino_table) labels <- c(\"Day 0\", \"Day 32\", \"Day 83\", \"Day 949\", \"Day 1320\") colors <- c(\"navyblue\", \"red\", \"darkgreen\", \"orange\", \"purple\",              \"yellow\", \"pink\", \"lightgreen\", \"cyan\", \"maroon\") lorenz_curve +  ggplot2::scale_color_manual(name = \"repertoire_ids\",                              breaks = repertoire_ids,                              labels = labels, values = colors) +  ggplot2::ggtitle(\"Lorenz curve\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/mostPrevalent.html","id":null,"dir":"Reference","previous_headings":"","what":"Selecting the alpha and beta chains — mostPrevalent","title":"Selecting the alpha and beta chains — mostPrevalent","text":"Select frequently occurring alpha beta chains barcode","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/mostPrevalent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selecting the alpha and beta chains — mostPrevalent","text":"","code":"mostPrevalent(barcode_data, clone_data)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/mostPrevalent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selecting the alpha and beta chains — mostPrevalent","text":"barcode_data tibble holds data one barcode identifier clone_data tibble holds data one repertoire_id (one file)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/mostPrevalent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selecting the alpha and beta chains — mostPrevalent","text":"tibble containing frequent alpha chain frequent beta chain.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwiseNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison network graph — pairwiseNetwork","title":"Pairwise comparison network graph — pairwiseNetwork","text":"Creates network graph Bhattacharyya, Similarity, Sorensen, PSI matrix.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwiseNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison network graph — pairwiseNetwork","text":"","code":"pairwiseNetwork(matrix)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwiseNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison network graph — pairwiseNetwork","text":"matrix Bhattacharyya, Similarity, Sorensen, PSI matrix produced LymphoSeq2 scoringMatrix() function.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwiseNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise comparison network graph — pairwiseNetwork","text":"network graph visualizing pairwise comparisons. thicker line connecting two nodes, greater similarity.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwiseNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise comparison network graph — pairwiseNetwork","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\",   package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table,   aggregate = \"junction_aa\") matrix <- LymphoSeq2::scoringMatrix(amino_table, mode = \"Similarity\") network_graph <- LymphoSeq2::pairwiseNetwork(matrix)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison plot — pairwisePlot","title":"Pairwise comparison plot — pairwisePlot","text":"Creates heat map Bhattacharyya, Similarity, Sorensen, PSI matrix.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison plot — pairwisePlot","text":"","code":"pairwisePlot(matrix)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison plot — pairwisePlot","text":"matrix Bhattacharyya, Similarity, Sorensen, PSI matrix produced LymphoSeq2 scoringMatrix() function.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise comparison plot — pairwisePlot","text":"pairwise comparison heat map.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pairwise comparison plot — pairwisePlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise comparison plot — pairwisePlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1)  study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction_aa\") # Plot similarity using Similarity score similarity_matrix <- LymphoSeq2::scoringMatrix(   productive_table = amino_table,   mode = \"Similarity\" ) LymphoSeq2::pairwisePlot(matrix = similarity_matrix)  # Plot similarity using Bhattacharyya score bhattacharyya_matrix <- LymphoSeq2::scoringMatrix(   productive_table = amino_table,   mode = \"Bhattacharyya\" ) LymphoSeq2::pairwisePlot(matrix = bhattacharyya_matrix)  # Change plot color, title legend, and add title LymphoSeq2::pairwisePlot(matrix = similarity_matrix) +   ggplot2::scale_fill_gradient(low = \"#deebf7\", high = \"#3182bd\") +   ggplot2::labs(fill = \"Similarity score\") +   ggplot2::ggtitle(\"Pairwise similarity score\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent similarity index — percentSI","title":"Percent similarity index — percentSI","text":"Calculates Percent similarity index two groups repertoires. Percent similarity index, compares number similar dissimilar species present two sites, also incorporate abundance.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent similarity index — percentSI","text":"","code":"percentSI(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent similarity index — percentSI","text":"sample_list list two tibble corresponding derived productiveSeq() function LymphoSeq2. \"duplicate_frequency\", \"junction_aa\", \"repertoire_id\" columns necessary calculation Bhattacharyya coefficient.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percent similarity index — percentSI","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create phylogenetic tree — phyloTree","title":"Create phylogenetic tree — phyloTree","text":"Create phylogenetic tree using neighbor joining tree estimation amino acid junction CDR3 sequences list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create phylogenetic tree — phyloTree","text":"","code":"phyloTree(   study_table,   repertoire_ids,   type = \"junction\",   layout = \"rectangular\",   label = TRUE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create phylogenetic tree — phyloTree","text":"study_table tibble unproductive junction sequences productive junction sequences generated LymphoSeq2 function productiveSeq(). \"v_family\", \"d_family\", \"j_family\", \"duplicate_count\" required columns. repertoire_ids character vector indicating name repertoire_id study table. type character vector indicating whether \"junction_aa\" \"junction\" (default) sequences compared. layout character vector indicating tree layout. Options include \"rectangular\" (default), \"slanted\", \"fan\", \"circular\", \"radial\" \"unrooted\". label Boolean value TRUE (default): use sequencing duplicate_count label tree FALSE : show duplicate_count","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create phylogenetic tree — phyloTree","text":"Returns phylogenetic tree leaf represents sequence color coded V, D, J gene usage. number next leaf refers sequence duplicate_count. triangle shaped leaf indicates dominant sequence. Refer ggtree Bioconductor package documentation details manipulate tree.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create phylogenetic tree — phyloTree","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) nucleotide_table <- LymphoSeq2::productiveSeq(   study_table = study_table,   aggregate = \"junction\" ) LymphoSeq2::phyloTree(   study_table = nucleotide_table, repertoire_ids = \"IGH_MVQ92552A_BL\",   type = \"junction\", layout = \"rectangular\" ) #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the LymphoSeq2 package. #>   Please report the issue at #>   <https://github.com/shashidhar22/LymphoSeq2/issues>.  LymphoSeq2::phyloTree(   study_table = nucleotide_table, repertoire_ids = \"IGH_MVQ92552A_BL\",   type = \"junction_aa\", layout = \"circular\" )  # Add scale and title to figure LymphoSeq2::phyloTree(   study_table = nucleotide_table, repertoire_ids = \"IGH_MVQ92552A_BL\",   type = \"junction_aa\", layout = \"rectangular\" ) +   ggtree::theme_tree2() +   ggplot2::theme(     legend.position = \"right\",     legend.key = ggplot2::element_rect(colour = \"white\")   ) +   ggplot2::ggtitle(\"Title\")  # Hide legend and leaf labels LymphoSeq2::phyloTree(   study_table = nucleotide_table, repertoire_ids = \"IGH_MVQ92552A_BL\",   type = \"junction\", layout = \"rectangular\", label = FALSE ) +   ggplot2::theme(legend.position = \"none\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"Generate MSA alignment figures results alignSeq()","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"","code":"plotAlignment(msa)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"msa msa object obtained alignSeq() function LymphoSeq2.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"Multiple sequence alignment plot.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"","code":"library(ggmsa) #> ggmsa v1.3.4  Document: http://yulab-smu.top/ggmsa/ #>  #> If you use ggmsa in published research, please cite: #> L Zhou, T Feng, S Xu, F Gao, TT Lam, Q Wang, T Wu, H Huang, L Zhan, L Li, Y Guan, Z Dai*, G Yu* ggmsa: a visual exploration tool for multiple sequence alignment and associated data. Briefings in Bioinformatics. DOI:10.1093/bib/bbac222 file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) nucleotide_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction\") msa <- LymphoSeq2::alignSeq(nucleotide_table,   repertoire_id = \"IGH_MVQ92552A_BL\",   type = \"junction_aa\", method = \"ClustalW\" ) #> use default substitution matrix LymphoSeq2::plotAlignment(msa) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rarefaction and extrapolation curves for samples — plotRarefactionCurve","title":"Plot rarefaction and extrapolation curves for samples — plotRarefactionCurve","text":"Given study table, sample plot rarefaction curves estimate repertoire diversity. method used generate rarefaction curve derived Chao et al., (2014) using iNEXT library","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rarefaction and extrapolation curves for samples — plotRarefactionCurve","text":"","code":"plotRarefactionCurve(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rarefaction and extrapolation curves for samples — plotRarefactionCurve","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rarefaction and extrapolation curves for samples — plotRarefactionCurve","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) LymphoSeq2::plotRarefactionCurve(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone tracking alluvial plot — plotTrack","title":"Clone tracking alluvial plot — plotTrack","text":"Creates alluvial tracking amino acid frequencies across multiple samples","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone tracking alluvial plot — plotTrack","text":"","code":"plotTrack(   clone_table,   alist = NULL,   apal = NULL,   breaks = 2,   alphas = 0,   breaks_pal = c(\"#7fc97f\", \"#beaed4\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone tracking alluvial plot — plotTrack","text":"clone_table tibble productive amino acid sequences generated LymphoSeq2 function cloneTrack() alist optional list amino acid, list provided sequences highlighted apal optional list palette colors used amino acids highlighted breaks Add additional band behind alluvial plot highlight group, specifies bar break appear alphas Set alpha band breaks_pal Specify palette bands","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone tracking alluvial plot — plotTrack","text":"alluvial diagram tracking particular clone across samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clone tracking alluvial plot — plotTrack","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone tracking alluvial plot — plotTrack","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1)  study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table,   aggregate = \"junction_aa\" ) clone_table <- LymphoSeq2::cloneTrack(   study_table = amino_table,   sample_list = c(     \"TRB_CD8_949\",     \"TRB_CD8_CMV_369\"   ) ) LymphoSeq2::plotTrack(clone_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight clones — plotTrackSingular","title":"Highlight clones — plotTrackSingular","text":"Create alluvial plots highlighting sequence amino acid list","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight clones — plotTrackSingular","text":"","code":"plotTrackSingular(clone_table)  highlightPlot(aseq, clone_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight clones — plotTrackSingular","text":"clone_table tibble productive amino acid sequences highlight generated LymphoSeq function cloneTrack aseq CDR3 amino acid sequence highlight","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight clones — plotTrackSingular","text":"list alluvial plots highlighting single sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highlight clones — plotTrackSingular","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Highlight clones — plotTrackSingular","text":"highlightPlot: Highlight specific amino acid sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight clones — plotTrackSingular","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction_aa\") top_seq <- LymphoSeq2::topSeqs(amino_table, top = 3) clone_table <- LymphoSeq2::cloneTrack(   study_table = top_seq,   sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\") ) LymphoSeq2::plotTrackSingular(clone_table) #> [[1]]  #>  #> [[2]]  #>  #> [[3]]  #>  #> [[4]]  #>  #> [[5]]  #>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prepDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a antigen specific T-cells database — prepDB","title":"Create a antigen specific T-cells database — prepDB","text":"function takes input path flat file versions IEDB, McPAS-TCR, VdjDB slim order generates RDA file T-cells B-cells recorded show antigenic specificity three databases. script internal use run every six months update databases. flat files function can downloaded following links: IEDB: https://www.iedb.org/downloader.php?file_name=doc/receptor_full_v3.zip McPAS-TCR: http://friedmanlab.weizmann.ac.il/McPAS-TCR/ VdjDB: https://github.com/antigenomics/vdjdb-db/releases Note: vdjdb.slim.txt used input Note: order input matters, please provide flat file paths order IEDB, McPAS-TCR, VdjDB.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prepDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a antigen specific T-cells database — prepDB","text":"","code":"prepDB(db_path = NULL)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prepDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a antigen specific T-cells database — prepDB","text":"db_path Path IEDB, McPAS-TCR VdjDB","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prevalenceTRB.html","id":null,"dir":"Reference","previous_headings":"","what":"Prevalence TRB — prevalenceTRB","title":"Prevalence TRB — prevalenceTRB","text":"database describes frequency CDR3 amino acid sequence found cohort 55 PBMC samples healthy individuals","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prevalenceTRB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prevalence TRB — prevalenceTRB","text":"","code":"prevalenceTRB"},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prevalenceTRB.html","id":"prevalencetrb","dir":"Reference","previous_headings":"","what":"prevalenceTRB","title":"Prevalence TRB — prevalenceTRB","text":"tibble 11,724,294 rows 2 columns: prevalence Frequency sequences 55 healthy PBMC samples aminoAcid T-cell receptor beta chain amino acid sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/prevalenceTRB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Prevalence TRB — prevalenceTRB","text":"TCR beta sequencing data PBMCs 55 healthy individuals","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Select productive sequences — productiveSeq","title":"Select productive sequences — productiveSeq","text":"productiveSeq() Select productive nucleotide/amino acid CDR3 sequences tibble containing raw AIRR formatted data. Aggregation raw data either done productive CDR3 amino acid sequence (junction_aa) productive CDR3 nucleotide sequence (junction).  \"junction_aa\" selected, resulting tibble display frequently observed. V, D, J gene associated formation productive CDR3 amino acid sequence. \"junction\" selected columns original list present outputted list.  difference output due fact amino acid CDR3 sequence may encoded multiple unique junction sequences differing V, D, J genes.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select productive sequences — productiveSeq","text":"","code":"productiveSeq(study_table, aggregate = \"junction_aa\", prevalence = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select productive sequences — productiveSeq","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. aggregate Indicates whether values \"duplicate_count\" \"duplicate_frequency\" aggregated amino acid junction sequence. Acceptable values \"junction_aa\" \"junction\". prevalence Boolean value TRUE : Add new column study table giving prevalence CDR3 amino acid sequence 55 healthy donor peripheral blood samples. FALSE (default): add prevelance information","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select productive sequences — productiveSeq","text":"Returns list data frames productive amino acid sequences recomputed values \"duplicate_count\", \"duplicate_frequency\". productive sequences defined sequences frame early stop codon.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select productive sequences — productiveSeq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(   study_table = study_table,   aggregate = \"junction_aa\",   prevalence = TRUE ) nucleotide_table <- LymphoSeq2::productiveSeq(   study_table = study_table,   aggregate = \"junction\",   prevalence = FALSE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/publishedTRB.html","id":null,"dir":"Reference","previous_headings":"","what":"Published TRB — publishedTRB","title":"Published TRB — publishedTRB","text":"database describes T-cell beta chain amino acid sequences found associated antigenic specificity","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/publishedTRB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Published TRB — publishedTRB","text":"","code":"publishedTRB"},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/publishedTRB.html","id":"publishedtrb","dir":"Reference","previous_headings":"","what":"publishedTRB","title":"Published TRB — publishedTRB","text":"tibble 11,724,294 rows 2 columns: prevalence Frequency sequences 55 healthy PBMC samples aminoAcid T-cell receptor beta chain amino acid sequence PMID Pubmed ID HLA Known MHC restriction antigen Antigen name epitope Known epitope sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/publishedTRB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Published TRB — publishedTRB","text":"T-cells previously published T-cell beta chain CDR3 amino acid sequences known antigenic specificity","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/read10x.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 10x Genomics files — read10x","title":"Read 10x Genomics files — read10x","text":"Imports tab-separated value (.tsv) files exported 10x Genomics stores MiAIRR compliant tibbles.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/read10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 10x Genomics files — read10x","text":"","code":"read10x(path, recursive = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/read10x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 10x Genomics files — read10x","text":"path Path directory containing .tsv files. files .tsv extension imported. recursive Boolean value TRUE : function recursively search directory .tsv files FALSE (default): Open file using path","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/read10x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 10x Genomics files — read10x","text":"Returns tibble MiAIRR headers repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GLIPH files — readGliph","title":"Read GLIPH files — readGliph","text":"readGliph() Imports tab-separated value (.tsv) files generated GLIPH","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GLIPH files — readGliph","text":"","code":"readGliph(gliph_path)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GLIPH files — readGliph","text":"gliph_path Path containing GLIPH convergence group files. file name used repertoire_id output, advisable rename GLIPH2 files match input TRB file names GLIPH2 table repertoire table can merged","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GLIPH files — readGliph","text":"Tibble four columns, repertoire_id, gliph count, specificity group junction amino acid sequence. GLIPH file name used repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GLIPH files — readGliph","text":"files contain three columns, GLIPH2 convergence group count, specificity group sequence space separated list junction_aa sequences. function reads files tibble three columns, expanding junction_aa column row tibble corresponds one junction_aa","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GLIPH files — readGliph","text":"","code":"file_path <- base::system.file(\"extdata\", \"TCRB_gliph\", package = \"LymphoSeq2\") gliph_table <- LymphoSeq2::readGliph(file_path)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ImmunoSeq files — readImmunoSeq","title":"Read ImmunoSeq files — readImmunoSeq","text":"readImmunoSeq() Imports tab-separated value (.tsv) files exported Adaptive Biotechnologies ImmunoSEQ analyzer, BGI IR-SEQ, MiXCR stores MiAIRR compliant tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ImmunoSeq files — readImmunoSeq","text":"","code":"readImmunoSeq(path, recursive = FALSE, threads = parallel::detectCores()/2)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ImmunoSeq files — readImmunoSeq","text":"path Path directory containing tab-delimited files. files extension .tsv imported. names data frames names files. recursive Boolean value TRUE : function recursively search directory .tsv files FALSE (default): Open file using path threads Number threads.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ImmunoSeq files — readImmunoSeq","text":"Returns tibble MiAIRR headers repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read ImmunoSeq files — readImmunoSeq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, recursive = FALSE,   threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove sequence — removeSeq","title":"Remove sequence — removeSeq","text":"Removes amino acid sequence associated data instances within study table recomputes duplicate_frequency.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove sequence — removeSeq","text":"","code":"removeSeq(study_table, sequence)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove sequence — removeSeq","text":"study_table tibble imported using LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. sequence character vector one amino acid sequences remove study table","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove sequence — removeSeq","text":"Returns tibble like one imported except rows specified amino acid sequence removed.  \"duplicate_frequency\" recalculated.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove sequence — removeSeq","text":"","code":"library(magrittr) file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) Lstudy_table <- LymphoSeq2::topSeqs(study_table, top = 100) LymphoSeq2::searchSeq(study_table, sequence = \"CASSDLIGNGKLFF\") #> # A tibble: 0 × 147 #> # ℹ 147 variables: sequence_id <chr>, sequence <chr>, sequence_aa <chr>, #> #   rev_comp <lgl>, productive <lgl>, vj_in_frame <lgl>, stop_codon <lgl>, #> #   complete_vdj <lgl>, locus <chr>, v_call <chr>, d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, … cleaned_table <- LymphoSeq2::removeSeq(study_table, sequence = \"CASSDLIGNGKLFF\") LymphoSeq2::searchSeq(cleaned_table, sequence = \"CASSDLIGNGKLFF\") #> # A tibble: 0 × 147 #> # ℹ 147 variables: sequence_id <chr>, sequence <chr>, sequence_aa <chr>, #> #   rev_comp <lgl>, productive <lgl>, vj_in_frame <lgl>, stop_codon <lgl>, #> #   complete_vdj <lgl>, locus <chr>, v_call <chr>, d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, …"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":null,"dir":"Reference","previous_headings":"","what":"Run iNEXT on repertoire_ids — runINext","title":"Run iNEXT on repertoire_ids — runINext","text":"Given repertoire_id table, generate rarefaction curves estimate repertoire diversity. method used generate rarefaction curve derived Chao et al., (2014) using iNEXT library","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run iNEXT on repertoire_ids — runINext","text":"","code":"runINext(sample_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run iNEXT on repertoire_ids — runINext","text":"sample_table tibble consisting antigen receptor sequencing data imported LymphoSeq2 function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run iNEXT on repertoire_ids — runINext","text":"","code":"library(magrittr) file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) %>%  LymphoSeq2::topSeqs(top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table,   aggregate = \"junction_aa\",   prevalence = TRUE ) amino_table <- amino_table %>%   dplyr::filter(repertoire_id == \"TRB_Unsorted_1320\") rarefaction_table <- LymphoSeq2::runINext(amino_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sampledSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample repertoire — sampledSummary","title":"Sample repertoire — sampledSummary","text":"Sample repertoire","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sampledSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample repertoire — sampledSummary","text":"","code":"sampledSummary(study_table, min_count)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sampledSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample repertoire — sampledSummary","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. Note clonality usually calculated productive junction sequences. Therefore, recommended run function using productive sequence list aggregated amino acids. min_count minimum depth repertoire study must sampled . Default 1000 (default)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sampledSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample repertoire — sampledSummary","text":"Tibble summarizing sequence information repertoire_id randomly sampled minimum count","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"Calculates Bhattacharyya coefficient, Similarity score, Sorensen Index, Percent Similarity Index pairwise comparison list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"","code":"scoringMatrix(productive_table, mode = \"Bhattacharyya\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"productive_table tibble productive sequences generated LymphoSeq function productiveSeq().  \"duplicate_frequency\" \"junction_aa\" required columns. mode mode use calculating pairwise similarity. Can take values \"Bhattacharyya\", \"Similarity\", \"Sorensen\", \"PSI\". Default \"Bhattacharyya\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"data frame Bhattacharyya coefficients, Similarity scores, Sorensen Index, Percent Similarity Index calculated pairwise comparisons list repertoire_id data frames. metrics measure amount overlap two samples. value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table, aggregate = \"junction_aa\") bhattacharyya_matrix <- LymphoSeq2::scoringMatrix(   productive_table = amino_table,   mode = \"Bhattacharyya\" ) similarity_matrix <- LymphoSeq2::scoringMatrix(   productive_table = amino_table,   mode = \"Similarity\" ) sorensen_matrix <- LymphoSeq2::scoringMatrix(   productive_table = amino_table,   mode = \"Sorensen\" ) psi_matrix <- LymphoSeq2::scoringMatrix(   productive_table = amino_table,   mode = \"PSI\" )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from IEDB, VdjDB and McPASDb — searchDB","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from IEDB, VdjDB and McPASDb — searchDB","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from IEDB, VdjDB and McPASDb — searchDB","text":"","code":"searchDB(study_table, dbname = \"all\", chain = \"trb\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from IEDB, VdjDB and McPASDb — searchDB","text":"study_table tibble generated LymphoSeq2 functions readImmunoSeq(), productiveSeq(), searchPublished() topSeqs(). \"junction_aa\", \"duplicate_frequency\", \"duplicate_count\" required columns. dbname vector database source search antigenic specificity T-cell B-cell dataset: \"\", \"IEDB\", \"McPAS-TCR\", \"VdjDB\". chain receptor chain type search public databases: \"tra\", \"trb\", \"light\", \"heavy\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from IEDB, VdjDB and McPASDb — searchDB","text":"Returns input table annotated recorded antigenic specificity public databases.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from IEDB, VdjDB and McPASDb — searchDB","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\") top_seqs <- LymphoSeq2::topSeqs(productive_table = amino_table, top = 1) LymphoSeq2::searchDB(study_table = top_seqs, dbname = \"all\", chain = \"trb\") #> # A tibble: 10 × 26 #>    repertoire_id     junction_aa v_call d_call j_call v_family d_family j_family #>    <chr>             <chr>       <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949       CASSESAGST… TRBV1… TRBD2… TRBJ2… TRBV10   TRBD2    TRBJ2    #>  2 TRB_CD8_949       CASSPAGAYY… NA     TRBD2… TRBJ2… NA       TRBD2    TRBJ2    #>  3 TRB_CD8_CMV_369   CASSPPTGER… TRBV7… TRBD2… TRBJ2… TRBV7    TRBD2    TRBJ2    #>  4 TRB_Unsorted_0    CASSPVSNEQ… TRBV2… TRBD2… TRBJ2… TRBV28   TRBD2    TRBJ2    #>  5 TRB_Unsorted_1320 CASSPAGAYY… NA     TRBD2… TRBJ2… NA       TRBD2    TRBJ2    #>  6 TRB_Unsorted_1496 CASSPAGAYY… NA     TRBD2… TRBJ2… NA       TRBD2    TRBJ2    #>  7 TRB_Unsorted_32   CASSLQGREK… TRBV2… TRBD1… TRBJ1… TRBV27   TRBD1    TRBJ1    #>  8 TRB_Unsorted_369  CASSQDWERL… TRBV1… NA     TRBJ2… TRBV14   NA       TRBJ2    #>  9 TRB_Unsorted_83   CASSLQGREK… TRBV2… TRBD1… TRBJ1… TRBV27   TRBD1    TRBJ1    #> 10 TRB_Unsorted_949  CASSPAGAYY… NA     TRBD2… TRBJ2… NA       TRBD2    TRBJ2    #> # ℹ 18 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, tra_cdr3_aa <chr>, gene <chr>, epitope <chr>, #> #   pathology <chr>, antigen <chr>, tra_v_call <chr>, tra_j_call <chr>, #> #   mhc_allele <chr>, reference <chr>, score <dbl>, cell_type <chr>, #> #   source <chr>, trb_v_call <chr>, trb_j_call <chr>, Species <chr>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"","code":"searchPublished(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"study_table tibble generated LymphoSeq2 functions readImmunoSeq() productiveSeq().  \"junction_aa\", \"duplicate_frequency\", \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"Returns tibble instance published TCR sequence appeared along additional information including antigen specificity, epitope, HLA type, PubMed ID (PMID) reference sequence characterized.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\") LymphoSeq2::searchPublished(amino_table) #> # A tibble: 810 × 16 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAISVGGSSPLHF   TRBV1… TRBD2… TRBJ1… TRBV10   TRBD2    TRBJ1    #>  2 TRB_CD4_949   CASDGGFRNTIYF   TRBV1… TRBD2… TRBJ1… TRBV19   TRBD2    TRBJ1    #>  3 TRB_CD4_949   CASGGLNTEAFF    NA     NA     TRBJ1… NA       NA       TRBJ1    #>  4 TRB_CD4_949   CASGLVAGSTLGGE… TRBV1… TRBD2… TRBJ2… TRBV12   TRBD2    TRBJ2    #>  5 TRB_CD4_949   CASGTGGETQYF    TRBV6… TRBD2… TRBJ2… TRBV6    TRBD2    TRBJ2    #>  6 TRB_CD4_949   CASHSSGNTIYF    TRBV6… NA     TRBJ1… TRBV6    NA       TRBJ1    #>  7 TRB_CD4_949   CASKPPGQGGYGYTF TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #>  8 TRB_CD4_949   CASMIDPSGNTIYF  TRBV5… NA     TRBJ1… TRBV5    NA       TRBJ1    #>  9 TRB_CD4_949   CASNARVDSPLHF   TRBV6… TRBD1… TRBJ1… TRBV6    TRBD1    TRBJ1    #> 10 TRB_CD4_949   CASRLGESPLHF    NA     NA     TRBJ1… NA       NA       TRBJ1    #> # ℹ 800 more rows #> # ℹ 8 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, PMID <fct>, HLA <fct>, antigen <fct>, #> #   epitope <fct>, prevalence <dbl>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for a sequence — searchSeq","title":"Search for a sequence — searchSeq","text":"Search one amino acid junction CDR3 sequences study tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for a sequence — searchSeq","text":"","code":"searchSeq(   study_table,   sequence,   seq_type = \"junction\",   edit_distance = 0,   match = \"global\" )  findSeq(sequence, query_list, edit_distance, seq_type, match)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for a sequence — searchSeq","text":"study_table tibble generated LymphoSeq2 functions readImmunoSeq() productiveSeq().  \"junction_aa\" \"junction\", \"duplicate_frequency\", \"duplicate_count\" required columns. sequence character vector one ore amino acid junction CDR3 sequences search. seq_type character vector specifying type sequences searched.  Available options \"junction_aa\" \"junction\". edit_distance integer giving minimum edit distance sequence must less equal .  See details . match string indicating type sequence matching perform. Acceptable values \"global\" \"partial\". See details . query_list List productive CDR3 nucleotide amino acid sequences","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for a sequence — searchSeq","text":"Returns rows every instance list data frames searched sequence(s) appeared. Tibble sequences differ input sequence edit distance threshold provided","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for a sequence — searchSeq","text":"exact partial match means searched sequence contained within target sequence.  exact global match means searched sequence identical target sequence. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence .  example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Search for a sequence — searchSeq","text":"findSeq: Find sequences edit distance threshold query list","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for a sequence — searchSeq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) aa1 <- \"CASSPVSNEQFF\" aa2 <- \"CASSQEVPPYQAFF\" LymphoSeq2::searchSeq(   study_table = study_table,   sequence = aa1,   seq_type = \"junction_aa\",   edit_distance = 0,   match = \"global\" ) #> # A tibble: 1 × 147 #>   sequence_id    sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>   <chr>          <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #> 1 TRB_Unsorted_… CTGATTC… CASSPVSNEQ… FALSE    FALSE      NA          FALSE      #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, #> #   cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, fwr1 <chr>, fwr1_aa <chr>, … LymphoSeq2::searchSeq(   study_table = study_table,   sequence = c(aa1, aa2),   seq_type = \"junction_aa\",   edit_distance = 0,   match = \"global\" ) #> # A tibble: 2 × 147 #>   sequence_id    sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>   <chr>          <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #> 1 TRB_Unsorted_… CTGATTC… CASSPVSNEQ… FALSE    FALSE      NA          FALSE      #> 2 TRB_Unsorted_… ATCAATT… CASSQEVPPY… FALSE    FALSE      NA          FALSE      #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, #> #   cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, fwr1 <chr>, fwr1_aa <chr>, … LymphoSeq2::searchSeq(   study_table = study_table,   sequence = aa1,   seq_type = \"junction_aa\",   edit_distance = 1,   match = \"global\" ) #> # A tibble: 1 × 147 #>   sequence_id    sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>   <chr>          <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #> 1 TRB_Unsorted_… CTGATTC… CASSPVSNEQ… FALSE    FALSE      NA          FALSE      #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, #> #   cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, fwr1 <chr>, fwr1_aa <chr>, … nt <- \"CTGATTCTGGAGTCCGCCAGCACCAACCAGACATCTATGTACCTCTGTGCCAGCAGTCCGGTAAGCAATGAGCAGTTCTTCGGGCCA\" LymphoSeq2::searchSeq(   study_table = study_table,   sequence = nt,   seq_type = \"junction\",   edit_distance = 3,   match = \"global\" ) #> # A tibble: 1 × 147 #>   sequence_id    sequence sequence_aa rev_comp productive vj_in_frame stop_codon #>   <chr>          <chr>    <chr>       <lgl>    <lgl>      <lgl>       <lgl>      #> 1 TRB_Unsorted_… CTGATTC… CASSPVSNEQ… FALSE    FALSE      NA          FALSE      #> # ℹ 140 more variables: complete_vdj <lgl>, locus <chr>, v_call <chr>, #> #   d_call <chr>, d2_call <chr>, j_call <chr>, c_call <chr>, #> #   sequence_alignment <chr>, sequence_alignment_aa <chr>, #> #   germline_alignment <chr>, germline_alignment_aa <chr>, junction <chr>, #> #   junction_aa <chr>, np1 <chr>, np1_aa <chr>, np2 <chr>, np2_aa <chr>, #> #   np3 <chr>, np3_aa <chr>, cdr1 <chr>, cdr1_aa <chr>, cdr2 <chr>, #> #   cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, fwr1 <chr>, fwr1_aa <chr>, … LymphoSeq2::searchSeq(   study_table = study_table,   sequence = \"CASSPVS\",   seq_type = \"junction_aa\",   edit_distance = 0,   match = \"global\" ) #> # A tibble: 0 × 147 #> # ℹ 147 variables: sequence_id <chr>, sequence <chr>, sequence_aa <chr>, #> #   rev_comp <lgl>, productive <lgl>, vj_in_frame <lgl>, stop_codon <lgl>, #> #   complete_vdj <lgl>, locus <chr>, v_call <chr>, d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, … LymphoSeq2::searchSeq(   study_table = study_table,   sequence = nt,   seq_type = \"junction\",   edit_distance = 0,   match = \"global\" ) #> # A tibble: 0 × 147 #> # ℹ 147 variables: sequence_id <chr>, sequence <chr>, sequence_aa <chr>, #> #   rev_comp <lgl>, productive <lgl>, vj_in_frame <lgl>, stop_codon <lgl>, #> #   complete_vdj <lgl>, locus <chr>, v_call <chr>, d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, …"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/selectChain.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the most frequent chain — selectChain","title":"Select the most frequent chain — selectChain","text":"Select frequent chain","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/selectChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the most frequent chain — selectChain","text":"","code":"selectChain(barcode_data, clone_data, chain = \"TRA\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/selectChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the most frequent chain — selectChain","text":"barcode_data tibble holds data one barcode identifier clone_data tibble holds data one repertoire_id (one file) chain chain examine select frequently occurring one. Values given can \"TRA\" \"TRB\" indicate alpha beta chain respectively.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/selectChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the most frequent chain — selectChain","text":"tibble one row data contains frequently occurring chain.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence matrix — seqMatrix","title":"Sequence matrix — seqMatrix","text":"Creates data frame unique, productive amino acid sequences rows repertoire_id names headers.  value data frame represents frequency sequence appeared repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence matrix — seqMatrix","text":"","code":"seqMatrix(amino_table, sequences = NULL, by = \"duplicate_frequency\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence matrix — seqMatrix","text":"amino_table tibble productive amino acid sequences generated LymphoSeq2 function productiveSeq() aggregate parameter set \"junction_aa\". sequences character vector amino acid sequences interest.  useful specify output LymphoSeq functions uniqueSeqs() topSeqs() sub-setting \"junction_aa\" column.  See examples . Available options \"duplicate_frequency\" \"duplicate_count\". Default \"duplicate_frequency\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence matrix — seqMatrix","text":"Returns data frame unique, productive amino acid sequences rows \\","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence matrix — seqMatrix","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table,   aggregate = \"junction_aa\" ) top_seqs <- LymphoSeq2::topSeqs(amino_table,   top = 1 ) sequence_matrix <- LymphoSeq2::seqMatrix(amino_table,   sequences = top_seqs$junction_aa, by = \"duplicate_frequency\" ) unique_seqs <- LymphoSeq2::uniqueSeqs(amino_table) sequence_matrix <- LymphoSeq2::seqMatrix(amino_table,   sequences = unique_seqs$junction_aa, by = \"duplicate_frequency\" ) # It can be helpful to combine top.freq and sequence.matrix top_freq <- LymphoSeq2::topFreq(amino_table, frequency = 0.001) sequence_matrix <- LymphoSeq2::seqMatrix(amino_table, sequences = top_freq$junction_aa) top_freq_matrix <- merge(top_freq, sequence_matrix)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Similarity score — similarityScore","title":"Similarity score — similarityScore","text":"Calculates similarity score two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similarity score — similarityScore","text":"","code":"similarityScore(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similarity score — similarityScore","text":"sample_list list two tibble corresponding derived productiveSeq() function LymphoSeq2. \"duplicate_frequency\", \"junction_aa\", \"repertoire_id\" columns necessary calculation Bhattacharyya coefficient.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Similarity score — similarityScore","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorensen index — sorensenIndex","title":"Sorensen index — sorensenIndex","text":"Calculates Sorensen index two groups repertoires. Similar Jaccard index, Sorensen index gives greater weight shared sequences unique sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorensen index — sorensenIndex","text":"","code":"sorensenIndex(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorensen index — sorensenIndex","text":"sample_list list two tibble corresponding derived productiveSeq() function LymphoSeq2. \"duplicate_frequency\", \"junction_aa\", \"repertoire_id\" columns necessary calculation Bhattacharyya coefficient.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorensen index — sorensenIndex","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/standardize10x.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize 10X data inputs — standardize10x","title":"Standardize 10X data inputs — standardize10x","text":"Standardize 10X data inputs","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/standardize10x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize 10X data inputs — standardize10x","text":"","code":"standardize10x(clone_file)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/standardize10x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize 10X data inputs — standardize10x","text":"clone_file single .tsv file 10x Genomics","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/standardize10x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize 10X data inputs — standardize10x","text":"tibble standardized 10X data.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for each repertoire_id in the analysis — summarySeq","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"Get summary statistics repertoire_id analysis","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"","code":"summarySeq(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq(). \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. Note clonality usually calculated productive junction sequences. Therefore, recommended run function using productive sequence list aggregated amino acids.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"Tibble summarizing sequence information repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Top frequencies — topFreq","title":"Top frequencies — topFreq","text":"Creates table top productive amino acid sequences specified minimum frequency threshold reports number samples sequence appears along minimum, maximum, mean frequency across samples.  T cell receptor beta sequences, percent prevalence antigen specificity sequence also provided.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top frequencies — topFreq","text":"","code":"topFreq(productive_table, frequency = 0.1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top frequencies — topFreq","text":"productive_table tibble productive amino acid sequences imported using function LymphoSeq2 function productiveSeq() aggregate parameter set \"junction_aa\". frequency minimum frequency sequence appears listed samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top frequencies — topFreq","text":"tibble amino acid sequences number samples sequence appears along minimum, maximum, mean frequency across samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Top frequencies — topFreq","text":"T cell receptor beta sequences, additionally reported \\ Also provided antigen specificity sequence known comparing database previously reported sequences literature.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top frequencies — topFreq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\") top_freq <- LymphoSeq2::topFreq(productive_table = amino_table, frequency = 0.1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Top sequences — topSeqs","title":"Top sequences — topSeqs","text":"Creates tibble selected number top productive sequences study table.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top sequences — topSeqs","text":"","code":"topSeqs(productive_table, top = 1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top sequences — topSeqs","text":"productive_table tibble productive sequences generated LymphoSeq2 function productiveSeq(). \"duplicate_frequency\" \"junction_aa\" required columns. top number top productive sequences data frame subset frequencies.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top sequences — topSeqs","text":"Returns tibble selected number top productive sequences list data frames.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Top sequences — topSeqs","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\") top_seqs <- LymphoSeq2::topSeqs(productive_table = amino_table, top = 1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative frequency bar plot of top sequences — topSeqsPlot","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"Create cumulative frequency bar plot specified number top sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"","code":"topSeqsPlot(study_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"study_table study tibble imported using LymphoSeq2 function readImmunoSeq() productiveSeq() top number top sequences colored bar plot.  , less frequent sequences colored violet.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"Returns cumulative frequency bar plot top sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\") LymphoSeq2::topSeqsPlot(study_table = amino_table, top = 10)  # Display the number of sequences at the top of bar plot and add a title n <- as.character(nrow(study_table)) LymphoSeq2::topSeqsPlot(study_table = amino_table, top = 10) +   ggplot2::annotate(\"text\", x = 1:length(n), y = 105, label = n, color = \"black\") +   ggplot2::expand_limits(y = c(0, 110)) + ggplot2::ggtitle(\"Top sequences\") +   ggplot2::scale_x_discrete(limits = names(n)) #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique sequences — uniqueSeqs","title":"Unique sequences — uniqueSeqs","text":"Aggregates productive sequences within list data frames duplicate_count.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique sequences — uniqueSeqs","text":"","code":"uniqueSeqs(productive_table = productive_table, unique_type = \"junction_aa\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique sequences — uniqueSeqs","text":"productive_table tibble productive amino acid sequences imported using function LymphoSeq2 function productiveSeq() aggregate parameter set \"junction_aa\". unique_type Use \"junction_aa\" (default) aggregate amino acid sequences. Use \"junction\" aggregate nucleotide sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique sequences — uniqueSeqs","text":"data frame unique amino acid sequences list data frames aggregated \"duplicate_count\"","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique sequences — uniqueSeqs","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") study_table <- LymphoSeq2::readImmunoSeq(path = file_path, threads = 1) study_table <- LymphoSeq2::topSeqs(study_table, top = 100) amino_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\") unique_seqs <- LymphoSeq2::uniqueSeqs(productive_table = amino_table, unique_type = \"junction_aa\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/writeFasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write FASTA file — writeFasta","title":"Write FASTA file — writeFasta","text":"Write FASTA file","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/writeFasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write FASTA file — writeFasta","text":"","code":"writeFasta(study_table, type)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/writeFasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write FASTA file — writeFasta","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq(). type character vector indicating whether \"junction_aa\" \"junction\" sequences exported.  \"junction_aa\" specified, run productiveSeq() first.","code":""}]
