[{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing data","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"function readImmunoSeq imports AIRR-seq receptor files Adaptive ImmunoSEQ assay well well BGI-IRSeq assay. sequences can (.tsv) files processed using one three following platforms: Adaptive Biotechnologies ImmunoSEQ analyzer, BGI IR-SEQ iMonitor platform, MiXCR pipeline AIRR-seq data analysis. function ability identify file type based headers provided (.tsv) file, accordingly data transformed format compatible AIRR-Community guidelines (https://github.com/airr-community/airr-standards). explore features LymphoSeq2, package includes 2 example data sets. first data set T cell receptor beta (TCRB) sequencing 10 blood samples acquired serially single patient underwent bone marrow transplant (Kanakry, C.G., et al. JCI Insight 2016;1(5):pii: e86252). second, data set B cell receptor immunoglobulin heavy (IGH) chain sequencing Burkitt lymphoma tumor biopsies acquired 10 different individuals (Lombardo, K.., et al. Blood Advances 2017 1:535-544). improve performance, data sets contain top 1,000 frequent sequences. complete data sets publicly available Adapatives’ immuneACCESS portal. shown example , can specify path example data sets using command readImmunoSeq can take input, single file name, list files path directory containing AIRR-seq data. columns renamed follow AIRR-community guidelines based input file type. function returns tibble individual file names set repertoire_id. CDR3 nucleotide amino acid sequences denoted junction junction_aa fields respectively. counts CDR3 sequences observed, frequency individual repertoire denoted duplicate_count duplicate_frequency field respectively. Looking study_table see tibble 12 columns 9334 rows Since study table tibble, can use tidyverse syntax extract list sample names","code":"system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") #For the TCRB files #> [1] \"/home/runner/work/_temp/Library/LymphoSeq2/extdata/TCRB_sequencing\" system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") #For the IGH files. #> [1] \"/home/runner/work/_temp/Library/LymphoSeq2/extdata/IGH_sequencing\" study_files <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  study_table <- LymphoSeq2::readImmunoSeq(study_files) study_table #> # A tibble: 9,334 × 145 #>    sequen…¹ seque…² seque…³ rev_c…⁴ produ…⁵ vj_in…⁶ stop_…⁷ compl…⁸ locus v_call #>    <chr>    <chr>   <chr>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <chr> <chr>  #>  1 TRB_CD4… CCTCTC… CASSIH… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV1… #>  2 TRB_CD4… ATTTCC… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    TRBV6… #>  3 TRB_CD4… ATCCTG… CAWSAQ… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV3… #>  4 TRB_CD4… GAGTCA… CASSES… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #>  5 TRB_CD4… GCCCTC… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  6 TRB_CD4… ATTCCC… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  7 TRB_CD4… GTGACA… CASSPR… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #>  8 TRB_CD4… ACCTTG… CASSLD… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV5… #>  9 TRB_CD4… GTGACC… CSAKTS… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #> 10 TRB_CD4… ACCCTG… CASSQD… FALSE   TRUE    NA      TRUE    FALSE   NA    TRBV4… #> # … with 9,324 more rows, 135 more variables: d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, cdr1 <chr>, #> #   cdr1_aa <chr>, cdr2 <chr>, cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, #> #   fwr1 <chr>, fwr1_aa <chr>, fwr2 <chr>, fwr2_aa <chr>, fwr3 <chr>, … study_table %>%  dplyr::pull(repertoire_id) %>%  unique() #>  [1] \"TRB_CD4_949\"       \"TRB_CD8_949\"       \"TRB_CD8_CMV_369\"   #>  [4] \"TRB_Unsorted_0\"    \"TRB_Unsorted_1320\" \"TRB_Unsorted_1496\" #>  [7] \"TRB_Unsorted_32\"   \"TRB_Unsorted_369\"  \"TRB_Unsorted_83\"   #> [10] \"TRB_Unsorted_949\""},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"subsetting-data","dir":"Articles","previous_headings":"","what":"Subsetting Data","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"tibble structure TCR data allows easy subsampling data. select TCR sequences given samples dataset, filter function dplyr package can used. str_detect function stringr package can used conjunction filter find samples using pattern metadata file TCR sequencing samples can easily combined study_table reading metadata file tibble using dplyr::left_join function merge two tables. example , metadata file imported example TCRB data set contains information number days post bone marrow transplant sample collected cellular phenotype blood sample sorted prior sequencing. Now metadata information can used subset data. instance select “Unsorted” samples collected 300 days bone marrow transplant, use following code","code":"TRB_Unsorted_0 <- study_table %>%    dplyr::filter(repertoire_id == \"TRB_Unsorted_0\") TRB_Unsorted_0 #> # A tibble: 1,000 × 145 #>    sequen…¹ seque…² seque…³ rev_c…⁴ produ…⁵ vj_in…⁶ stop_…⁷ compl…⁸ locus v_call #>    <chr>    <chr>   <chr>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <chr> <chr>  #>  1 TRB_Uns… TCAATT… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  2 TRB_Uns… CTGATT… CASSPV… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  3 TRB_Uns… ATCAAT… CASSQE… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  4 TRB_Uns… TGCCAT… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  5 TRB_Uns… CACACC… CASSQE… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV4… #>  6 TRB_Uns… GCCAGC… CASSLE… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  7 TRB_Uns… CCCCTG… CASSPG… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  8 TRB_Uns… AGTGCC… CSARSP… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  9 TRB_Uns… GGAGCT… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #> 10 TRB_Uns… CTGTAG… CASSEK… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #> # … with 990 more rows, 135 more variables: d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, cdr1 <chr>, #> #   cdr1_aa <chr>, cdr2 <chr>, cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, #> #   fwr1 <chr>, fwr1_aa <chr>, fwr2 <chr>, fwr2_aa <chr>, fwr3 <chr>, … CMV <- study_table %>%         dplyr::filter(str_detect(repertoire_id, \"CMV\")) CMV #> # A tibble: 414 × 145 #>    sequen…¹ seque…² seque…³ rev_c…⁴ produ…⁵ vj_in…⁶ stop_…⁷ compl…⁸ locus v_call #>    <chr>    <chr>   <chr>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <chr> <chr>  #>  1 TRB_CD8… CAGCGC… CASSPP… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV7… #>  2 TRB_CD8… CAGCCC… CASSPA… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  3 TRB_CD8… CAGCCT… CASSQD… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #>  4 TRB_CD8… TCGGCC… CASSQD… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV4… #>  5 TRB_CD8… ATCCTG… CASSLQ… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  6 TRB_CD8… GAGGAT… NA      FALSE   TRUE    NA      TRUE    TRUE    NA    TRBV1… #>  7 TRB_CD8… ACCCTG… CASSQD… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV4… #>  8 TRB_CD8… CTCCTC… CAISDT… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV1… #>  9 TRB_CD8… GAGTCC… CASSLA… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV2… #> 10 TRB_CD8… GAGTTG… CASRDG… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV6… #> # … with 404 more rows, 135 more variables: d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, cdr1 <chr>, #> #   cdr1_aa <chr>, cdr2 <chr>, cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, #> #   fwr1 <chr>, fwr1_aa <chr>, fwr2 <chr>, fwr2_aa <chr>, fwr3 <chr>, … TCRB_metadata <- readr::read_csv(system.file(\"extdata\", \"TCRB_metadata.csv\", package = \"LymphoSeq2\"), show_col_types = FALSE) TCRB_metadata #> # A tibble: 10 × 3 #>    samples             day phenotype #>    <chr>             <dbl> <chr>     #>  1 TRB_Unsorted_0        0 Unsorted  #>  2 TRB_Unsorted_32      32 Unsorted  #>  3 TRB_Unsorted_83      82 Unsorted  #>  4 TRB_CD8_CMV_369     369 CD8+CMV+  #>  5 TRB_Unsorted_369    369 Unsorted  #>  6 TRB_CD4_949         949 CD4+      #>  7 TRB_CD8_949         949 CD8+      #>  8 TRB_Unsorted_949    949 Unsorted  #>  9 TRB_Unsorted_1320  1320 Unsorted  #> 10 TRB_Unsorted_1496  1496 Unsorted study_table <- dplyr::left_join(study_table, TCRB_metadata, by = c(\"repertoire_id\" = \"samples\")) study_table #> # A tibble: 9,334 × 147 #>    sequen…¹ seque…² seque…³ rev_c…⁴ produ…⁵ vj_in…⁶ stop_…⁷ compl…⁸ locus v_call #>    <chr>    <chr>   <chr>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <chr> <chr>  #>  1 TRB_CD4… CCTCTC… CASSIH… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV1… #>  2 TRB_CD4… ATTTCC… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    TRBV6… #>  3 TRB_CD4… ATCCTG… CAWSAQ… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV3… #>  4 TRB_CD4… GAGTCA… CASSES… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #>  5 TRB_CD4… GCCCTC… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  6 TRB_CD4… ATTCCC… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  7 TRB_CD4… GTGACA… CASSPR… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #>  8 TRB_CD4… ACCTTG… CASSLD… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV5… #>  9 TRB_CD4… GTGACC… CSAKTS… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #> 10 TRB_CD4… ACCCTG… CASSQD… FALSE   TRUE    NA      TRUE    FALSE   NA    TRBV4… #> # … with 9,324 more rows, 137 more variables: d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, cdr1 <chr>, #> #   cdr1_aa <chr>, cdr2 <chr>, cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, #> #   fwr1 <chr>, fwr1_aa <chr>, fwr2 <chr>, fwr2_aa <chr>, fwr3 <chr>, … unsorted_300 <- study_table %>%                  dplyr::filter(day > 300 & phenotype == \"Unsorted\") unsorted_300 #> # A tibble: 4,000 × 147 #>    sequen…¹ seque…² seque…³ rev_c…⁴ produ…⁵ vj_in…⁶ stop_…⁷ compl…⁸ locus v_call #>    <chr>    <chr>   <chr>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <chr> <chr>  #>  1 TRB_Uns… CACCCT… NA      FALSE   TRUE    NA      TRUE    TRUE    NA    TRBV4… #>  2 TRB_Uns… AGTGCC… CSALLG… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  3 TRB_Uns… CAGCGC… CASSFR… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV7… #>  4 TRB_Uns… TCGGCT… CASSKG… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  5 TRB_Uns… GCTGCT… CASSAP… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV6… #>  6 TRB_Uns… ACCAGT… CSARDL… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  7 TRB_Uns… ATCCGG… CASSEV… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  8 TRB_Uns… AAGATC… CASSSP… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  9 TRB_Uns… ATCCAG… CASSLD… FALSE   FALSE   NA      FALSE   FALSE   NA    TRBV7… #> 10 TRB_Uns… AGCCCT… CSVEDP… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #> # … with 3,990 more rows, 137 more variables: d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, cdr1 <chr>, #> #   cdr1_aa <chr>, cdr2 <chr>, cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, #> #   fwr1 <chr>, fwr1_aa <chr>, fwr2 <chr>, fwr2_aa <chr>, fwr3 <chr>, …"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"extracting-productive-sequences","dir":"Articles","previous_headings":"","what":"Extracting productive sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"AIRR-seq samples derived genomic DNA rather complimentary DNA made RNA, find productive unproductive sequences. Productive sequences defined -frame sequences without early stop codons. filter productive sequences, can use productiveSeq remove unproductive sequences recompute duplicate_frequency reflect productive amino acid nucleotide sequence frequencies. interested just complementarity determining region 3 (CDR3) amino acid sequences, set aggregate junction_aa duplicate_count duplicate amino acid sequences summed. resulting tibble junction_aa, duplicate_count, duplicate_frequency, reading_frame, frequent VDJ gene combinations duplicated amino acid sequences corresponding gene family names. gene names kept consistency tibble structure, since single amino acid sequence can generated different VDJ combinations, inadvisable use values downstream analysis Alternatively can aggregate junction group sequences CDR3 nucleotide sequences. option produce tibble similar output readImmunoSeq. Many functions within LymphoSeq2 use results productiveSeq function. Please sure check function documentation. parameter prevalence set TRUE, new column added data frames giving prevalence TCR beta CDR3 amino acid sequence 55 healthy donor peripheral blood samples. Values range 0 100 percent 100 percent means sequence appeared blood 55 individuals. Notice example amino acid sequences given first fourth row study_table table sample “TRB_Unsorted_949”. nucleotide sequence frame produce productively transcribed amino acid sequence. asterisk (*) appears amino acid sequences, indicate early stop codon. productiveSeq run, unproductive sequences removed duplicate_frequency recalculated sequence. two identical amino acid sequences differed nucleotide sequence, combined counts added together.","code":"aa_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction_aa\", prevalence = FALSE) aa_table #> # A tibble: 7,533 × 11 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD4… CAIKPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       3 #>  2 TRB_CD4… CAIRAG… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       3 #>  3 TRB_CD4… CAISDE… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #>  4 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  5 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  6 TRB_CD4… CAISDQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  7 TRB_CD4… CAISER… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  8 TRB_CD4… CAISEW… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       4 #>  9 TRB_CD4… CAISGQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #> 10 TRB_CD4… CAISLN… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #> # … with 7,523 more rows, 1 more variable: duplicate_frequency <dbl>, and #> #   abbreviated variable names ¹​repertoire_id, ²​junction_aa, ³​v_family, #> #   ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count nuc_table <- LymphoSeq2::productiveSeq(study_table = study_table, aggregate = \"junction\",                            prevalence = FALSE) nuc_table #> # A tibble: 7,679 × 12 #>    repert…¹ junct…² junct…³ v_call d_call j_call v_fam…⁴ d_fam…⁵ j_fam…⁶ readi…⁷ #>    <chr>    <chr>   <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>   #>  1 TRB_CD4… AACATG… CASSLG… TRBV1… TRBJ1… TRBJ1… TRBV13  TRBJ1   TRBJ1   in-fra… #>  2 TRB_CD4… AACCCG… CASSIN… TRBV1… TRBJ2… TRBJ2… TRBV19  TRBJ2   TRBJ2   in-fra… #>  3 TRB_CD4… AACCCG… CASSIP… TRBV1… TRBJ2… TRBJ2… TRBV19  TRBJ2   TRBJ2   in-fra… #>  4 TRB_CD4… AACCTG… CASSVE… TRBV9… TRBJ1… TRBJ1… TRBV9   TRBJ1   TRBJ1   in-fra… #>  5 TRB_CD4… AACCTG… CASSVE… TRBV9… TRBJ1… TRBJ1… TRBV9   TRBJ1   TRBJ1   in-fra… #>  6 TRB_CD4… AACCTG… CASSVM… TRBV9… TRBJ1… TRBJ1… TRBV9   TRBJ1   TRBJ1   in-fra… #>  7 TRB_CD4… AACGCC… CASSPG… TRBV5… TRBJ2… TRBJ2… TRBV5   TRBJ2   TRBJ2   in-fra… #>  8 TRB_CD4… AACGCC… CASSDS… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra… #>  9 TRB_CD4… AACGCC… CASSFL… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra… #> 10 TRB_CD4… AACGCC… CASSLA… TRBV5… TRBJ2… TRBJ2… TRBV5   TRBJ2   TRBJ2   in-fra… #> # … with 7,669 more rows, 2 more variables: duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, and abbreviated variable names ¹​repertoire_id, #> #   ²​junction, ³​junction_aa, ⁴​v_family, ⁵​d_family, ⁶​j_family, ⁷​reading_frame study_table %>%  dplyr::filter(repertoire_id == \"TRB_Unsorted_0\")  #> # A tibble: 1,000 × 147 #>    sequen…¹ seque…² seque…³ rev_c…⁴ produ…⁵ vj_in…⁶ stop_…⁷ compl…⁸ locus v_call #>    <chr>    <chr>   <chr>   <lgl>   <lgl>   <lgl>   <lgl>   <lgl>   <chr> <chr>  #>  1 TRB_Uns… TCAATT… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  2 TRB_Uns… CTGATT… CASSPV… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  3 TRB_Uns… ATCAAT… CASSQE… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  4 TRB_Uns… TGCCAT… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #>  5 TRB_Uns… CACACC… CASSQE… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV4… #>  6 TRB_Uns… GCCAGC… CASSLE… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  7 TRB_Uns… CCCCTG… CASSPG… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV2… #>  8 TRB_Uns… AGTGCC… CSARSP… FALSE   FALSE   NA      FALSE   FALSE   NA    NA     #>  9 TRB_Uns… GGAGCT… NA      FALSE   TRUE    NA      TRUE    FALSE   NA    NA     #> 10 TRB_Uns… CTGTAG… CASSEK… FALSE   FALSE   NA      FALSE   TRUE    NA    TRBV1… #> # … with 990 more rows, 137 more variables: d_call <chr>, d2_call <chr>, #> #   j_call <chr>, c_call <chr>, sequence_alignment <chr>, #> #   sequence_alignment_aa <chr>, germline_alignment <chr>, #> #   germline_alignment_aa <chr>, junction <chr>, junction_aa <chr>, np1 <chr>, #> #   np1_aa <chr>, np2 <chr>, np2_aa <chr>, np3 <chr>, np3_aa <chr>, cdr1 <chr>, #> #   cdr1_aa <chr>, cdr2 <chr>, cdr2_aa <chr>, cdr3 <chr>, cdr3_aa <chr>, #> #   fwr1 <chr>, fwr1_aa <chr>, fwr2 <chr>, fwr2_aa <chr>, fwr3 <chr>, … aa_table %>%  dplyr::filter(repertoire_id == \"TRB_Unsorted_0\") #> # A tibble: 833 × 11 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_Uns… CAAGDT… TRBV6… TRBJ2… TRBJ2… TRBV6   TRBJ2   TRBJ2   in-fra…       2 #>  2 TRB_Uns… CAARGG… TRBV6… TRBJ2… TRBJ2… TRBV6   TRBJ2   TRBJ2   in-fra…       4 #>  3 TRB_Uns… CAGGRG… TRBV2… TRBJ1… TRBJ1… TRBV28  TRBJ1   TRBJ1   in-fra…       2 #>  4 TRB_Uns… CAGQGV… TRBV2… TRBJ1… TRBJ1… TRBV2   TRBJ1   TRBJ1   in-fra…       1 #>  5 TRB_Uns… CAGRVG… TRBV2… TRBJ1… TRBJ1… TRBV2   TRBJ1   TRBJ1   in-fra…       1 #>  6 TRB_Uns… CAIAQP… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       3 #>  7 TRB_Uns… CAIGAA… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #>  8 TRB_Uns… CAIGYN… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  9 TRB_Uns… CAINPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #> 10 TRB_Uns… CAIRDG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #> # … with 823 more rows, 1 more variable: duplicate_frequency <dbl>, and #> #   abbreviated variable names ¹​repertoire_id, ²​junction_aa, ³​v_family, #> #   ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"create-a-table-of-summary-statistics","dir":"Articles","previous_headings":"","what":"Create a table of summary statistics","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"create table summarizing total number sequences, number unique productive sequences, number genomes, clonality, Gini coefficient, frequency (%) top productive sequence, Simpson index, Inverse Simpson index, Hill diversity index, Chao1 index Kemp index imported file, use function clonality. clonality score derived Shannon entropy, calculated frequencies productive sequences divided logarithm total number unique productive sequences. normalized entropy value inverted (1 - normalized entropy) produce clonality metric. Gini coefficient, Chao1 estimate, Kemp estimate, Hill estimate, Simpson index Inverse Simpson index alternative metric measure sequence diversity within immune repertoire. Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve. Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads. line passing origin slope 1 reflects equal frequencies clones. Gini coefficient ratio area line equality observed Lorenz curve total area line equality.","code":"LymphoSeq2::clonality(study_table = study_table) #> # A tibble: 10 × 8 #>    repertoire_id     total_seq…¹ uniqu…² total…³ clona…⁴ gini_…⁵ top_p…⁶ conve…⁷ #>    <chr>                   <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 TRB_CD4_949              1000     845   25769   0.443   0.867   30.1     1    #>  2 TRB_CD8_949              1000     794   26239   0.431   0.903   19.3     1.01 #>  3 TRB_CD8_CMV_369           414     281    1794   0.332   0.761   16.5     1.12 #>  4 TRB_Unsorted_0           1000     838   18161   0.281   0.818    5.77    1    #>  5 TRB_Unsorted_1320        1000     838  178190   0.422   0.902   14.6     1    #>  6 TRB_Unsorted_1496        1000     832   33669   0.389   0.881   14.2     1    #>  7 TRB_Unsorted_32           920     767   31078   0.134   0.601    4.87    1.01 #>  8 TRB_Unsorted_369         1000     830  339413   0.426   0.845   29.7     1    #>  9 TRB_Unsorted_83          1000     823  236732   0.338   0.777   23.6     1    #> 10 TRB_Unsorted_949         1000     831    6549   0.306   0.765   13.8     1    #> # … with abbreviated variable names ¹​total_sequences, #> #   ²​unique_productive_sequences, ³​total_count, ⁴​clonality, ⁵​gini_coefficient, #> #   ⁶​top_productive_sequence, ⁷​convergence"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"calculate-clonal-relatedness","dir":"Articles","previous_headings":"","what":"Calculate clonal relatedness","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"One drawbacks clonality metric take account sequence similarity. particularly important studying affinity maturation B cell malignancies(Lombardo, K.., et al. Blood Advances 2017 1:535-544). Clonal relatedness useful metric takes account sequence similarity without regard clonal frequency. defined proportion nucleotide sequences related defined edit distance threshold. value ranges 0 1 0 indicates sequences related 1 indicates sequences related. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence . example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid nucleotide.","code":"IGH_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\") IGH_table <- LymphoSeq2::readImmunoSeq(path = IGH_path) LymphoSeq2::clonalRelatedness(study_table = IGH_table, edit_distance = 10) #> # A tibble: 10 × 2 #>    repertoire_id     relatedness #>    <chr>                   <dbl> #>  1 IGH_MVQ108911A_BL     0.631   #>  2 IGH_MVQ194745A_BL     0.847   #>  3 IGH_MVQ81231A_BL      0.631   #>  4 IGH_MVQ89037A_BL      0.290   #>  5 IGH_MVQ90143A_BL      0.00610 #>  6 IGH_MVQ92552A_BL      0.273   #>  7 IGH_MVQ93505A_BL      0.408   #>  8 IGH_MVQ93631A_BL      0.757   #>  9 IGH_MVQ94865A_BL      0.007   #> 10 IGH_MVQ95413A_BL      0.00364"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"draw-a-phylogenetic-tree","dir":"Articles","previous_headings":"","what":"Draw a phylogenetic tree","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"phylogenetic tree useful way visualize similarity sequences. phyloTree function create phylogenetic tree single sample using neighbor joining tree estimation amino acid nucleotide CDR3 sequences. leaf tree represents sequence color coded V, D, J gene usage. number next leaf refers sequence count. triangle shaped leaf indicates frequent sequence. distance leaves horizontal axis corresponds sequence similarity (.e. apart leaves horizontally, less similar sequences one another).","code":"nuc_IGH_table <- LymphoSeq2::productiveSeq(study_table = IGH_table, aggregate = \"junction\") LymphoSeq2::phyloTree(study_table = nuc_IGH_table,                        repertoire_ids = \"IGH_MVQ92552A_BL\",                        type = \"junction\",                        layout = \"rectangular\") Warning:  [1m [22mThe `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as of ggplot2 3.3.4.  [36mℹ [39m The deprecated feature was likely used in the  [34mLymphoSeq2 [39m package.   Please report the issue at    [3m [34m<https://github.com/shashidhar22/LymphoSeq2/issues> [39m [23m."},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"multiple-sequence-alignment","dir":"Articles","previous_headings":"","what":"Multiple sequence alignment","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"LymphoSeq2, can perform multiple sequence alignment using one three methods provided Bioconductor msa package (ClustalW, ClustalOmega, Muscle), change functionality however , now function returns msa S4 object. One may perform alignment amino acid nucleotide sequences single sample. Alternatively, one may search given sequence within list samples using edit distance threshold. use default substitution matrix","code":"alignment <- LymphoSeq2::alignSeq(study_table = nuc_IGH_table,                                    repertoire_ids = \"IGH_MVQ92552A_BL\",                                    type = \"junction_aa\",                                    method = \"ClustalW\") LymphoSeq2::plotAlignment(alignment) #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one."},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"searching-for-sequences","dir":"Articles","previous_headings":"","what":"Searching for sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"search one amino acid nucleotide CDR3 sequences list data frames, use function searchSeq. function allows sequence search edit distance threshold. example, edit distance 0 means sequences identical edit distance 1 indicates sequences differ single amino acid nucleotide. Match options include “global” matching performs end--end matching sequences. “partial” matching allows searching sub strings CDR3 sequences.","code":"LymphoSeq2::searchSeq(study_table = aa_table,                        sequence = \"CASSPVSNEQFF\",                        seq_type = \"junction_aa\",                        match = \"global\",                        edit_distance = 0) #> # A tibble: 2 × 13 #>   reperto…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>   <chr>     <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #> 1 TRB_CD8_… CASSPV… TRBV2… TRBJ2… TRBJ2… TRBV28  TRBJ2   TRBJ2   in-fra…       2 #> 2 TRB_Unso… CASSPV… TRBV2… TRBJ2… TRBJ2… TRBV28  TRBJ2   TRBJ2   in-fra…     822 #> # … with 3 more variables: duplicate_frequency <dbl>, edit_distance <dbl>, #> #   searchSequence <chr>, and abbreviated variable names ¹​repertoire_id, #> #   ²​junction_aa, ³​v_family, ⁴​d_family, ⁵​j_family, ⁶​reading_frame, #> #   ⁷​duplicate_count"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"searching-for-published-sequences","dir":"Articles","previous_headings":"","what":"Searching for published sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"search entire list data frames published amino acid CDR3 TCRB sequence known antigen specificity, use function searchPublished. found sequence, table provides listing antigen, epitope, HLA type, PubMed ID (PMID), prevalence percentage sequence among 55 healthy donor blood samples. can even search productive CDR3 amino acid sequences repertoires found public databases VdjDB, IEDB, McPas-TCR using function searchDB. specifying dbname=\"\" searchDB look CDR3 amino acid sequence dataset three public databases. can also pass vector three databases (“VdjDB”, “IEDB”, “McPAS-TCR”) search just databases.","code":"LymphoSeq2::searchPublished(study_table = aa_table) %>%  dplyr::filter(!is.na(PMID)) #> # A tibble: 106 × 16 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD4… CASSLY… TRBV2… TRBJ2… TRBJ2… TRBV28  TRBJ2   TRBJ2   in-fra…       2 #>  2 TRB_CD4… CASSQD… TRBV4… TRBJ2… TRBJ2… TRBV4   TRBJ2   TRBJ2   in-fra…      13 #>  3 TRB_CD4… CASSYL… TRBV6… TRBJ2… TRBJ2… TRBV6   TRBJ2   TRBJ2   in-fra…       5 #>  4 TRB_CD8… CASSGQ… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra…       3 #>  5 TRB_CD8… CASSIG… TRBV1… TRBJ1… TRBJ1… TRBV19  TRBJ1   TRBJ1   in-fra…       2 #>  6 TRB_CD8… CASSIG… TRBV1… TRBJ2… TRBJ2… TRBV19  TRBJ2   TRBJ2   in-fra…       2 #>  7 TRB_CD8… CASSIG… TRBV1… TRBJ1… TRBJ1… TRBV19  TRBJ1   TRBJ1   in-fra…       2 #>  8 TRB_CD8… CASSIG… TRBV1… TRBJ1… TRBJ1… TRBV19  TRBJ1   TRBJ1   in-fra…       2 #>  9 TRB_CD8… CASSIR… TRBV1… TRBJ2… TRBJ2… TRBV19  TRBJ2   TRBJ2   in-fra…       7 #> 10 TRB_CD8… CASSLE… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra…      14 #> # … with 96 more rows, 6 more variables: duplicate_frequency <dbl>, PMID <fct>, #> #   HLA <fct>, antigen <fct>, epitope <fct>, prevalence <dbl>, and abbreviated #> #   variable names ¹​repertoire_id, ²​junction_aa, ³​v_family, ⁴​d_family, #> #   ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count LymphoSeq2::searchDB(study_table = aa_table, dbname = \"all\", chain = \"trb\") #> # A tibble: 7,842 × 26 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD4… CAIKPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       3 #>  2 TRB_CD4… CAIRAG… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       3 #>  3 TRB_CD4… CAISDE… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #>  4 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  5 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  6 TRB_CD4… CAISDQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  7 TRB_CD4… CAISER… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  8 TRB_CD4… CAISEW… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       4 #>  9 TRB_CD4… CAISGQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #> 10 TRB_CD4… CAISLN… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #> # … with 7,832 more rows, 16 more variables: duplicate_frequency <dbl>, #> #   tra_cdr3_aa <chr>, gene <chr>, epitope <chr>, pathology <chr>, #> #   antigen <chr>, tra_v_call <chr>, tra_j_call <chr>, mhc_allele <chr>, #> #   reference <chr>, score <dbl>, cell_type <chr>, source <chr>, #> #   trb_v_call <chr>, trb_j_call <chr>, Species <chr>, and abbreviated variable #> #   names ¹​repertoire_id, ²​junction_aa, ³​v_family, ⁴​d_family, ⁵​j_family, #> #   ⁶​reading_frame, ⁷​duplicate_count"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"visualizing-repertoire-diversity","dir":"Articles","previous_headings":"","what":"Visualizing repertoire diversity","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"Antigen receptor repertoire diversity can characterized number clonality Gini coefficient calculated clonality function. Alternatively, can visualize repertoire diversity plotting Lorenz curve sample defined . plot, diverse samples appear near dotted diagonal line (line equality) whereas clonal samples appear bowed shape.  Alternatively, can get feel repertoire diversity plotting cumulative frequency selected number top frequent clones using function topSeqsPlot. case, top sequences represented different color less frequent clones assigned single color (violet).  functions built using ggplot2 package. can reformat plot using ggplot2 functions. Please refer lorenzCurve topSeqsPlot manual specific examples.","code":"samples <- aa_table %>%             dplyr::pull(repertoire_id) %>% unique() LymphoSeq2::lorenzCurve(repertoire_ids = samples, study_table = aa_table) LymphoSeq2::topSeqsPlot(study_table = aa_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"comparing-samples","dir":"Articles","previous_headings":"","what":"Comparing samples","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"compare T B cell repertoires samples pairwise fashion, use bhattacharyyaMatrix similarityMatrix functions. Bhattacharyya coefficient similarity score measures amount overlap two samples. value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies. Bhattacharyya coefficient differs similarity score involves weighting shared sequence two distributions arithmetic mean frequency sequence, calculating similarity scores involves weighting shared sequence two distributions geometric mean frequency sequence two distributions.  view sequences shared two samples, use function commonSeqs. function requires productive amino acid list specified. visualize number overlapping sequences two three samples form Venn diagram, use function commonSeqVenn   compare frequency sequences two samples scatter plot, use function commonSeqsPlot.  3 samples compare, use commonSeqBar function. can chose color single sample color.sample argument desired intersection color.intersection argument.","code":"bhattacharyya_matrix <- LymphoSeq2::scoringMatrix(aa_table, mode = \"Bhattacharyya\") LymphoSeq2::pairwisePlot(bhattacharyya_matrix) common <- LymphoSeq2::commonSeqs(study_table = aa_table,                                   repertoire_ids =  c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\")) common #> # A tibble: 4 × 3 #>   junction_aa     TRB_Unsorted_0 TRB_Unsorted_32 #>   <chr>                    <dbl>           <dbl> #> 1 CAISEGNYGYTF          0.000351        0.00187  #> 2 CASSFGIQETQYF         0.000140        0.000957 #> 3 CASSQDRTGQYGYTF       0.00471         0.00806  #> 4 CAWTGGTTEAFF          0.00105         0.00152 LymphoSeq2::commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\"),                             amino_table = aa_table) LymphoSeq2::commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\", \"TRB_Unsorted_83\"),                             amino_table = aa_table) LymphoSeq2::commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",                             amino_table = aa_table, show = \"common\") LymphoSeq2::commonSeqsBar(amino_table = aa_table,                            repertoire_ids = c(\"TRB_CD4_949\", \"TRB_CD8_949\",                                               \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"),                            color_sample = \"TRB_CD8_949\",                           labels = \"no\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"differential-abundance","dir":"Articles","previous_headings":"","what":"Differential abundance","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"comparing sample two different time points, useful identify sequences significantly less abundant one versus time point (DeWitt, W.S., et al. Journal Virology 2015 89(8):4517-4526). differentialAbundance function uses Fisher exact test calculate differential abundance sequence two time points reports log2 transformed fold change, P value adjusted P value.","code":"LymphoSeq2::differentialAbundance(study_table = aa_table,                                    repertoire_ids =c(\"TRB_Unsorted_949\",                                                      \"TRB_Unsorted_1320\"),                                    type = \"junction_aa\", q = 0.01) #> # A tibble: 1,332 × 6 #>    junction_aa       TRB_Unsorted_949 TRB_Unsorted_1320        p       q    l2fc #>    <chr>                        <dbl>             <dbl>    <dbl>   <dbl>   <dbl> #>  1 CACALGDGYTF                      0                 2  1   e+0 1   e+0 -Inf    #>  2 CACQRTGSSYEQYF                   0                 3  1   e+0 1   e+0 -Inf    #>  3 CAIGLSNQPQHF                     2                67  1   e+0 1   e+0   -5.07 #>  4 CAIKMETPNGEQYF                  29               326  2.66e-5 2.66e-5   -3.49 #>  5 CAIRGTEDNNSPLHF                  0                16  1   e+0 1   e+0 -Inf    #>  6 CAISDSSYEQYF                     1                23  5.71e-1 5.71e-1   -4.52 #>  7 CAISDTGELFF                      8                83  1.39e-2 1.39e-2   -3.38 #>  8 CAISEFGLMAREYGYTF                0                 1  1   e+0 1   e+0 -Inf    #>  9 CAISEGQGVKPQHF                   0               167  4.92e-3 4.92e-3 -Inf    #> 10 CAISESGVLNEKLFF                 13               150  4.69e-3 4.69e-3   -3.53 #> # … with 1,322 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"finding-recurring-sequences","dir":"Articles","previous_headings":"","what":"Finding recurring sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"create tibble unique, productive amino acid sequences rows sample names headers use seqMatrix function. value data frame represents frequency sequence appears sample. can specify list sequences unique sequences list using output function uniqueSeqs. uniqueSeqs function creates tibble unique, productive sequences reports total count samples. just top clones frequency greater specified amount interest , use topFreq function. creates tibble top productive amino acid sequences minimum specified frequency reports minimum, maximum, mean frequency sequence appears list samples. TCRB sequences, prevalence percentage published antigen specificity sequence also provided. One useful thing merge output seqMatrix topFreq.","code":"unique_seqs <- LymphoSeq2::uniqueSeqs(productive_table = aa_table) unique_seqs #> # A tibble: 5,615 × 2 #>    junction_aa            duplicate_count #>    <chr>                            <dbl> #>  1 CASSQDWERLGEQFF                  99480 #>  2 CASSLQGREKLFF                    90567 #>  3 CASSQDLMTVDSLFAGANVLTF           68682 #>  4 CASSPAGAYYNEQFF                  30454 #>  5 CASSPPTGERDTQYF                  24703 #>  6 CASSLAGDSQETQYF                  22147 #>  7 CASSESAGSTGELFF                  17438 #>  8 CASRDGQGSGNTIYF                  11533 #>  9 CASSPSRNTEAFF                     8759 #> 10 CASSQDRTGQYGYTF                   8118 #> # … with 5,605 more rows sequence_matrix <- LymphoSeq2::seqMatrix(amino_table = aa_table, sequences = unique_seqs$junction_aa) sequence_matrix #> # A tibble: 5,615 × 11 #>    junction_aa   TRB_C…¹ TRB_C…² TRB_C…³ TRB_U…⁴ TRB_U…⁵ TRB_U…⁶ TRB_U…⁷ TRB_U…⁸ #>    <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 CAIKPGQGASNS… 1.80e-4       0       0       0       0       0       0       0 #>  2 CAIRAGTSTDTQ… 1.80e-4       0       0       0       0       0       0       0 #>  3 CAISDETPGELFF 1.20e-4       0       0       0       0       0       0       0 #>  4 CAISDLGRGDTE… 1.20e-4       0       0       0       0       0       0       0 #>  5 CAISDLKEQPQHF 1.20e-4       0       0       0       0       0       0       0 #>  6 CAISDQGGDQPQ… 1.20e-4       0       0       0       0       0       0       0 #>  7 CAISEREQGAFF  1.20e-4       0       0       0       0       0       0       0 #>  8 CAISEWSGSSYN… 2.40e-4       0       0       0       0       0       0       0 #>  9 CAISGQGSTEAFF 1.20e-4       0       0       0       0       0       0       0 #> 10 CAISLNSGGAYE… 1.20e-4       0       0       0       0       0       0       0 #> # … with 5,605 more rows, 2 more variables: TRB_Unsorted_83 <dbl>, #> #   TRB_Unsorted_949 <dbl>, and abbreviated variable names ¹​TRB_CD4_949, #> #   ²​TRB_CD8_949, ³​TRB_CD8_CMV_369, ⁴​TRB_Unsorted_0, ⁵​TRB_Unsorted_1320, #> #   ⁶​TRB_Unsorted_1496, ⁷​TRB_Unsorted_32, ⁸​TRB_Unsorted_369 top_freq <- LymphoSeq2::topFreq(productive_table = aa_table, frequency = 0.001) top_freq #> # A tibble: 610 × 7 #>    junction_aa            minFrequency maxFreq…¹ meanF…² numbe…³ preva…⁴ antigen #>    <chr>                         <dbl>     <dbl>   <dbl>   <int>   <dbl> <fct>   #>  1 CASSQDRTGQYGYTF             0.00432    0.0186 0.00833       9       0 NA      #>  2 CASSLQGREKLFF               0.0486     0.236  0.0873        8       0 NA      #>  3 CASSQDLMTVDSLFAGANVLTF      0.0155     0.122  0.0739        8       0 NA      #>  4 CASSREGDQPQHF               0.00134    0.0285 0.00577       8       0 NA      #>  5 CASRDGQGSGNTIYF             0.00256    0.0258 0.0125        7       0 NA      #>  6 CASSQDLGQAFSPLHF            0.00164    0.0208 0.00937       7       0 NA      #>  7 CASSPFDRGPDTEAFF            0.00450    0.0134 0.00923       7       0 NA      #>  8 CASSQDSSDTEAFF              0.00130    0.0359 0.00765       7       0 NA      #>  9 CAIKMETPNGEQYF              0.00224    0.0101 0.00577       7       0 NA      #> 10 CASSPGTGTYGYTF              0.00107    0.0127 0.00473       7       0 CMV     #> # … with 600 more rows, and abbreviated variable names ¹​maxFrequency, #> #   ²​meanFrequency, ³​numberSamples, ⁴​prevalence top_freq_matrix <- dplyr::full_join(top_freq, sequence_matrix) #> Joining, by = \"junction_aa\" top_freq_matrix #> # A tibble: 5,615 × 17 #>    junction_aa   minFr…¹ maxFr…² meanF…³ numbe…⁴ preva…⁵ antigen TRB_C…⁶ TRB_C…⁷ #>    <chr>           <dbl>   <dbl>   <dbl>   <int>   <dbl> <fct>     <dbl>   <dbl> #>  1 CASSQDRTGQYG… 0.00432  0.0186 0.00833       9       0 NA            0 0.00995 #>  2 CASSLQGREKLFF 0.0486   0.236  0.0873        8       0 NA            0 0.0873  #>  3 CASSQDLMTVDS… 0.0155   0.122  0.0739        8       0 NA            0 0.107   #>  4 CASSREGDQPQHF 0.00134  0.0285 0.00577       8       0 NA            0 0.00299 #>  5 CASRDGQGSGNT… 0.00256  0.0258 0.0125        7       0 NA            0 0.0135  #>  6 CASSQDLGQAFS… 0.00164  0.0208 0.00937       7       0 NA            0 0.00803 #>  7 CASSPFDRGPDT… 0.00450  0.0134 0.00923       7       0 NA            0 0.0132  #>  8 CASSQDSSDTEA… 0.00130  0.0359 0.00765       7       0 NA            0 0.00259 #>  9 CAIKMETPNGEQ… 0.00224  0.0101 0.00577       7       0 NA            0 0.00705 #> 10 CASSPGTGTYGY… 0.00107  0.0127 0.00473       7       0 CMV           0 0.00299 #> # … with 5,605 more rows, 8 more variables: TRB_CD8_CMV_369 <dbl>, #> #   TRB_Unsorted_0 <dbl>, TRB_Unsorted_1320 <dbl>, TRB_Unsorted_1496 <dbl>, #> #   TRB_Unsorted_32 <dbl>, TRB_Unsorted_369 <dbl>, TRB_Unsorted_83 <dbl>, #> #   TRB_Unsorted_949 <dbl>, and abbreviated variable names ¹​minFrequency, #> #   ²​maxFrequency, ³​meanFrequency, ⁴​numberSamples, ⁵​prevalence, ⁶​TRB_CD4_949, #> #   ⁷​TRB_CD8_949"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"tracking-sequences-across-samples","dir":"Articles","previous_headings":"","what":"Tracking sequences across samples","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"visually track frequency sequences across multiple samples, use function cloneTrack function takes output seqMatrix function. can specify character vector amino acid sequences using parameter track highlight sequences different color. Alternatively, can highlight sequences given sample using parameter map. mapping feature use, must specify productive amino acid list character vector labels title mapped samples.  can track particular sequences across samples providing optional list CDR3 amino acid sequences.  Alternatively can use function plotTrackSingular retrieve list alluvial diagrams tracking one single amino acid clone track table. Considering plot generated unique CDR3 sequence, recommend running feature clone track table derived top sequences repertoire described example .","code":"ctable <- LymphoSeq2::cloneTrack(study_table = aa_table,                                  sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\")) LymphoSeq2::plotTrack(ctable) ttable <- LymphoSeq2::topSeqs(aa_table, top = 10) ctable <- LymphoSeq2::cloneTrack(ttable) LymphoSeq2::plotTrack(ctable, alist = c(\"CASSESAGSTGELFF\", \"CASSLAGDSQETQYF\")) + ggplot2::theme(legend.position = \"bottom\") lalluvial <- ctable %>% LymphoSeq2::topSeqs(top = 1) %>%    LymphoSeq2::plotTrackSingular() lalluvial[[1]]"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"comparing-vdj-gene-usage","dir":"Articles","previous_headings":"","what":"Comparing V(D)J gene usage","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"compare V, D, J gene usage across samples, start creating data frame V, D, J gene counts frequencies using function geneFreq. can specify interested “VDJ”, “DJ”, “VJ”, “DJ”, “V”, “D”, “J” loci using locus parameter. Set family TRUE prefer family names instead gene names reported ImmunoSeq. create chord diagram showing VJ DJ gene associations one samples, combine output geneFreq function chordDiagramVDJ. function works well topSeqs function creates data frame selected number top productive sequences. example , chord diagram made showing association V J genes just single dominant clones sample. size ribbons connecting VJ genes correspond number samples recombination event. thicker ribbon, higher frequency recombination.  can also visualize results geneFreq heat map, word cloud, cumulative frequency bar plot support additional R packages shown .","code":"vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) vGenes #> # A tibble: 235 × 5 #>    repertoire_id gene_name duplicate_count gene_type gene_frequency #>    <chr>         <chr>               <dbl> <chr>              <dbl> #>  1 TRB_CD4_949   NA                   3675 v_family        0.220    #>  2 TRB_CD4_949   TRBV1                   5 v_family        0.000300 #>  3 TRB_CD4_949   TRBV10               5128 v_family        0.307    #>  4 TRB_CD4_949   TRBV11                154 v_family        0.00923  #>  5 TRB_CD4_949   TRBV12                 34 v_family        0.00204  #>  6 TRB_CD4_949   TRBV13                  8 v_family        0.000480 #>  7 TRB_CD4_949   TRBV14                 28 v_family        0.00168  #>  8 TRB_CD4_949   TRBV15                 16 v_family        0.000959 #>  9 TRB_CD4_949   TRBV16                  4 v_family        0.000240 #> 10 TRB_CD4_949   TRBV18                259 v_family        0.0155   #> # … with 225 more rows top_seqs <- LymphoSeq2::topSeqs(nuc_table, top = 1) LymphoSeq2::chordDiagramVDJ(study_table = top_seqs,                              association = \"VJ\",                              colors = c(\"darkred\", \"navyblue\")) vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) RedBlue <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(11, \"RdBu\")))(256) vtable <- vGenes %>% dplyr::filter(repertoire_id == \"TRB_Unsorted_83\") %>%   dplyr::select(gene_name, gene_frequency) wordcloud2::wordcloud2(data = vtable,                       color = RedBlue) vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) %>%             tidyr::pivot_wider(id_cols = gene_name,                                names_from = repertoire_id,                                values_from = gene_frequency,                                values_fn = sum,                               values_fill = 0) gene_names <- vGenes %>%                dplyr::pull(gene_name) vGenes <- vGenes %>%            dplyr::select(-gene_name) %>%            as.matrix() rownames(vGenes) <- gene_names pheatmap::pheatmap(vGenes, scale = \"row\") vGenes <- LymphoSeq2::geneFreq(nuc_table, locus = \"V\", family = TRUE) multicolors <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(9, \"Set1\")))(28) ggplot2::ggplot(vGenes, aes(x = repertoire_id, y = gene_frequency, fill = gene_name)) +   ggplot2::geom_bar(stat = \"identity\") +   ggplot2::theme_minimal() +    ggplot2::scale_y_continuous(expand = c(0, 0)) +    ggplot2::guides(fill = ggplot2::guide_legend(ncol = 2)) +   ggplot2::scale_fill_manual(values = multicolors) +    ggplot2::labs(y = \"Frequency (%)\", x = \"\", fill = \"\") +   ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust = 1))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"removing-sequences","dir":"Articles","previous_headings":"","what":"Removing sequences","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"Occasionally may identify one sequences data set appear contamination. can remove amino acid sequence data frames using function removeSeq recompute frequencyCount remaining sequences.","code":"LymphoSeq2::searchSeq(study_table = aa_table, sequence = \"CASSESAGSTGELFF\", seq_type = \"junction_aa\") #> # A tibble: 4 × 13 #>   reperto…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>   <chr>     <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #> 1 TRB_CD4_… CASSES… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…    5019 #> 2 TRB_Unso… CASSES… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…   10326 #> 3 TRB_Unso… CASSES… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…    1755 #> 4 TRB_Unso… CASSES… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…     338 #> # … with 3 more variables: duplicate_frequency <dbl>, edit_distance <dbl>, #> #   searchSequence <chr>, and abbreviated variable names ¹​repertoire_id, #> #   ²​junction_aa, ³​v_family, ⁴​d_family, ⁵​j_family, ⁶​reading_frame, #> #   ⁷​duplicate_count cleansed <- LymphoSeq2::removeSeq(study_table = aa_table, sequence = \"CASSESAGSTGELFF\") LymphoSeq2::searchSeq(study_table = cleansed, sequence = \"CASSESAGSTGELFF\", seq_type = \"junction_aa\") #> # A tibble: 0 × 13 #> # … with 13 variables: repertoire_id <chr>, junction_aa <chr>, v_call <chr>, #> #   d_call <chr>, j_call <chr>, v_family <chr>, d_family <chr>, j_family <chr>, #> #   reading_frame <chr>, duplicate_count <dbl>, duplicate_frequency <dbl>, #> #   edit_distance <dbl>, searchSequence <chr>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"rarefaction-curves","dir":"Articles","previous_headings":"","what":"Rarefaction curves","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"Rarefaction extrapolation curves allow comparison TCR diversity across repertoires given ideal sequencing depth. Rarefaction extrapolation curves drawn sampling sequencing dataset various depths understand trajectory sequence diversity extrapolating curve ideal depth.","code":"LymphoSeq2::plotRarefactionCurve(study_table = aa_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/articles/LymphoSeq2.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Analysis of Adaptive Immune Receptor Repertoire Sequencing data with LymphoSeq2","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] vroom_1.6.1        forcats_0.5.2      stringr_1.5.0      dplyr_1.0.10       #>  [5] purrr_1.0.1        readr_2.1.3        tidyr_1.2.1        tibble_3.1.8       #>  [9] ggplot2_3.4.0      tidyverse_1.3.2    wordcloud2_0.2.1   RColorBrewer_1.1-3 #> [13] LymphoSeq2_1.0.0   data.table_1.14.6  #>  #> loaded via a namespace (and not attached): #>   [1] circlize_0.4.15        readxl_1.4.1           backports_1.4.1        #>   [4] fastmatch_1.1-3        systemfonts_1.0.4      plyr_1.8.8             #>   [7] igraph_1.3.5           lazyeval_0.2.2         seqmagick_0.1.5        #>  [10] GenomeInfoDb_1.34.6    digest_0.6.31          yulab.utils_0.0.6      #>  [13] htmltools_0.5.4        ggalluvial_0.12.3      fansi_1.0.3            #>  [16] magrittr_2.0.3         memoise_2.0.1          ineq_0.2-13            #>  [19] googlesheets4_1.0.1    tzdb_0.3.0             Biostrings_2.66.0      #>  [22] modelr_0.1.10          dtplyr_1.2.2           extrafont_0.19         #>  [25] extrafontdb_1.0        timechange_0.2.0       pkgdown_2.0.7          #>  [28] prettyunits_1.1.1      colorspace_2.0-3       rvest_1.0.3            #>  [31] textshaping_0.3.6      haven_2.5.1            xfun_0.36              #>  [34] crayon_1.5.2           RCurl_1.98-1.9         jsonlite_1.8.4         #>  [37] phangorn_2.10.0        ape_5.6-2              glue_1.6.2             #>  [40] polyclip_1.10-4        gtable_0.3.1           gargle_1.2.1           #>  [43] zlibbioc_1.44.0        XVector_0.38.0         UpSetR_1.4.0           #>  [46] proj4_1.0-12           R4RNA_1.26.0           Rttf2pt1_1.3.11        #>  [49] shape_1.4.6            BiocGenerics_0.44.0    maps_3.4.1             #>  [52] scales_1.2.1           pheatmap_1.0.12        futile.options_1.0.1   #>  [55] DBI_1.1.3              Rcpp_1.0.9             progress_1.2.2         #>  [58] gridGraphics_0.5-1     tidytree_0.4.2         bit_4.0.5              #>  [61] stats4_4.2.2           htmlwidgets_1.6.1      httr_1.4.4             #>  [64] ellipsis_0.3.2         pkgconfig_2.0.3        farver_2.1.1           #>  [67] sass_0.4.4             dbplyr_2.3.0           utf8_1.2.2             #>  [70] ggmsa_1.3.4            reshape2_1.4.4         ggplotify_0.1.0        #>  [73] tidyselect_1.2.0       labeling_0.4.2         rlang_1.0.6            #>  [76] munsell_0.5.0          cellranger_1.1.0       tools_4.2.2            #>  [79] cachem_1.0.6           cli_3.6.0              generics_0.1.3         #>  [82] broom_1.0.2            evaluate_0.20          fastmap_1.1.0          #>  [85] yaml_2.3.6             ragg_1.2.5             ggtree_3.7.1.002       #>  [88] knitr_1.41             bit64_4.0.5            fs_1.5.2               #>  [91] nlme_3.1-160           ash_1.0-15             formatR_1.14           #>  [94] aplot_0.1.9            xml2_1.3.3             compiler_4.2.2         #>  [97] curl_5.0.0             msa_1.30.1             reprex_2.0.2           #> [100] treeio_1.23.0          tweenr_2.0.2           bslib_0.4.2            #> [103] stringi_1.7.12         highr_0.10             futile.logger_1.4.3    #> [106] desc_1.4.2             ggalt_0.4.0            lattice_0.20-45        #> [109] Matrix_1.5-1           vctrs_0.5.1            stringdist_0.9.10      #> [112] pillar_1.8.1           lifecycle_1.0.3        GlobalOptions_0.1.2    #> [115] jquerylib_0.1.4        bitops_1.0-7           patchwork_1.1.2        #> [118] R6_2.5.1               gridExtra_2.3          KernSmooth_2.23-20     #> [121] IRanges_2.32.0         codetools_0.2-18       lambda.r_1.2.4         #> [124] MASS_7.3-58.1          assertthat_0.2.1       rprojroot_2.0.3        #> [127] withr_2.5.0            iNEXT_3.0.0            S4Vectors_0.36.1       #> [130] GenomeInfoDbData_1.2.9 parallel_4.2.2         hms_1.1.2              #> [133] quadprog_1.5-8         VennDiagram_1.7.3      grid_4.2.2             #> [136] ggfun_0.0.9            rmarkdown_2.20         googledrive_2.0.0      #> [139] ggforce_0.4.1          lubridate_1.9.0"},{"path":"https://shashidhar22.github.io/LymphoSeq2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wu Elena. Author. Ravishankar Shashidhar. Maintainer, author. Coffey David. Author.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Elena W, Shashidhar R, David C (2023). LymphoSeq2: Analyze high-throughput sequencing T B cell receptors. https://github.com/shashidhar22/LymphoSeq2, https://shashidhar22.github.io/LymphoSeq2.","code":"@Manual{,   title = {LymphoSeq2: Analyze high-throughput sequencing of T and B cell receptors},   author = {Wu Elena and Ravishankar Shashidhar and Coffey David},   year = {2023},   note = {https://github.com/shashidhar22/LymphoSeq2, https://shashidhar22.github.io/LymphoSeq2}, }"},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"lymphoseq2","dir":"","previous_headings":"","what":"Analyze high-throughput sequencing of T and B cell receptors","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"Adaptive Immune Receptor Repertoire Sequencing (AIRR-seq) provides unique opportunity interrogate adaptive immune repertoire various clinical conditions. utility offered technology quickly garnered interest community clinicians researchers investigating immunological landscapes large spectrum health disease states. LymphoSeq2 toolkit allows users import, manipulate visualize AIRR-Seq data various AIRR-Seq assays Adaptive ImmunoSEQ BGI-IRSeq, support 10X VDJ sequencing coming soon. platform also supports importing AIRR-seq data processed using MiXCR pipeline. vignette highlights key features LymphoSeq2.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"install latest version LymphoSeq2 can use devtools package install LymphoSeq2 GitHub","code":"# install.packages(\"devtools\") devtools::install_github(\"shashidhar22/LymphoSeq2\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"import AIRR-Seq data using LymphoSeq2 can use readImmunoSeq function. Currently function can import data MiXCR, Adaptive ImmunoSEQ, BGI IR-SEQ, 10X Genomic single cell VDJ rearrangements. get quick summary repertoire characteristics, use clonality function. calculate many standard repertoire diversity metrics clonality, gini coefficient, convergence, unique productive sequence repertoires input dataset. compare samples varying depth sequencing, can use clonality function sample repertoires minimum number sequences. Since randomly sample sequences repertoire, mode clonality function repeat operation user specified number iterations caculate average value diversity metrics.","code":"library(LymphoSeq2) #> Loading required package: data.table #> Registered S3 method overwritten by 'ggtree': #>   method      from  #>   identify.gg ggfun study_files <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  study_table <- LymphoSeq2::readImmunoSeq(study_files) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) summary_table <- LymphoSeq2::clonality(study_table) summary_table #> # A tibble: 10 × 8 #>    repertoire_id     total_seq…¹ uniqu…² total…³ clona…⁴ gini_…⁵ top_p…⁶ conve…⁷ #>    <chr>                   <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 TRB_CD4_949              1000     845   25769   0.443   0.867   30.1     1    #>  2 TRB_CD8_949              1000     794   26239   0.431   0.903   19.3     1.01 #>  3 TRB_CD8_CMV_369           414     281    1794   0.332   0.761   16.5     1.12 #>  4 TRB_Unsorted_0           1000     838   18161   0.281   0.818    5.77    1    #>  5 TRB_Unsorted_1320        1000     838  178190   0.422   0.902   14.6     1    #>  6 TRB_Unsorted_1496        1000     832   33669   0.389   0.881   14.2     1    #>  7 TRB_Unsorted_32           920     767   31078   0.134   0.601    4.87    1.01 #>  8 TRB_Unsorted_369         1000     830  339413   0.426   0.845   29.7     1    #>  9 TRB_Unsorted_83          1000     823  236732   0.338   0.777   23.6     1    #> 10 TRB_Unsorted_949         1000     831    6549   0.306   0.765   13.8     1    #> # … with abbreviated variable names ¹​total_sequences, #> #   ²​unique_productive_sequences, ³​total_count, ⁴​clonality, ⁵​gini_coefficient, #> #   ⁶​top_productive_sequence, ⁷​convergence sampled_summary <- LymphoSeq2::clonality(study_table, rarefy = TRUE, iterations = 5, min_count = 1000) sampled_summary #> # A tibble: 10 × 8 #>    repertoire_id     total_seq…¹ uniqu…² total…³ clona…⁴ gini_…⁵ top_p…⁶ conve…⁷ #>    <chr>                   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 TRB_CD4_949              163.    137.    1000  0.310    0.723   30.8     1    #>  2 TRB_CD8_949              192.    155.    1000  0.291    0.731   18.9     1.01 #>  3 TRB_CD8_CMV_369          272.    189.    1000  0.299    0.719   16.7     1.08 #>  4 TRB_Unsorted_0           254     209.    1000  0.160    0.621    6.18    1.00 #>  5 TRB_Unsorted_1320        183     151.    1000  0.274    0.729   14.2     1.01 #>  6 TRB_Unsorted_1496        211     175.    1000  0.257    0.705   14.0     1    #>  7 TRB_Unsorted_32          415.    351.    1000  0.0872   0.455    4.42    1.01 #>  8 TRB_Unsorted_369         247.    204.    1000  0.345    0.714   31.6     1    #>  9 TRB_Unsorted_83          314.    256.    1000  0.272    0.653   23.7     1    #> 10 TRB_Unsorted_949         303.    249.    1000  0.230    0.635   13.5     1    #> # … with abbreviated variable names ¹​total_sequences, #> #   ²​unique_productive_sequences, ³​total_count, ⁴​clonality, ⁵​gini_coefficient, #> #   ⁶​top_productive_sequence, ⁷​convergence"},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/aggreateSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group productive sequences by repertoire — aggreateSeq","text":"","code":"aggreateSeq(study_table, aggregate, prevalence, progress_bar)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/aggreateSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group productive sequences by repertoire — aggreateSeq","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq2 function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. aggregate Indicates whether values \"duplicate_count\" \"duplicate_frequency\" aggregated amino acid junction sequence. Acceptable values \"junction_aa\" \"junction\".  \"junction_aa\" selected, resulting data frame columns corresponding junction_aa, duplicate_count, duplicate_frequency. \"junction\" selected columns original list present outputted list.  difference output due fact amino acid CDR3 sequence may encoded multiple unique junction sequences differing V, D, J genes. prevalence Boolean value indicating new column added data frames giving prevalence CDR3 amino acid sequence 55 healthy donor peripheral blood samples.  TRUE means column added FALSE means .  Values range 0 100\\ 100\\ progress_barProgress progress bar Group productive sequences repertoire","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Align multiple sequences — alignSeq","title":"Align multiple sequences — alignSeq","text":"Perform multiple sequence alignment using one three methods output results console pdf file.  One may perform alignment amino acid junction sequences single repertoire_id.  Alternatively, one may search given sequence within list samples using edit distance threshold.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align multiple sequences — alignSeq","text":"","code":"alignSeq(   study_table,   repertoire_ids = NULL,   sequence_list = NULL,   edit_distance = 15,   type = \"junction\",   method = \"ClustalOmega\",   top = 150 )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align multiple sequences — alignSeq","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq. sequence_list character vector one ore amino acid junction CDR3 sequences search. edit_distance integer giving minimum edit distance sequence must less equal .  See details . type character vector indicating whether \"junction_aa\" \"junction\" sequences aligned.  \"junction_aa\" specified, run productiveSeqs first. method character vector indicating multiple sequence alignment method used.  Refer Bioconductor msa package details.  Options include \"ClustalW\", \"ClustalOmega\", \"Muscle\". top number top sequences perform alignment. repertoire_id character vector indicating name repertoire_id productive sequence list.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align multiple sequences — alignSeq","text":"Performs multiple sequence alignment object.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align multiple sequences — alignSeq","text":"Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence .  example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align multiple sequences — alignSeq","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Registered S3 methods overwritten by 'readr': #>   method                    from  #>   as.data.frame.spec_tbl_df vroom #>   as_tibble.spec_tbl_df     vroom #>   format.col_spec           vroom #>   print.col_spec            vroom #>   print.collector           vroom #>   print.date_names          vroom #>   print.locale              vroom #>   str.col_spec              vroom  ntable <- productiveSeq(stable, aggregate = \"junction\")  alignSeq(ntable, repertoire_id = \"IGH_MVQ92552A_BL\", type = \"junction\",           method = \"ClustalW\") #> use default substitution matrix #> CLUSTAL 2.1   #>  #> Call: #>    msa::msa(string_list, method = method) #>  #> MsaDNAMultipleAlignment with 65 rows and 186 columns #>      aln                                                   names #>  [1] -------------------------...CTTTTGATATCTGGGGCCAAGGG-- IGH_MVQ92552A_BL_16 #>  [2] ------------------------G...GTATGGACGTCTGGGGCCAAGGG-- IGH_MVQ92552A_BL_55 #>  [3] ------------------GACAACA...CTTTTGATTTTTGGGGCCAAGGG-- IGH_MVQ92552A_BL_48 #>  [4] ---------------------CGCG...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL_35 #>  [5] ------------------------A...CTTTTGATGTTTGGGGCCAAGGG-- IGH_MVQ92552A_BL_5 #>  [6] -------------------------...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL_34 #>  [7] -------------------------...CTATGGACGTCTGGGGCCAAGGG-- IGH_MVQ92552A_BL_51 #>  [8] -------------------------...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL_59 #>  [9] -------------------------...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL_9  #>  ... ... #> [58] ------CAGGGTCACCATGACCAGG...----CCTTA-CTGGGGCCAGGGA-- IGH_MVQ92552A_BL_27 #> [59] ---------------CATGACCAGG...----TGACTACTGGGGCCAGGGA-- IGH_MVQ92552A_BL_31 #> [60] ---------------------CGCG...--TTGACCTACTGGGGCCAGGGA-- IGH_MVQ92552A_BL_36 #> [61] -------------------------...GGTTCAGATACTGGGGCCAGGGA-- IGH_MVQ92552A_BL_60 #> [62] ---------------CATCTCCAGA...A--TTGACTACTGGGGCCAGGGA-- IGH_MVQ92552A_BL_29 #> [63] ------------------CTCCAGA...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL_40 #> [64] ----------------------GCC...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL_53 #> [65] -------------------------...TGTGCCCCCTAGGAGGCCACACTGG IGH_MVQ92552A_BL_64 #>  Con ------------------------?...?T????AC??CTGGGGCCAGGGA-- Consensus"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Bhattacharyya coefficient — bhattacharyyaCoefficient","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"Calculates Bhattacharyya coefficient two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"","code":"bhattacharyyaCoefficient(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"sample_list list two tibble corresponding derived productiveSeq function LymphoSeq2. duplicate_frequency, junction_aa, repertoire_id columns necessary calcualtion Bhattacharyya coefficient.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"tibble one row three columns sample1, sample2, bhattacharyyaCoefficient","code":""},{"path":[]},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":null,"dir":"Reference","previous_headings":"","what":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"Creates chord diagram showing VJ DJ gene associations one samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"","code":"chordDiagramVDJ(study_table, association = \"VJ\", colors = c(\"red\", \"blue\"))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"study_table tibble consisting frequencies antigen receptor sequences.  \"v_family\", \"j_family\", applicable, \"d_family\" required columns.  Using output LymphoSeq2 function topSeqs recommended. association character vector gene families associate. Options include \"VJ\" \"DJ\". colors character vector 2 colors corresponding V/D J gene colors respectively.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"Returns chord diagram showing VJ DJ gene associations one samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"size ribbons connecting VJ DJ genes correspond number samples number sequences make recombination event. thicker ribbon, higher frequency recombination.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(file_path)  ntable <- productiveSeq(stable, aggregate = \"junction\")  top_seqs <- topSeqs(ntable, top = 1)  chordDiagramVDJ(top_seqs, association = \"VJ\", colors = c(\"red\", \"blue\"))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Clonal relatedness — clonalRelatedness","title":"Clonal relatedness — clonalRelatedness","text":"Calculates clonal relatedness repertoire_id study.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clonal relatedness — clonalRelatedness","text":"","code":"clonalRelatedness(study_table, editDistance = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clonal relatedness — clonalRelatedness","text":"study_table tibble unproductive productive junction sequences productive junction sequences.  Junction duplicate_count required columns. editDistance integer giving minimum edit distance sequence must less equal . See details .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clonal relatedness — clonalRelatedness","text":"Returns tibble calculated clonal relatedness repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clonal relatedness — clonalRelatedness","text":"Clonal relatedness proportion junction sequences related defined edit distance threshold.  value ranges 0 1 0 indicates sequences related 1 indicates sequences related. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence . example, edit distance 0 means sequences identical edit distance 1 indicates sequences differ single amino acid junction.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clonal relatedness — clonalRelatedness","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  clonal_relatedness <- clonalRelatedness(stable, editDistance = 10) #> Error in clonalRelatedness(stable, editDistance = 10): unused argument (editDistance = 10)  # Merge results with clonality table clonality <- clonality(stable) merged <- dplyr::full_join(clonality, clonal_relatedness, by = \"repertoire_id\") #> Error in is.data.frame(y): object 'clonal_relatedness' not found"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":null,"dir":"Reference","previous_headings":"","what":"Clonality (summary statistics) — clonality","title":"Clonality (summary statistics) — clonality","text":"Creates tibble giving total number sequences, number unique productive sequences, number genomes, entropy, clonality, Gini coefficient, simpson index, inverse simpson index, frequency (\\","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clonality (summary statistics) — clonality","text":"","code":"clonality(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clonality (summary statistics) — clonality","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. Note clonality usually calculated productive junction sequences. Therefore, recommended run function using productive sequence list aggregated amino acids.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clonality (summary statistics) — clonality","text":"Returns tibble giving total number sequences, number unique productive sequences, number genomes, clonality, Gini coefficient, simpson index, inverse simpson index, frequency (\\ repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clonality (summary statistics) — clonality","text":"Clonality derived Shannon entropy, calculated frequencies productive sequences divided logarithm total number unique productive sequences.  normalized entropy value inverted (1 - normalized entropy) produce clonality metric. Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve.  Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads.  line passing origin slope 1 reflects equal frequencies clones. Gini coefficient ratio area line equality observed Lorenz curve total area line equality. Gini coefficient clonality reported scale 0 1 0 indicates sequences frequency 1 indicates repertoire dominated single sequence.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clonality (summary statistics) — clonality","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  clonality(stable) #> # A tibble: 10 × 8 #>    repertoire_id     total_seq…¹ uniqu…² total…³ clona…⁴ gini_…⁵ top_p…⁶ conve…⁷ #>    <chr>                   <int>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1 TRB_CD4_949              1000     845   25769   0.443   0.867   30.1     1    #>  2 TRB_CD8_949              1000     794   26239   0.431   0.903   19.3     1.01 #>  3 TRB_CD8_CMV_369           414     281    1794   0.332   0.761   16.5     1.12 #>  4 TRB_Unsorted_0           1000     838   18161   0.281   0.818    5.77    1    #>  5 TRB_Unsorted_1320        1000     838  178190   0.422   0.902   14.6     1    #>  6 TRB_Unsorted_1496        1000     832   33669   0.389   0.881   14.2     1    #>  7 TRB_Unsorted_32           920     767   31078   0.134   0.601    4.87    1.01 #>  8 TRB_Unsorted_369         1000     830  339413   0.426   0.845   29.7     1    #>  9 TRB_Unsorted_83          1000     823  236732   0.338   0.777   23.6     1    #> 10 TRB_Unsorted_949         1000     831    6549   0.306   0.765   13.8     1    #> # … with abbreviated variable names ¹​total_sequences, #> #   ²​unique_productive_sequences, ³​total_count, ⁴​clonality, ⁵​gini_coefficient, #> #   ⁶​top_productive_sequence, ⁷​convergence"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone tracking line plot — cloneTrack","title":"Clone tracking line plot — cloneTrack","text":"Creates line plot tracking amino acid frequencies across multiple samples","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone tracking line plot — cloneTrack","text":"","code":"cloneTrack(study_table, sample_list = NULL, sequence_track = NULL)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone tracking line plot — cloneTrack","text":"study_table tibble productive amino acid sequences generated LymphoSeq2 function productiveSeq aggregate parameter set \"junction_aa\" sample_list character vector one repertoire_ids track. set NULL (default), repertoire_ids sequence matrix tracked. sequence_track optional character vector one amino acid sequences track. set NULL (default), pull junction_aa sequences sequence matrix.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone tracking line plot — cloneTrack","text":"Returns line plot showing amino acid frequencies across multiple samples sequence matrix line represents one unique sequence.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clone tracking line plot — cloneTrack","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone tracking line plot — cloneTrack","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  top_freq <- topFreq(atable, frequency = 0.001)  # Track clones without mapping or tracking specific sequences cloneTrack(atable) #> # A tibble: 7,533 × 12 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD4… CAIKPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       3 #>  2 TRB_CD4… CAIRAG… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       3 #>  3 TRB_CD4… CAISDE… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #>  4 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  5 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  6 TRB_CD4… CAISDQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  7 TRB_CD4… CAISER… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  8 TRB_CD4… CAISEW… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       4 #>  9 TRB_CD4… CAISGQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #> 10 TRB_CD4… CAISLN… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #> # … with 7,523 more rows, 2 more variables: duplicate_frequency <dbl>, #> #   seen <int>, and abbreviated variable names ¹​repertoire_id, ²​junction_aa, #> #   ³​v_family, ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count  # Track top 20 clones mapping to the CD4 and CD8 samples cloneTrack(atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),    sequence_track = top_freq$junction_aa[1:20])  #> # A tibble: 20 × 12 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD4… CASSWE… TRBV2… TRBJ1… TRBJ1… TRBV28  TRBJ1   TRBJ1   in-fra…     174 #>  2 TRB_CD8… CAIKME… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…     158 #>  3 TRB_CD8… CASRDG… TRBV6… TRBJ1… TRBJ1… TRBV6   TRBJ1   TRBJ1   in-fra…     303 #>  4 TRB_CD8… CASSEA… TRBV2… TRBJ1… TRBJ1… TRBV2   TRBJ1   TRBJ1   in-fra…      84 #>  5 TRB_CD8… CASSGG… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra…      62 #>  6 TRB_CD8… CASSLA… TRBV2… TRBJ2… TRBJ2… TRBV28  TRBJ2   TRBJ2   in-fra…     750 #>  7 TRB_CD8… CASSLQ… TRBV2… TRBJ1… TRBJ1… TRBV27  TRBJ1   TRBJ1   in-fra…    1957 #>  8 TRB_CD8… CASSLS… TRBV6… TRBJ2… TRBJ2… TRBV6   TRBJ2   TRBJ2   in-fra…     223 #>  9 TRB_CD8… CASSPF… TRBV2… TRBJ1… TRBJ1… TRBV28  TRBJ1   TRBJ1   in-fra…     295 #> 10 TRB_CD8… CASSPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…      67 #> 11 TRB_CD8… CASSPL… TRBV2… TRBJ2… TRBJ2… TRBV28  TRBJ2   TRBJ2   in-fra…     104 #> 12 TRB_CD8… CASSPP… TRBV7… TRBJ2… TRBJ2… TRBV7   TRBJ2   TRBJ2   in-fra…    1903 #> 13 TRB_CD8… CASSPS… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…     106 #> 14 TRB_CD8… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…     180 #> 15 TRB_CD8… CASSQD… TRBV4… TRBJ2… TRBJ2… TRBV4   TRBJ2   TRBJ2   in-fra…    2387 #> 16 TRB_CD8… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…     223 #> 17 TRB_CD8… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…      58 #> 18 TRB_CD8… CASSQD… TRBV1… TRBJ2… TRBJ2… TRBV14  TRBJ2   TRBJ2   in-fra…    1758 #> 19 TRB_CD8… CASSRE… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra…      67 #> 20 TRB_CD8… CASSSW… TRBV5… TRBJ2… TRBJ2… TRBV5   TRBJ2   TRBJ2   in-fra…      86 #> # … with 2 more variables: duplicate_frequency <dbl>, seen <int>, and #> #   abbreviated variable names ¹​repertoire_id, ²​junction_aa, ³​v_family, #> #   ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count  # Track the top 10 clones from top.freq cloneTrack(study_table = atable, sequence_track = top_freq$junction_aa[1:10])  #> # A tibble: 75 × 12 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD8… CAIKME… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…     158 #>  2 TRB_CD8… CASRDG… TRBV6… TRBJ1… TRBJ1… TRBV6   TRBJ1   TRBJ1   in-fra…     303 #>  3 TRB_CD8… CASSLQ… TRBV2… TRBJ1… TRBJ1… TRBV27  TRBJ1   TRBJ1   in-fra…    1957 #>  4 TRB_CD8… CASSPF… TRBV2… TRBJ1… TRBJ1… TRBV28  TRBJ1   TRBJ1   in-fra…     295 #>  5 TRB_CD8… CASSPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…      67 #>  6 TRB_CD8… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…     180 #>  7 TRB_CD8… CASSQD… TRBV4… TRBJ2… TRBJ2… TRBV4   TRBJ2   TRBJ2   in-fra…    2387 #>  8 TRB_CD8… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…     223 #>  9 TRB_CD8… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…      58 #> 10 TRB_CD8… CASSRE… TRBV5… TRBJ1… TRBJ1… TRBV5   TRBJ1   TRBJ1   in-fra…      67 #> # … with 65 more rows, 2 more variables: duplicate_frequency <dbl>, seen <int>, #> #   and abbreviated variable names ¹​repertoire_id, ²​junction_aa, ³​v_family, #> #   ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count  # Track clones mapping to the CD4 and CD8 samples while ignoring all others cloneTrack(study_table = atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\")) #> # A tibble: 1,607 × 12 #>    repert…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>    <chr>    <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #>  1 TRB_CD4… CAIKPG… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       3 #>  2 TRB_CD4… CAIRAG… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       3 #>  3 TRB_CD4… CAISDE… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #>  4 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  5 TRB_CD4… CAISDL… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  6 TRB_CD4… CAISDQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  7 TRB_CD4… CAISER… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #>  8 TRB_CD4… CAISEW… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       4 #>  9 TRB_CD4… CAISGQ… TRBV1… TRBJ1… TRBJ1… TRBV10  TRBJ1   TRBJ1   in-fra…       2 #> 10 TRB_CD4… CAISLN… TRBV1… TRBJ2… TRBJ2… TRBV10  TRBJ2   TRBJ2   in-fra…       2 #> # … with 1,597 more rows, 2 more variables: duplicate_frequency <dbl>, #> #   seen <int>, and abbreviated variable names ¹​repertoire_id, ²​junction_aa, #> #   ³​v_family, ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count  # Track clones mapping to the CD4 and CD8 samples and track 2 specific sequences cloneTrack(study_table = atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),    sequence_track = c(\"CASSPPTGERDTQYF\", \"CASSQDRTGQYGYTF\")) #> # A tibble: 2 × 12 #>   reperto…¹ junct…² v_call d_call j_call v_fam…³ d_fam…⁴ j_fam…⁵ readi…⁶ dupli…⁷ #>   <chr>     <chr>   <chr>  <chr>  <chr>  <chr>   <chr>   <chr>   <chr>     <dbl> #> 1 TRB_CD8_… CASSPP… TRBV7… TRBJ2… TRBJ2… TRBV7   TRBJ2   TRBJ2   in-fra…    1903 #> 2 TRB_CD8_… CASSQD… TRBV4… TRBJ1… TRBJ1… TRBV4   TRBJ1   TRBJ1   in-fra…     223 #> # … with 2 more variables: duplicate_frequency <dbl>, seen <int>, and #> #   abbreviated variable names ¹​repertoire_id, ²​junction_aa, ³​v_family, #> #   ⁴​d_family, ⁵​j_family, ⁶​reading_frame, ⁷​duplicate_count"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences in two or more repertoire_ids — commonSeqs","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"Creates data frame common sequences two repertoire_ids, reporting frequencies .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"","code":"commonSeqs(study_table, repertoire_ids = NULL)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"study_table list productive amino acid sequences generated LymphoSeq2 function productiveSeq aggregate = \"junction_aa\". repertoire_ids character vector two repertoire_id names study_table.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"Returns data frame common sequences two files displaying frequencies .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  commonSeqs(repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\"),    study_table = atable) #> # A tibble: 4 × 3 #>   junction_aa     TRB_Unsorted_0 TRB_Unsorted_32 #>   <chr>                    <dbl>           <dbl> #> 1 CAISEGNYGYTF          0.000351        0.00187  #> 2 CASSFGIQETQYF         0.000140        0.000957 #> 3 CASSQDRTGQYGYTF       0.00471         0.00806  #> 4 CAWTGGTTEAFF          0.00105         0.00152"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences bar plot — commonSeqsBar","title":"Common sequences bar plot — commonSeqsBar","text":"Creates UpSetR bar plot showing number intersecting sequences across multiple repertoire_ids. function useful 3 repertoire_ids compared.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences bar plot — commonSeqsBar","text":"","code":"commonSeqsBar(   productive_aa,   repertoire_ids,   color_sample = NULL,   color_intersection = NULL,   color = \"#377eb8\",   labels = \"no\" )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences bar plot — commonSeqsBar","text":"productive_aa tibble productive amino acid sequences generated LymphoSeq2 function productiveSeq aggregate parameter set \"junction_aa\". repertoire_ids names two repertoire_ids productive_aa list whose intersections shown. color_sample name single repertoire_id productive_aa list whose sequences colored repertoire_ids appear . color_intersection names two repertoire_ids productive_aa list whose intersections colored. color character vector color name used highlight selected repertoire_id multiple repertoire_id intersections. labels character vector indicating whether number intersecting sequences shown tops bars.  Options include \"yes\" \"\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences bar plot — commonSeqsBar","text":"Returns UpSetR bar plot showing number intersecting sequences across multiple repertoire_ids.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences bar plot — commonSeqsBar","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(stable, aggregate = \"junction_aa\")  commonSeqsBar(atable, repertoire_ids = c(\"TRB_CD4_949\", \"TRB_CD8_949\", \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"), color_sample = \"TRB_CD8_949\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences scatter plot — commonSeqsPlot","title":"Common sequences scatter plot — commonSeqsPlot","text":"Creates scatter plot just sequences common two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences scatter plot — commonSeqsPlot","text":"","code":"commonSeqsPlot(sample1, sample2, productive_aa, show = \"common\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences scatter plot — commonSeqsPlot","text":"sample1 name repertoire_id list data frames generated LymphoSeq2 function productiveSeq. sample2 name repertoire_id list data frames generated LymphoSeq function productiveSeq. productive_aa tibble productive amino acid sequences produced LymphoSeq function productiveSeq containing samples compared. show character vector specifying whether common sequences shown sequences.  Available options \"common\" \"\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences scatter plot — commonSeqsPlot","text":"Returns frequency scatter plot two samples showing shared sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Common sequences scatter plot — commonSeqsPlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions. See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences scatter plot — commonSeqsPlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",     productive_aa = atable) #> Error in commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\", productive_aa = atable): unused argument (productive_aa = atable)  # Change the X and Y axis to log-10 scale commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",     productive_aa = atable) +    ggplot2::scale_x_log10() +     ggplot2::scale_y_log10() +     ggplot2::annotation_logticks(sides = \"bl\") #> Error in commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\", productive_aa = atable): unused argument (productive_aa = atable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences Venn diagram — commonSeqsVenn","title":"Common sequences Venn diagram — commonSeqsVenn","text":"Creates Venn diagram comparing number common sequences two three repertoire_ids.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences Venn diagram — commonSeqsVenn","text":"","code":"commonSeqsVenn(repertoire_ids, productive_aa)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences Venn diagram — commonSeqsVenn","text":"repertoire_ids character vector two three names repertoire_ids productiveSeq table compare. productive_aa tibble amino acid sequences generated LymphoSeq2 function productiveSeq.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences Venn diagram — commonSeqsVenn","text":"Returns Venn diagram number common sequences two three repertoire_ids.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences Venn diagram — commonSeqsVenn","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  # Plot a triple Venn diagram commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\",     \"TRB_Unsorted_32\", \"TRB_Unsorted_83\"),     productive_aa = atable) #> Error in commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\",     \"TRB_Unsorted_83\"), productive_aa = atable): unused argument (productive_aa = atable)  # Plot a double Venn diagram commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\",     \"TRB_Unsorted_32\"), productive_aa = atable) #> Error in commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\"),     productive_aa = atable): unused argument (productive_aa = atable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Find k-mers and its counts — countKmer","title":"Find k-mers and its counts — countKmer","text":"Calculate counts kmers query nucleotide sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find k-mers and its counts — countKmer","text":"","code":"countKmer(study_table, k, separate = TRUE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find k-mers and its counts — countKmer","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq2 function readImmunoSeq. \"repertoire_id\" \"junction\" required columns. k length k-mers find. separate boolean value. TRUE separate counts k-mer repertoire_ids. FALSE show cumulative counts instead. Default value TRUE.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find k-mers and its counts — countKmer","text":"tibble k-mer counts. counts can cumulative counts entire study_table counts repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find k-mers and its counts — countKmer","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  kmer_table <- countKmer(study_table = stable, k = 5, separate = TRUE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential abundance analysis — differentialAbundance","title":"Differential abundance analysis — differentialAbundance","text":"Use Fisher exact test calculate differential abdunance sequence two samples reports log2 transformed fold change, P value adjusted P value.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential abundance analysis — differentialAbundance","text":"","code":"differentialAbundance(   study_table,   repertoire_ids = NULL,   abundance = \"duplicate_count\",   type = \"junction_aa\",   q = 1,   zero = 1,   parallel = FALSE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential abundance analysis — differentialAbundance","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq2 function readImmunoSeq. repertoire_ids character vector two repertoire_ids study_table compared. NULL, first two repertoire_ids study_table used. abundance input value Fisher exact test. \"duplicate_count\" default value also recommended value. type character vector indicating whether \"junction_aa\" \"junction\" sequences used.  \"junction_aa\" specified, run productiveSeqs first. default value \"junction_aa\". q numeric value 0.0 1.0 indicating threshold Holms adjusted P value (also knowns false discovery rate q value) subset results . sequences q value greater value shown. zero numeric value set zero values calculating log2 transformed fold change samples 1 2. apply p q value calculations. parallel boolean indicating wheter parallel processing used . default value FALSE.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential abundance analysis — differentialAbundance","text":"Returns data frame columns corresponding frequency abudance measure samples 1 2, P value, Q value (Holms adjusted P value, also knowns false discovery rate), log2 transformed fold change.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential abundance analysis — differentialAbundance","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  differentialAbundance(study_table = atable, repertoire_ids = c(\"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"),                        type = \"junction_aa\", q = 0.01, zero = 0.001) #> # A tibble: 1,332 × 6 #>    junction_aa       TRB_Unsorted_949 TRB_Unsorted_1320        p       q    l2fc #>    <chr>                        <dbl>             <dbl>    <dbl>   <dbl>   <dbl> #>  1 CACALGDGYTF                      0                 2  1   e+0 1   e+0 -Inf    #>  2 CACQRTGSSYEQYF                   0                 3  1   e+0 1   e+0 -Inf    #>  3 CAIGLSNQPQHF                     2                67  1   e+0 1   e+0   -5.07 #>  4 CAIKMETPNGEQYF                  29               326  2.66e-5 2.66e-5   -3.49 #>  5 CAIRGTEDNNSPLHF                  0                16  1   e+0 1   e+0 -Inf    #>  6 CAISDSSYEQYF                     1                23  5.71e-1 5.71e-1   -4.52 #>  7 CAISDTGELFF                      8                83  1.39e-2 1.39e-2   -3.38 #>  8 CAISEFGLMAREYGYTF                0                 1  1   e+0 1   e+0 -Inf    #>  9 CAISEGQGVKPQHF                   0               167  4.92e-3 4.92e-3 -Inf    #> 10 CAISESGVLNEKLFF                 13               150  4.69e-3 4.69e-3   -3.53 #> # … with 1,322 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Export sequences in fasta format — exportFasta","title":"Export sequences in fasta format — exportFasta","text":"Export junction amino acid sequences fasta format.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export sequences in fasta format — exportFasta","text":"","code":"exportFasta(   study_table,   type = \"junction\",   names = c(\"rank\", \"junction_aa\", \"duplicate_count\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export sequences in fasta format — exportFasta","text":"type character vector indicating whether \"junction_aa\" \"junction\" sequences exported.  \"junction_aa\" specified, run productiveSeqs first. names character vector one column names name sequences. \"rank\" specified, rank order sequences frequency used. sample_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export sequences in fasta format — exportFasta","text":"Exports fasta files working directory.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export sequences in fasta format — exportFasta","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  exportFasta(study_table = stable, type = \"junction\", names = c(\"junction_aa\", \"duplicate_count\")) #> Fasta files saved to /home/runner/work/LymphoSeq2/LymphoSeq2/docs/reference  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  exportFasta(study_table = atable, type = \"junction_aa\", names = \"duplicate_frequency\") #> Fasta files saved to /home/runner/work/LymphoSeq2/LymphoSeq2/docs/reference"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene frequencies — geneFreq","title":"Gene frequencies — geneFreq","text":"Creates data frame VDJ gene counts frequencies.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene frequencies — geneFreq","text":"","code":"geneFreq(productive_nt, locus = \"V|D|J\", family = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene frequencies — geneFreq","text":"productive_nt tibble productive sequences generated LymphoSeq2 function productiveSeq parameter aggregate set \"junction\". locus character vector indicating VDJ genes include output.  Available options include \"VDJ\", \"DJ\", \"VJ\", \"DJ\", \"V\", \"D\", \"J\". family Boolean value indicating whether family names instead gene names used.  TRUE, family names used FALSE, gene names used.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene frequencies — geneFreq","text":"Returns data frame repertoire_id names, VDJ gene name, duplicate_count, \\ 100\\","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene frequencies — geneFreq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  ntable <- productiveSeq(study_table = stable, aggregate = \"junction\")  geneFreq(ntable, locus = \"VDJ\", family = FALSE) #> # A tibble: 563 × 5 #>    repertoire_id gene_name duplicate_count gene_type gene_frequency #>    <chr>         <chr>               <dbl> <chr>              <dbl> #>  1 TRB_CD4_949   NA                   3675 v_call            0.220  #>  2 TRB_CD4_949   TRBJ1-1              1846 j_call            0.0553 #>  3 TRB_CD4_949   TRBJ1-2              2344 j_call            0.0703 #>  4 TRB_CD4_949   TRBJ1-3              4586 j_call            0.137  #>  5 TRB_CD4_949   TRBJ1-4               918 j_call            0.0275 #>  6 TRB_CD4_949   TRBJ1-5              2436 j_call            0.0730 #>  7 TRB_CD4_949   TRBJ1-6              3446 j_call            0.103  #>  8 TRB_CD4_949   TRBJ2-1              1554 j_call            0.0466 #>  9 TRB_CD4_949   TRBJ2-2             10944 j_call            0.328  #> 10 TRB_CD4_949   TRBJ2-3               370 j_call            0.0111 #> # … with 553 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Group productive sequences by repertoire — getGliphTable","title":"Group productive sequences by repertoire — getGliphTable","text":"Group productive sequences repertoire","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group productive sequences by repertoire — getGliphTable","text":"","code":"getGliphTable(gliph_path, progress_bar)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group productive sequences by repertoire — getGliphTable","text":"gliph_path Path individual GLIPH file progress_bar Progress bar variable","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Lorenz curve — getLorenz","title":"Calculate Lorenz curve — getLorenz","text":"Calculate Lorenz curve derived frequency amino acid sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Lorenz curve — getLorenz","text":"","code":"getLorenz(sample_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Lorenz curve — getLorenz","text":"sample_table tibble single repertoire_id generated using LymphoSeq function readImmunoSeq productiveSeq.  \"duplicate_frequency\" required column.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Lorenz curve — getLorenz","text":"Returns Lorenz curve tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relatedness — getRelatedness","title":"Calculate relatedness — getRelatedness","text":"Calculates clonal relatedness repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relatedness — getRelatedness","text":"","code":"getRelatedness(sample_table, editDistance = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relatedness — getRelatedness","text":"sample_table tibble unproductive productive junction sequences productive junction sequences.  junction duplicate_count required columns. editDistance integer giving minimum edit distance sequence must less equal . See details .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot kmer distributions — kmerPlot","title":"Plot kmer distributions — kmerPlot","text":"Plot kmer distributions repertoire id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot kmer distributions — kmerPlot","text":"","code":"kmerPlot(kmer_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot kmer distributions — kmerPlot","text":"kmer_table tibble k-mer counts generated LymphoSeq2 function countKmer separate parameter set TRUE. top number top k-mers show","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot kmer distributions — kmerPlot","text":"stacked bar chart showing k-mer distributions repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/kmerPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot kmer distributions — kmerPlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  kmer_table <- countKmer(study_table = stable, k = 5, separate = TRUE)  kmer_distributions <- kmerPlot(kmer_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Lorenz curve — lorenzCurve","title":"Lorenz curve — lorenzCurve","text":"Plots Lorenz curve derived frequency amino acid sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lorenz curve — lorenzCurve","text":"","code":"lorenzCurve(repertoire_ids, study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lorenz curve — lorenzCurve","text":"repertoire_ids character vector repertoire_id names list. study_table tibble generated using LymphoSeq2 function readImmunoSeq productiveSeq.  \"duplicate_frequency\" required column.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lorenz curve — lorenzCurve","text":"Returns Lorenz curve.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lorenz curve — lorenzCurve","text":"Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve.  Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads.  line passing origin slope 1 reflects equal frequencies sequences.  Gini coefficient ratio area line equality observed Lorenz curve total area line equality. plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lorenz curve — lorenzCurve","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  repertoire_ids <- stable %>% dplyr::pull(repertoire_id) %>% unique() #> Error in stable %>% dplyr::pull(repertoire_id) %>% unique(): could not find function \"%>%\"  lorenzCurve(repertoire_ids = repertoire_ids, study_table = stable) #> Error in .approxfun(x, y, v, method, yleft, yright, f, na.rm): object 'repertoire_ids' not found  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  repertoire_ids <- atable %>% dplyr::pull(repertoire_id) %>% unique() #> Error in atable %>% dplyr::pull(repertoire_id) %>% unique(): could not find function \"%>%\"  lorenzCurve(repertoire_ids = repertoire_ids, study_table = atable) #> Error in .approxfun(x, y, v, method, yleft, yright, f, na.rm): object 'repertoire_ids' not found  # Change the legend labels, line colors, and add a title repertoire_ids <- c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\",     \"TRB_Unsorted_83\", \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\")  lorenz_curve <- lorenzCurve(repertoire_ids = repertoire_ids, study_table = atable)  labels <- c(\"Day 0\", \"Day 32\", \"Day 83\", \"Day 949\", \"Day 1320\")  colors <- c(\"navyblue\", \"red\", \"darkgreen\", \"orange\", \"purple\",              \"yellow\", \"pink\", \"lightgreen\", \"cyan\", \"maroon\")  lorenz_curve +  ggplot2::scale_color_manual(name = \"repertoire_ids\",                              breaks = repertoire_ids,                              labels = labels, values = colors) +  ggplot2::ggtitle(\"Figure Title\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison plot — pairwisePlot","title":"Pairwise comparison plot — pairwisePlot","text":"Creates heat map Bhattacharyya, Similarity, Sorensen, PSI matrix.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison plot — pairwisePlot","text":"","code":"pairwisePlot(matrix)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison plot — pairwisePlot","text":"matrix Bhattacharyya, Similarity, Sorensen, PSI matrix produced LymphoSeq2 scoringMatrix function.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise comparison plot — pairwisePlot","text":"pairwise comparison heat map.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pairwise comparison plot — pairwisePlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise comparison plot — pairwisePlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  atable <- productiveSeq(stable, aggregate = \"junction_aa\")  similarity_matrix <- scoringMatrix(productive_table = atable, mode=\"Similarity\")  pairwisePlot(matrix = similarity_matrix)   bhattacharyya_matrix <- scoringMatrix(productive_table = atable, mode=\"Bhattacharyya\")  pairwisePlot(matrix = bhattacharyya_matrix)   # Change plot color, title legend, and add title pairwisePlot(matrix = similarity_matrix) +  ggplot2::scale_fill_gradient(low = \"#deebf7\", high = \"#3182bd\") +  ggplot2::labs(fill = \"Similarity score\") +  ggplot2::ggtitle(\"Figure Title\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent similarity index — percentSI","title":"Percent similarity index — percentSI","text":"Calculates Percent similarity index two groups repertoires. Percent similarity index, compares number similar dissimilar species present two sites, also incorporate abundance.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent similarity index — percentSI","text":"","code":"percentSI(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent similarity index — percentSI","text":"sample1 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns. sample2 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percent similarity index — percentSI","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create phylogenetic tree — phyloTree","title":"Create phylogenetic tree — phyloTree","text":"Create phylogenetic tree using neighbor joining tree estimation amino acid junction CDR3 sequences list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create phylogenetic tree — phyloTree","text":"","code":"phyloTree(   study_table,   repertoire_ids,   type = \"junction\",   layout = \"rectangular\",   label = TRUE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create phylogenetic tree — phyloTree","text":"study_table tibble unproductive junction sequences productive junction sequences generated LymphoSeq function productiveSeq. v_family, d_family, j_family, duplicate_count required columns. repertoire_ids character vector indicating name repertoire_id study table. type character vector indicating whether \"junction_aa\" \"junction\" sequences compared. layout character vector indicating tree layout.  Options include \"rectangular\", \"slanted\", \"fan\", \"circular\", \"radial\" \"unrooted\". label Boolean indicating sequencing duplicate_count shown next leaves.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create phylogenetic tree — phyloTree","text":"Returns phylogenetic tree leaf represents sequence color coded V, D, J gene usage.  number next leaf refers sequence duplicate_count.  triangle shaped leaf indicates dominant sequence.  Refer ggtree Bioconductor package documentation details manipulate tree.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create phylogenetic tree — phyloTree","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  ntable <- productiveSeq(study_table = stable, aggregate = \"junction\")  phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction\",           layout = \"rectangular\") #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the LymphoSeq2 package. #>   Please report the issue at #>   <https://github.com/shashidhar22/LymphoSeq2/issues>.   phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction_aa\",           layout = \"circular\")            # Add scale and title to figure phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction_aa\",           layout = \"rectangular\") +          ggtree::theme_tree2() +          ggplot2::theme(legend.position = \"right\", legend.key = ggplot2::element_rect(colour = \"white\")) +          ggplot2::ggtitle(\"Title\")            # Hide legend and leaf labels phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction\",           layout = \"rectangular\", label = FALSE) +          ggplot2::theme(legend.position=\"none\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"Generate MSA alignment figures results alignSeq","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"","code":"plotAlignment(msa)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"msa msa object obtained alignSeq function LymphoSeq2.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"Multiple sequence alignment plot.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path)  ntable <- productiveSeq(stable, aggregate = \"junction\")  msa <- alignSeq(ntable, repertoire_id = \"IGH_MVQ92552A_BL\", type = \"junction\",           method = \"ClustalW\") #> use default substitution matrix"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"Given study table, sample plot rarefaction curves estimate repertoire diversity. method used generate rarefaction curve derived Chao et al., (2014) using iNEXT library","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"","code":"plotRarefactionCurve(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"aminoAcid\", \"count\", \"frequencyCount\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- readImmunoSeq(path = file_path) plotRarefactionCurve(stable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clone — plotTrack","title":"Plot clone — plotTrack","text":"Creates alluvial tracking amino acid frequencies across multiple samples","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clone — plotTrack","text":"","code":"plotTrack(   clone_table,   alist = NULL,   apal = NULL,   breaks = 2,   alphas = 0,   breaks_pal = c(\"#7fc97f\", \"#beaed4\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clone — plotTrack","text":"clone_table tibble productive amino acid sequences generated LymphoSeq function cloneTrack alist optional list amino acid, list provided sequences highlighted apal optional list palatte colors used amino acids highlighted breaks Add additional band behind alluvial plot highligh group, specificies bar break appear alphas Set alpha band breaks_pal Specify palette bands","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clone — plotTrack","text":"alluvial diagram tracking particular clone across samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot clone — plotTrack","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clone — plotTrack","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- LymphoSeq2::readImmunoSeq(path = file_path) atable <- LymphoSeq2::productiveSeq(stable, aggregate = \"junction_aa\") ctable <- LymphoSeq2::cloneTrack(study_table = atable,                                 sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\")) LymphoSeq2::plotTrack(ctable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight clones — plotTrackSingular","title":"Highlight clones — plotTrackSingular","text":"Create alluvial plots highlighting sequence amino acid list","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight clones — plotTrackSingular","text":"","code":"plotTrackSingular(ctable)  highlightPlot(aseq, ctable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight clones — plotTrackSingular","text":"ctable tibble productive amino acid sequences highlight generated LymphoSeq function cloneTrack aseq CDR3 amino acid sequence highlight","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight clones — plotTrackSingular","text":"list alluvial plots highlighting single sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highlight clones — plotTrackSingular","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Highlight clones — plotTrackSingular","text":"highlightPlot: Highligh specific amino acid sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight clones — plotTrackSingular","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- LymphoSeq2::readImmunoSeq(path = file_path) atable <- LymphoSeq2::productiveSeq(stable, aggregate = \"junction_aa\") ctable <- LymphoSeq2::cloneTrack(study_table = atable,                                 sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\"))"},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Productive sequences — productiveSeq","text":"","code":"productiveSeq(study_table, aggregate = \"junction_aa\", prevalence = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Productive sequences — productiveSeq","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. aggregate Indicates whether values \"duplicate_count\", \"duplicate_frequency\", \"esimatedNumberGenomes\" aggregated amino acid junction sequence.  Acceptable values \"junction_aa\" \"junction\".  \"junction_aa\" selected, resulting data frame columns corresponding junction_aa, duplicate_count, duplicate_frequency. \"junction\" selected columns original list present outputted list.  difference output due fact amino acid CDR3 sequence may encoded multiple unique junction sequences differing V, D, J genes. prevalence Boolean value indicating new column added data frames giving prevalence CDR3 amino acid sequence 55 healthy donor peripheral blood samples.  TRUE means column added FALSE means .  Values range 0 100\\ 100\\ Returns list data frames productive amino acid sequences recomputed values \"duplicate_count\", \"duplicate_frequency\". productive sequences defined sequences frame early stop codon. productiveSeq Remove unproductive CDR3 sequences list data frames. file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- readImmunoSeq(path = file_path) atable <- productiveSeq(study_table = stable,                         aggregate = \"junction_aa\",                         prevalence = TRUE)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GLIPH files — readGliph","title":"Read GLIPH files — readGliph","text":"readGliph Imports tab-separated value (.tsv) files generated GLIPH","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GLIPH files — readGliph","text":"","code":"readGliph(gliph_path)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GLIPH files — readGliph","text":"gliph_path Path containing GLIPH convergence group files. file name used repertoire_id output, advisable rename GLIPH files match input TRB file names GLIPH table repertoire table can merged","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GLIPH files — readGliph","text":"Tibble four columns, repertoire_id, gliph count, specificity group junction amino acid sequence. GLIPH file name used repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GLIPH files — readGliph","text":"#' @details files contain three columns, gliph convergence group count, specificity group sequence space separated list junction_aa sequences. function reads files tibble three columns, expanding junction_aa column row tibble corresponds one junction_aa","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GLIPH files — readGliph","text":"","code":"file_path <- base::system.file(\"extdata\", \"TCRB_gliph\", package = \"LymphoSeq2\")  gliph_table <- LymphoSeq2::readGliph(file_path)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ImmunoSeq files — readImmunoSeq","title":"Read ImmunoSeq files — readImmunoSeq","text":"Imports tab-separated value (.tsv) files exported Adaptive Biotechnologies ImmunoSEQ analyzer, BGI IR-SEQ, MiXCR stores MiAIRR compliant tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ImmunoSeq files — readImmunoSeq","text":"","code":"readImmunoSeq(path, recursive = FALSE)  getStandard(clone_file, airr_fields, matching_fields)  readFiles(clone_file, empty_airr_frame, matching_fields, progress)  iReceptorFormat(clone_frame)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ImmunoSeq files — readImmunoSeq","text":"path Path directory containing tab-delimited files.  files extension .tsv imported.  names data frames names files. clone_file .tsv file containing results AIRRSeq pipeline airr_fields character vector MiAIRR headers clone_frame AIRR compliant tibble","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ImmunoSeq files — readImmunoSeq","text":"Returns tibble MiAIRR headers repertoire_id Tibble given data MiAIRR fields Tibble MiAIRR format Tibble iReceptor format","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"get-standard-headers","dir":"Reference","previous_headings":"","what":"Get standard headers","title":"Read ImmunoSeq files — readImmunoSeq","text":"Retrives MiAIRR standard compliant fields clone files","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"read-clone-file-from-path","dir":"Reference","previous_headings":"","what":"Read clone file from path","title":"Read ImmunoSeq files — readImmunoSeq","text":"Given path single AIRRSeq clone file, generate MiAIRR compliant tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"get-ireceptor-standard-format","dir":"Reference","previous_headings":"","what":"Get iReceptor standard format","title":"Read ImmunoSeq files — readImmunoSeq","text":"Returns tibble compliant iReceptor repertoire format.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove sequence — removeSeq","title":"Remove sequence — removeSeq","text":"Removes amino acid sequence associated data instances within list data frames recomputes frequencyCount.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove sequence — removeSeq","text":"","code":"removeSeq(study_table, sequence)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove sequence — removeSeq","text":"study_table list data frames imported using LymphoSeq function readImmunoSeq.  \"aminoAcid\", \"count\", \"frequencyCount\" required columns. sequence character vector one amino acid sequences remove list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove sequence — removeSeq","text":"Returns list data frames like one imported except rows specified amino acid sequence removed.  frequencyCount recalculated.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":null,"dir":"Reference","previous_headings":"","what":"Run iNEXT on repertoire_ids — runINext","title":"Run iNEXT on repertoire_ids — runINext","text":"Given repertoire_id table, generate rarefaction curves estimate repertoire diversity. method used generate rarefaction curve derived Chao et al., (2014) using iNEXT library","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run iNEXT on repertoire_ids — runINext","text":"","code":"runINext(sample_table, color = \"repertoire_id\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run iNEXT on repertoire_ids — runINext","text":"sample_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. color","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run iNEXT on repertoire_ids — runINext","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- readImmunoSeq(path = file_path) atable <- productiveSeq(stable,                          aggregate = \"junction_aa\",                          prevalence = TRUE) atable <- atable %>% dplyr::filter(repertoire_id == \"TRB_Unsorted_1320\") #> Error in atable %>% dplyr::filter(repertoire_id == \"TRB_Unsorted_1320\"): could not find function \"%>%\" rtable <- runINext(atable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"Calculates Bhattacharyya coefficient, Similarity score, Sorensen Index, Percent Similarity Index pairwise comparison list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"","code":"scoringMatrix(productive_table, mode = \"Bhattacharyya\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"productive_table tibble productive sequences generated LymphoSeq function productiveSeq.  \"duplicate_frequency\" \"junction_aa\" required columns. mode mode use calculating pairwise similarity. Can take values \"Bhattacharyya\", \"Similarity\", \"Sorensen\", \"PSI\". Default \"Bhattacharyya\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"data frame Bhattacharyya coefficients, Similarity scores, Sorensen Index, Percent Similarity Index calculated pairwise comparisons list repertoire_id data frames.  metrics measure amount overlap two samples. value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"","code":"searchDB(study_table, credential)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"study_table tibble generated LymphoSeq functions searchPublished topSeqs.  \"aminoAcid\", \"frequencyCount\", \"count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"Returns tibble sample name instance sample published TCR sequence appeared along additional information including disease status, sample type, PubMed ID (PMID) reference sequence characterized.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"","code":"searchIreceptor(...)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"row_tibble row tibble mapped searchDB","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"Returns tibble sample name instance sample published TCR sequence appeared along additional information including disease status, sample type, PubMed ID (PMID) reference sequence characterized.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"","code":"searchPublished(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"study_table tibble generated LymphoSeq functions readImmunoSeq productiveSeq.  \"junction_aa\", \"frequencyCount\", \"count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"Returns data frame repertoire_id name instance repertoire_id published TCR sequence appeared along additional information including antigen specificity, epitope, HLA type, PubMed ID (PMID) reference sequence characterized.  publishedTRB database located separate package called LymphoSeqDB loaded automatically.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for a sequence — searchSeq","title":"Search for a sequence — searchSeq","text":"Search one amino acid junction CDR3 sequences study tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for a sequence — searchSeq","text":"","code":"searchSeq(   study_table,   sequence,   seq_type = \"junction\",   edit_distance = 0,   match = \"global\" )  findSeq(sequence, query_list, edit_distance, seq_type, match)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for a sequence — searchSeq","text":"study_table tibble generated LymphoSeq2 functions readImmunoSeq productiveSeq.  \"junction_aa\" \"junction\", \"duplicate_frequency\", \"duplicate_count\" required columns. sequence character vector one ore amino acid junction CDR3 sequences search. seq_type character vector specifying type sequence(s) searched.  Available options \"junction_aa\" \"junction\". edit_distance integer giving minimum edit distance sequence must less equal .  See details . match string indicating type sequence matching perform. Acceptable values \"global\" \"partial\". See details .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for a sequence — searchSeq","text":"Returns rows every instance list data frames searched sequence(s) appeared.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for a sequence — searchSeq","text":"exact partial match means searched sequence contained within target sequence.  exact global match means searched sequence identical target sequence. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence .  example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Search for a sequence — searchSeq","text":"findSeq: Find sequences edit distance threshold query list","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence matrix — seqMatrix","title":"Sequence matrix — seqMatrix","text":"Creates data frame unique, productive amino acid sequences rows repertoire_id names headers.  value data frame represents frequency sequence appeared repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence matrix — seqMatrix","text":"","code":"seqMatrix(productive_aa, sequences = NULL, by = \"duplicate_frequency\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence matrix — seqMatrix","text":"productive_aa tibble productive amino acid sequences generated LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". sequences character vector amino acid sequences interest.  useful specify output LymphoSeq functions uniqueSeqs topSeqs subsetting \"junction_aa\" column.  See examples . Available options \"duplicate_frequency\" \"duplicate_count\". Default \"duplicate_frequence\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence matrix — seqMatrix","text":"Returns data frame unique, productive amino acid sequences rows \\","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Similarity score — similarityScore","title":"Similarity score — similarityScore","text":"Calculates similarity score two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similarity score — similarityScore","text":"","code":"similarityScore(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similarity score — similarityScore","text":"sample1 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns. sample2 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Similarity score — similarityScore","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorensen index — sorensenIndex","title":"Sorensen index — sorensenIndex","text":"Calculates Sorensen index two groups repertoires. Similar Jaccard index, Sorensen index gives greater weight shared sequences unique sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorensen index — sorensenIndex","text":"","code":"sorensenIndex(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorensen index — sorensenIndex","text":"sample1 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns. sample2 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorensen index — sorensenIndex","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for each repertoire_id in the analysis — summarySeq","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"Get summary statistics repertoire_id analysis","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"","code":"summarySeq(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"sample_table immune repertoire tibble repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"Tibble summarizing sequence information repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Top frequencies — topFreq","title":"Top frequencies — topFreq","text":"Creates data frame top productive amino acid sequences specified minimum frequency threshold reports number samples sequence appears along minimum, maximum, mean frequency across samples.  T cell receptor beta sequences, \\ antigen specificity sequence also provided.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top frequencies — topFreq","text":"","code":"topFreq(productive_table, frequency = 0.1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top frequencies — topFreq","text":"productive_table tibble productive amino acid sequences imported using function LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". frequency minimum frequency sequence appears listed samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top frequencies — topFreq","text":"data frame amino acid sequences number samples sequence appears along minimum, maximum, mean frequency across samples. T cell receptor beta sequences, additionally reported \\ Also provided antigen specificity sequence known comparing database previously reported sequences literature.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Top sequences — topSeqs","title":"Top sequences — topSeqs","text":"Creates tibble selected number top productive sequences study table.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top sequences — topSeqs","text":"","code":"topSeqs(productive_table, top = 1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top sequences — topSeqs","text":"productive_table tibble productive sequences generated LymphoSeq function productiveSeq.  \"duplicate_frequency\" \"junction_aa\" required columns. top number top productive sequences data frame subset frequencies.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top sequences — topSeqs","text":"Returns tibble selected number top productive sequences list data frames.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative frequency bar plot of top sequences — topSeqsPlot","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"Create cumulative frequency bar plot specified number top sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"","code":"topSeqsPlot(study_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"study_table study tibble imported using LymphoSeq function readImmunoSeq productiveSeq. top number top sequences colored bar plot.  , less frequent sequences colored violet.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"Returns cumulative frequency bar plot top sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique sequences — uniqueSeqs","title":"Unique sequences — uniqueSeqs","text":"Aggregates productive sequences within list data frames duplicate_count.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique sequences — uniqueSeqs","text":"","code":"uniqueSeqs(productive_table = productive_table, unique_type = \"junction_aa\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique sequences — uniqueSeqs","text":"productive_table tibble productive amino acid sequences imported using function LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". unique_type Use \"junction_aa\" aggregate amino acid sequences. Use \"junction\" aggregate nucleotide sequences. Default \"junction_aa\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique sequences — uniqueSeqs","text":"data frame unique amino acid sequences list data frames aggregated duplicate_count.","code":""}]
