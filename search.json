[{"path":"https://shashidhar22.github.io/LymphoSeq2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2022). LymphoSeq2: Analyze high-throughput sequencing T B cell receptors. https://github.com/elulu3/LymphoSeq2, https://elulu3.github.io/LymphoSeq2.","code":"@Manual{,   title = {LymphoSeq2: Analyze high-throughput sequencing of T and B cell receptors},   author = {First Last},   year = {2022},   note = {https://github.com/elulu3/LymphoSeq2, https://elulu3.github.io/LymphoSeq2}, }"},{"path":"https://shashidhar22.github.io/LymphoSeq2/index.html","id":"lymphoseq2","dir":"","previous_headings":"","what":"Analyze high-throughput sequencing of T and B cell receptors","title":"Analyze high-throughput sequencing of T and B cell receptors","text":"Adaptive Immune Receptor Repertoire Sequencing (AIRR-seq) provides unique opportunity interrogate adaptive immune repertoire various clinical conditions. utility offered technology quickly garnered interest community clinicians researchers investigating immunological landscapes large spectrum health disease states. LymphoSeq2 toolkit allows users import, manipulate visualize AIRR-Seq data various AIRR-Seq assays Adaptive ImmunoSEQ BGI-IRSeq, support 10X VDJ sequencing coming soon. platform also supports importing AIRR-seq data processed using MiXCR pipeline. LymphoSeq2 builds BioConductor package LymphoSeq introduces tidyverse syntax.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/aggreateSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group productive sequences by repertoire — aggreateSeq","text":"","code":"aggreateSeq(study_table, aggregate, prevalence, progress_bar)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/aggreateSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group productive sequences by repertoire — aggreateSeq","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. aggregate Indicates whether values \"duplicate_count\", \"duplicate_frequency\", \"esimatedNumberGenomes\" aggregated amino acid junction sequence.  Acceptable values \"junction_aa\" \"junction\".  \"junction_aa\" selected, resulting data frame columns corresponding junction_aa, duplicate_count, duplicate_frequency. \"junction\" selected columns original list present outputted list.  difference output due fact amino acid CDR3 sequence may encoded multiple unique junction sequences differing V, D, J genes. prevalence Boolean value indicating new column added data frames giving prevalence CDR3 amino acid sequence 55 healthy donor peripheral blood samples.  TRUE means column added FALSE means .  Values range 0 100\\ 100\\ progress_barProgress progress bar Group productive sequences repertoire","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Align multiple sequences — alignSeq","title":"Align multiple sequences — alignSeq","text":"Perform multiple sequence alignment using one three methods output results console pdf file.  One may perform alignment amino acid junction sequences single repertoire_id.  Alternatively, one may search given sequence within list samples using edit distance threshold.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align multiple sequences — alignSeq","text":"","code":"alignSeq(   study_table,   repertoire_ids = NULL,   sequence_list = NULL,   edit_distance = 15,   type = \"junction\",   method = \"ClustalOmega\",   top = 150 )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align multiple sequences — alignSeq","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq. sequence_list character vector one ore amino acid junction CDR3 sequences search. edit_distance integer giving minimum edit distance sequence must less equal .  See details . type character vector indicating whether \"junction_aa\" \"junction\" sequences aligned.  \"junction_aa\" specified, run productiveSeqs first. method character vector indicating multiple sequence alignment method used.  Refer Bioconductor msa package details.  Options include \"ClustalW\", \"ClustalOmega\", \"Muscle\". top number top sequences perform alignment. repertoire_id character vector indicating name repertoire_id productive sequence list.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align multiple sequences — alignSeq","text":"Performs multiple sequence alignment object.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align multiple sequences — alignSeq","text":"Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence .  example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/alignSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align multiple sequences — alignSeq","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 58 rows [31, 33, 40, 41, 90, 96, 109, 117, 146, 154, 178, 189, 238, 252, 255, 260, 270, 278, 315, 320, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 10 rows [204, 206, 265, 347, 410, 411, 419, 512, 582, 608]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 492 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 3 rows [134, 143, 251]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 209 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 20 rows [4, 27, 34, 37, 52, 53, 55, 69, 81, 87, 88, 90, 95, 108, 111, 131, 151, 158, 160, 200]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 436 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 47 rows [21, 22, 28, 59, 63, 69, 78, 79, 82, 87, 90, 91, 116, 121, 149, 170, 182, 188, 216, 237, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 27 rows [117, 121, 146, 157, 178, 199, 296, 310, 322, 323, 324, 325, 349, 351, 363, 420, 421, 467, 468, 484, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, vAlign... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 85 rows [38, 58, 79, 83, 92, 119, 127, 145, 149, 161, 162, 169, 187, 191, 199, 237, 250, 272, 275, 283, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 275 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (24): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 24 rows [9, 29, 40, 42, 61, 84, 87, 101, 104, 106, 108, 119, 146, 170, 177, 192, 201, 206, 214, 248, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  ntable <- productiveSeq(stable, aggregate = \"junction\")  alignSeq(ntable, repertoire_id = \"IGH_MVQ92552A_BL\", type = \"junction\",           method = \"ClustalW\") #> use default substitution matrix #> CLUSTAL 2.1   #>  #> Call: #>    msa::msa(string_list, method = method) #>  #> MsaDNAMultipleAlignment with 65 rows and 186 columns #>      aln                                                   names #>  [1] -------------------------...CTTTTGATATCTGGGGCCAAGGG-- IGH_MVQ92552A_BL #>  [2] ------------------------G...GTATGGACGTCTGGGGCCAAGGG-- IGH_MVQ92552A_BL #>  [3] ------------------GACAACA...CTTTTGATTTTTGGGGCCAAGGG-- IGH_MVQ92552A_BL #>  [4] ---------------------CGCG...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL #>  [5] ------------------------A...CTTTTGATGTTTGGGGCCAAGGG-- IGH_MVQ92552A_BL #>  [6] -------------------------...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL #>  [7] -------------------------...CTATGGACGTCTGGGGCCAAGGG-- IGH_MVQ92552A_BL #>  [8] -------------------------...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL #>  [9] -------------------------...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL  #>  ... ... #> [58] ------CAGGGTCACCATGACCAGG...----CCTTA-CTGGGGCCAGGGA-- IGH_MVQ92552A_BL #> [59] ---------------CATGACCAGG...----TGACTACTGGGGCCAGGGA-- IGH_MVQ92552A_BL #> [60] ---------------------CGCG...--TTGACCTACTGGGGCCAGGGA-- IGH_MVQ92552A_BL #> [61] -------------------------...GGTTCAGATACTGGGGCCAGGGA-- IGH_MVQ92552A_BL #> [62] ---------------CATCTCCAGA...A--TTGACTACTGGGGCCAGGGA-- IGH_MVQ92552A_BL #> [63] ------------------CTCCAGA...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL #> [64] ----------------------GCC...ACATGGACGTCTGGGGCAAAGGG-- IGH_MVQ92552A_BL #> [65] -------------------------...TGTGCCCCCTAGGAGGCCACACTGG IGH_MVQ92552A_BL #>  Con ------------------------?...?T????AC??CTGGGGCCAGGGA-- Consensus"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Bhattacharyya coefficient — bhattacharyyaCoefficient","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"Calculates Bhattacharyya coefficient two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"","code":"bhattacharyyaCoefficient(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"sample_list list two tibble corresponding derived productiveSeq function LymphoSeq2. duplicate_frequency, junction_aa, repertoire_id columns necessary calcualtion Bhattacharyya coefficient.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/bhattacharyyaCoefficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bhattacharyya coefficient — bhattacharyyaCoefficient","text":"tibble one row three columns sample1, sample2, bhattacharyyaCoefficient","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":null,"dir":"Reference","previous_headings":"","what":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"Creates chord diagram showing VJ DJ gene associations one samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"","code":"chordDiagramVDJ(study_table, association = \"VJ\", colors = c(\"red\", \"blue\"))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"study_table tibble consisting frequencies antigen receptor sequences.  \"v_family\", \"j_family\", applicable, \"d_family\" required columns.  Using output LymphoSeq function topSeqs recommended. association character vector gene families associate.  Options include \"VJ\" \"DJ\". colors character vector 2 colors corresponding V/D J gene colors respectively.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"Returns chord diagram showing VJ DJ gene associations one samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"size ribbons connecting VJ DJ genes correspond number samples number sequences make recombination event.  thicker ribbon, higher frequency recombination.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/chordDiagramVDJ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chord diagram of VJ or DJ gene associations — chordDiagramVDJ","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  ntable <- productiveSeq(stable, aggregate = \"junction\")  top_seqs <- topSeqs(ntable, top = 1)  chordDiagramVDJ(top_seqs, association = \"VJ\", colors = c(\"red\", \"blue\"))"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Clonal relatedness — clonalRelatedness","title":"Clonal relatedness — clonalRelatedness","text":"Calculates clonal relatedness repertoire_id study.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clonal relatedness — clonalRelatedness","text":"","code":"clonalRelatedness(study_table, editDistance = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clonal relatedness — clonalRelatedness","text":"study_table tibble unproductive productive junction sequences productive junction sequences.  Junction duplicate_count required columns. editDistance integer giving minimum edit distance sequence must less equal . See details .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clonal relatedness — clonalRelatedness","text":"Returns tibble calculated clonal relatedness repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clonal relatedness — clonalRelatedness","text":"Clonal relatedness proportion junction sequences related defined edit distance threshold.  value ranges 0 1 0 indicates sequences related 1 indicates sequences related. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence . example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonalRelatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clonal relatedness — clonalRelatedness","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 58 rows [31, 33, 40, 41, 90, 96, 109, 117, 146, 154, 178, 189, 238, 252, 255, 260, 270, 278, 315, 320, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 10 rows [204, 206, 265, 347, 410, 411, 419, 512, 582, 608]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 492 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 3 rows [134, 143, 251]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 209 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 20 rows [4, 27, 34, 37, 52, 53, 55, 69, 81, 87, 88, 90, 95, 108, 111, 131, 151, 158, 160, 200]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 436 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 47 rows [21, 22, 28, 59, 63, 69, 78, 79, 82, 87, 90, 91, 116, 121, 149, 170, 182, 188, 216, 237, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 27 rows [117, 121, 146, 157, 178, 199, 296, 310, 322, 323, 324, 325, 349, 351, 363, 420, 421, 467, 468, 484, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, vAlign... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 85 rows [38, 58, 79, 83, 92, 119, 127, 145, 149, 161, 162, 169, 187, 191, 199, 237, 250, 272, 275, 283, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 275 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (24): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 24 rows [9, 29, 40, 42, 61, 84, 87, 101, 104, 106, 108, 119, 146, 170, 177, 192, 201, 206, 214, 248, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  clonal_relatedness <- clonalRelatedness(stable, editDistance = 10)  # Merge results with clonality table clonality <- clonality(stable) merged <- dplyr::full_join(clonality, clonal_relatedness, by = \"repertoire_id\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":null,"dir":"Reference","previous_headings":"","what":"Clonality — clonality","title":"Clonality — clonality","text":"Creates tibble giving total number sequences, number unique productive sequences, number genomes, entropy, clonality, Gini coefficient, frequency (\\","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clonality — clonality","text":"","code":"clonality(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clonality — clonality","text":"study_table tibble consisting antigen receptor sequencing imported LymphoSeq function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. Note clonality usually calculated productive junction sequences. Therefore, recommended run function using productive sequence list aggregated amino acids.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clonality — clonality","text":"Returns tibble giving total number sequences, number unique productive sequences, number genomes, clonality, Gini coefficient, frequency (\\inverse simpson index, hill diversity index, chao diversity index, kemp diversity index repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clonality — clonality","text":"Clonality derived Shannon entropy, calculated frequencies productive sequences divided logarithm total number unique productive sequences.  normalized entropy value inverted (1 - normalized entropy) produce clonality metric. Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve.  Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads.  line passing origin slope 1 reflects equal frequencies clones. Gini coefficient ratio area line equality observed Lorenz curve total area line equality. Gini coefficient clonality reported scale 0 1 0 indicates sequences frequency 1 indicates repertoire dominated single sequence.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/clonality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clonality — clonality","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  clonality(stable) #> # A tibble: 10 × 12 #>    repertoire_id     total_sequences unique_productive_se… total_count clonality #>    <chr>                       <int>                 <int>       <dbl>     <dbl> #>  1 TRB_CD4_949                  1000                   845       25769     0.443 #>  2 TRB_CD8_949                  1000                   794       26239     0.431 #>  3 TRB_CD8_CMV_369               414                   281        1794     0.332 #>  4 TRB_Unsorted_0               1000                   838       18161     0.281 #>  5 TRB_Unsorted_1320            1000                   838      178190     0.422 #>  6 TRB_Unsorted_1496            1000                   832       33669     0.389 #>  7 TRB_Unsorted_32               920                   767       31078     0.134 #>  8 TRB_Unsorted_369             1000                   830      339413     0.426 #>  9 TRB_Unsorted_83              1000                   823      236732     0.338 #> 10 TRB_Unsorted_949             1000                   831        6549     0.306 #> # … with 7 more variables: simpson_index <dbl>, inverse_simpson <dbl>, #> #   gini_coefficient <dbl>, top_productive_sequence <dbl>, chao_estimate <dbl>, #> #   kemp_estimate <dbl>, hill_estimate <dbl>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone tracking plot — cloneTrack","title":"Clone tracking plot — cloneTrack","text":"Creates line plot tracking amino acid frequencies across multiple samples","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone tracking plot — cloneTrack","text":"","code":"cloneTrack(   study_table,   sample_list = NULL,   sequence_track = NULL,   unassigned = TRUE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone tracking plot — cloneTrack","text":"study_table tibble productive amino acid sequences generated LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\" sample_list character vector one repertoire_ids track. set NULL (default), repertoire_ids sequence matrix tracked. sequence_track optional character vector one amino acid sequences track. set NULL (default), pull junction_aa sequences sequence matrix. unassigned","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone tracking plot — cloneTrack","text":"Returns line plot showing amino acid frequencies across multiple samples sequence matrix line represents one unique sequence.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clone tracking plot — cloneTrack","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/cloneTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone tracking plot — cloneTrack","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  top_freq <- topFreq(atable, frequency = 0.001) #> Error in is.data.frame(y): object 'LymphoSeq2revalenceTRB' not found  # Track clones without mapping or tracking specific sequences cloneTrack(atable) #> # A tibble: 7,533 × 12 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAIKPGQGASNSPL… TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #>  2 TRB_CD4_949   CAIRAGTSTDTQYF  TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ02  #>  3 TRB_CD4_949   CAISDETPGELFF   TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ02  #>  4 TRB_CD4_949   CAISDLGRGDTEAFF TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #>  5 TRB_CD4_949   CAISDLKEQPQHF   TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ01  #>  6 TRB_CD4_949   CAISDQGGDQPQHF  TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ01  #>  7 TRB_CD4_949   CAISEREQGAFF    TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #>  8 TRB_CD4_949   CAISEWSGSSYNEQ… TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ02  #>  9 TRB_CD4_949   CAISGQGSTEAFF   TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #> 10 TRB_CD4_949   CAISLNSGGAYEQYF TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ02  #> # … with 7,523 more rows, and 4 more variables: reading_frame <chr>, #> #   duplicate_count <dbl>, duplicate_frequency <dbl>, seen <int>  # Track top 20 clones mapping to the CD4 and CD8 samples cloneTrack(atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),    sequence_track = top_freq$junction_aa[1:20], unassigned = TRUE)  #> Error in cloneTrack(atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),     sequence_track = top_freq$junction_aa[1:20], unassigned = TRUE): object 'top_freq' not found  # Track the top 10 clones from top.freq cloneTrack(study_table = atable, sequence_track = top_freq$junction_aa[1:10],             unassigned = FALSE)  #> Error in cloneTrack(study_table = atable, sequence_track = top_freq$junction_aa[1:10],     unassigned = FALSE): object 'top_freq' not found  # Track clones mapping to the CD4 and CD8 samples while ignoring all others cloneTrack(study_table = atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),    unassigned = FALSE)  #> # A tibble: 1,607 × 12 #>    repertoire_id junction_aa     v_call d_call j_call v_family d_family j_family #>    <chr>         <chr>           <chr>  <chr>  <chr>  <chr>    <chr>    <chr>    #>  1 TRB_CD4_949   CAIKPGQGASNSPL… TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #>  2 TRB_CD4_949   CAIRAGTSTDTQYF  TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ02  #>  3 TRB_CD4_949   CAISDETPGELFF   TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ02  #>  4 TRB_CD4_949   CAISDLGRGDTEAFF TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #>  5 TRB_CD4_949   CAISDLKEQPQHF   TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ01  #>  6 TRB_CD4_949   CAISDQGGDQPQHF  TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ01  #>  7 TRB_CD4_949   CAISEREQGAFF    TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #>  8 TRB_CD4_949   CAISEWSGSSYNEQ… TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ02  #>  9 TRB_CD4_949   CAISGQGSTEAFF   TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD01  TCRBJ01  #> 10 TRB_CD4_949   CAISLNSGGAYEQYF TCRBV… TCRBD… TCRBJ… TCRBV10  TCRBD02  TCRBJ02  #> # … with 1,597 more rows, and 4 more variables: reading_frame <chr>, #> #   duplicate_count <dbl>, duplicate_frequency <dbl>, seen <int>  # Track clones mapping to the CD4 and CD8 samples and track 2 specific sequences cloneTrack(study_table = atable, sample_list = c(\"TRB_CD4_949\", \"TRB_CD8_949\"),    sequence_track = c(\"CASSPPTGERDTQYF\", \"CASSQDRTGQYGYTF\"), unassigned = FALSE) #> # A tibble: 2 × 12 #>   repertoire_id junction_aa     v_call  d_call j_call v_family d_family j_family #>   <chr>         <chr>           <chr>   <chr>  <chr>  <chr>    <chr>    <chr>    #> 1 TRB_CD8_949   CASSPPTGERDTQYF TCRBV0… TCRBD… TCRBJ… TCRBV07  TCRBD02  TCRBJ02  #> 2 TRB_CD8_949   CASSQDRTGQYGYTF TCRBV0… TCRBD… TCRBJ… TCRBV04  TCRBD01  TCRBJ01  #> # … with 4 more variables: reading_frame <chr>, duplicate_count <dbl>, #> #   duplicate_frequency <dbl>, seen <int>"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences in two or more repertoire_ids — commonSeqs","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"Creates data frame common sequences two repertoire_ids, reporting frequencies .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"","code":"commonSeqs(study_table, repertoire_ids = NULL)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"study_table list productive amino acid sequences generated LymphoSeq function productiveSeq aggregate = \"junction_aa\". repertoire_ids character vector two repertoire_id names productive.aa.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"Returns data frame common sequences two files displaying frequencies .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences in two or more repertoire_ids — commonSeqs","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  commonSeqs(repertoire_ids = c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\"),    study_table = atable) #> # A tibble: 4 × 3 #>   junction_aa     TRB_Unsorted_0 TRB_Unsorted_32 #>   <chr>                    <dbl>           <dbl> #> 1 CAISEGNYGYTF          0.000351        0.00187  #> 2 CASSFGIQETQYF         0.000140        0.000957 #> 3 CASSQDRTGQYGYTF       0.00471         0.00806  #> 4 CAWTGGTTEAFF          0.00105         0.00152"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences bar plot — commonSeqsBar","title":"Common sequences bar plot — commonSeqsBar","text":"Creates UpSetR bar plot showing number intersecting sequences across multiple repertoire_ids.  function useful 3 repertoire_ids compared.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences bar plot — commonSeqsBar","text":"","code":"commonSeqsBar(   productive_aa,   repertoire_ids,   color_sample = NULL,   color_intersection = NULL,   color = \"#377eb8\",   labels = \"no\" )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences bar plot — commonSeqsBar","text":"productive_aa tibble productive amino acid sequences generated LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". repertoire_ids names two repertoire_ids productive_aa list whose intersections shown. color_sample name single repertoire_id productive_aa list whose sequences colored repertoire_ids appear . color_intersection names two repertoire_ids productive_aa list whose intersections colored. color character vector color name used highlight selected repertoire_id multiple repertoire_id intersections. labels character vector indicating whether number intersecting sequences shown tops bars.  Options include \"yes\" \"\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences bar plot — commonSeqsBar","text":"Returns UpSetR bar plot showing number intersecting sequences across multiple repertoire_ids.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences bar plot — commonSeqsBar","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(stable, aggregate = \"junction_aa\")  commonSeqsBar(atable, repertoire_ids = c(\"TRB_CD4_949\", \"TRB_CD8_949\", \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"), color_sample = \"TRB_CD8_949\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences plot — commonSeqsPlot","title":"Common sequences plot — commonSeqsPlot","text":"Creates scatter plot just sequences common two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences plot — commonSeqsPlot","text":"","code":"commonSeqsPlot(sample1, sample2, productive_aa, show = \"common\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences plot — commonSeqsPlot","text":"sample1 name repertoire_id list data frames generated LymphoSeq function productiveSeq. sample2 name repertoire_id list data frames generated LymphoSeq function productiveSeq. productive_aa tibble productive amino acid sequences produced LymphoSeq function productiveSeq containing samples compared. show character vector specifying whether common sequences shown sequences.  Available options \"common\" \"\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences plot — commonSeqsPlot","text":"Returns frequency scatter plot two samples showing shared sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Common sequences plot — commonSeqsPlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences plot — commonSeqsPlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",     productive_aa = atable)   # Change the X and Y axis to log-10 scale commonSeqsPlot(\"TRB_Unsorted_32\", \"TRB_Unsorted_83\",     productive_aa = atable) +    ggplot2::scale_x_log10() +     ggplot2::scale_y_log10() +     ggplot2::annotation_logticks(sides = \"bl\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":null,"dir":"Reference","previous_headings":"","what":"Common sequences Venn diagram — commonSeqsVenn","title":"Common sequences Venn diagram — commonSeqsVenn","text":"Creates Venn diagram comparing number common sequences two three repertoire_ids.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common sequences Venn diagram — commonSeqsVenn","text":"","code":"commonSeqsVenn(repertoire_ids, productive_aa)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common sequences Venn diagram — commonSeqsVenn","text":"repertoire_ids character vector two three names repertoire_ids productiveSeq table compare. productive_aa tibble amino acid sequences generated LymphoSeq function productiveSeq.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common sequences Venn diagram — commonSeqsVenn","text":"Returns Venn diagram number common sequences two three repertoire_ids.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/commonSeqsVenn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Common sequences Venn diagram — commonSeqsVenn","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  # Plot a triple Venn diagram commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\",     \"TRB_Unsorted_32\", \"TRB_Unsorted_83\"),     productive_aa = atable)   # Plot a double Venn diagram commonSeqsVenn(repertoire_ids = c(\"TRB_Unsorted_0\",     \"TRB_Unsorted_32\"), productive_aa = atable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Find kmers and its counts — countKmer","title":"Find kmers and its counts — countKmer","text":"Calculate counts kmers query nucleotide sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find kmers and its counts — countKmer","text":"","code":"countKmer(study_table, k)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find kmers and its counts — countKmer","text":"study_table tibble outputed readImmunoSeq function. k length kmers.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find kmers and its counts — countKmer","text":"tibble two columns: kmers respective count.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/countKmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find kmers and its counts — countKmer","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  countKmer(study_table = stable, k = 5) #> # A tibble: 1,024 × 2 #>    Kmer  Count #>    <chr> <int> #>  1 AAAAA   591 #>  2 AAAAC   610 #>  3 AAAAG   497 #>  4 AAAAT    34 #>  5 AAACA  1055 #>  6 AAACC    97 #>  7 AAACG    61 #>  8 AAACT   581 #>  9 AAAGA   538 #> 10 AAAGC   582 #> # … with 1,014 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential abundance analysis — differentialAbundance","title":"Differential abundance analysis — differentialAbundance","text":"Use Fisher exact test calculate differential abdunance sequence two samples reports log2 transformed fold change, P value adjusted P value.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential abundance analysis — differentialAbundance","text":"","code":"differentialAbundance(   study_table,   repertoire_ids = NULL,   abundance = \"duplicate_count\",   type = \"junction_aa\",   q = 1,   zero = 1,   parallel = FALSE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential abundance analysis — differentialAbundance","text":"study_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq. repertoire_ids character vector two repertoire_ids study_table compared. NULL, first two repertoire_ids study_table used. abundance input value Fisher exact test.  \"duplicate_count\" recommend \"duplicate_count\" may also used. type character vector indicating whether \"junction_aa\" \"junction\" sequences used.  \"junction_aa\" specified, run productiveSeqs first. q numeric value 0.0 1.0 indicating threshold Holms adjusted P value (also knowns false discovery rate q value) subset results . sequences q value greater value shown. zero numeric value set zero values calculating log2 transformed fold change samples 1 2.  apply p q value calculations. parallel boolean indicating wheter parallel processing used .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential abundance analysis — differentialAbundance","text":"Returns data frame columns corresponding frequency abudance measure samples 1 2, P value, Q value (Holms adjusted P value, also knowns false discovery rate), log2 transformed fold change.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/differentialAbundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential abundance analysis — differentialAbundance","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  differentialAbundance(study_table = atable, repertoire_ids = c(\"TRB_Unsorted_949\", \"TRB_Unsorted_1320\"),                        type = \"junction_aa\", q = 0.01, zero = 0.001) #> # A tibble: 1,332 × 6 #>    junction_aa       TRB_Unsorted_949 TRB_Unsorted_1320        p       q    l2fc #>    <chr>                        <dbl>             <dbl>    <dbl>   <dbl>   <dbl> #>  1 CACALGDGYTF                      0                 2  1   e+0 1   e+0 -Inf    #>  2 CACQRTGSSYEQYF                   0                 3  1   e+0 1   e+0 -Inf    #>  3 CAIGLSNQPQHF                     2                67  1   e+0 1   e+0   -5.07 #>  4 CAIKMETPNGEQYF                  29               326  2.66e-5 2.66e-5   -3.49 #>  5 CAIRGTEDNNSPLHF                  0                16  1   e+0 1   e+0 -Inf    #>  6 CAISDSSYEQYF                     1                23  5.71e-1 5.71e-1   -4.52 #>  7 CAISDTGELFF                      8                83  1.39e-2 1.39e-2   -3.38 #>  8 CAISEFGLMAREYGYTF                0                 1  1   e+0 1   e+0 -Inf    #>  9 CAISEGQGVKPQHF                   0               167  4.92e-3 4.92e-3 -Inf    #> 10 CAISESGVLNEKLFF                 13               150  4.69e-3 4.69e-3   -3.53 #> # … with 1,322 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Export sequences in fasta format — exportFasta","title":"Export sequences in fasta format — exportFasta","text":"Export junction amino acid sequences fasta format.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export sequences in fasta format — exportFasta","text":"","code":"exportFasta(   study_table,   type = \"junction\",   names = c(\"rank\", \"junction_aa\", \"duplicate_count\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export sequences in fasta format — exportFasta","text":"type character vector indicating whether \"junction_aa\" \"junction\" sequences exported.  \"junction_aa\" specified, run productiveSeqs first. names character vector one column names name sequences. \"rank\" specified, rank order sequences frequency used. sample_table tibble consisting antigen receptor sequences imported LymphoSeq function readImmunoSeq.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export sequences in fasta format — exportFasta","text":"Exports fasta files working directory.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/exportFasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export sequences in fasta format — exportFasta","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  exportFasta(study_table = stable, type = \"junction\", names = c(\"junction_aa\", \"duplicate_count\")) #> Fasta files saved to /tmp/RtmpigwbNP/fileb5ed2ec711fc/reference  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  exportFasta(study_table = atable, type = \"junction_aa\", names = \"duplicate_frequency\") #> Fasta files saved to /tmp/RtmpigwbNP/fileb5ed2ec711fc/reference"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene frequencies — geneFreq","title":"Gene frequencies — geneFreq","text":"Creates data frame VDJ gene counts frequencies.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene frequencies — geneFreq","text":"","code":"geneFreq(productive_nt, locus = \"V|D|J\", family = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene frequencies — geneFreq","text":"productive_nt tibble productive sequences generated LymphoSeq function productiveSeq parameter aggregate set \"nucleotide\". locus character vector indicating VDJ genes include output.  Available options include \"VDJ\", \"DJ\", \"VJ\", \"DJ\", \"V\", \"D\", \"J\". family Boolean value indicating whether family names instead gene names used.  TRUE, family names used FALSE, gene names used.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene frequencies — geneFreq","text":"Returns data frame repertoire_id names, VDJ gene name, duplicate_count, \\100\\","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/geneFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene frequencies — geneFreq","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  ntable <- productiveSeq(study_table = stable, aggregate = \"nucleotide\")  geneFreq(ntable, locus = \"VDJ\", family = FALSE) #> # A tibble: 655 × 5 #>    repertoire_id gene_name     duplicate_count gene_type gene_frequency #>    <chr>         <chr>                   <dbl> <chr>              <dbl> #>  1 TRB_CD4_949   NA                      11177 d_call            0.303  #>  2 TRB_CD4_949   TCRBD01-01               3034 d_call            0.0822 #>  3 TRB_CD4_949   TCRBD01-01*01           14087 d_call            0.382  #>  4 TRB_CD4_949   TCRBD02-01                597 d_call            0.0162 #>  5 TRB_CD4_949   TCRBD02-01*01             760 d_call            0.0206 #>  6 TRB_CD4_949   TCRBD02-01*02            7258 d_call            0.197  #>  7 TRB_CD4_949   TCRBJ01-01*01            5168 j_call            0.201  #>  8 TRB_CD4_949   TCRBJ01-02*01            1229 j_call            0.0477 #>  9 TRB_CD4_949   TCRBJ01-03*01            2348 j_call            0.0911 #> 10 TRB_CD4_949   TCRBJ01-04*01             590 j_call            0.0229 #> # … with 645 more rows"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Group productive sequences by repertoire — getGliphTable","title":"Group productive sequences by repertoire — getGliphTable","text":"Group productive sequences repertoire","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group productive sequences by repertoire — getGliphTable","text":"","code":"getGliphTable(gliph_path, progress_bar)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getGliphTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group productive sequences by repertoire — getGliphTable","text":"gliph_path Path individual GLIPH file progress_bar Progress bar variable","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Lorenz curve — getLorenz","title":"Calculate Lorenz curve — getLorenz","text":"Calculate Lorenz curve derived frequency amino acid sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Lorenz curve — getLorenz","text":"","code":"getLorenz(sample_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Lorenz curve — getLorenz","text":"sample_table tibble single repertoire_id generated using LymphoSeq function readImmunoSeq productiveSeq.  \"duplicate_frequency\" required column.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getLorenz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Lorenz curve — getLorenz","text":"Returns Lorenz curve tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relatedness — getRelatedness","title":"Calculate relatedness — getRelatedness","text":"Calculates clonal relatedness repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relatedness — getRelatedness","text":"","code":"getRelatedness(sample_table, editDistance = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/getRelatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relatedness — getRelatedness","text":"sample_table tibble unproductive productive junction sequences productive junction sequences.  junction duplicate_count required columns. editDistance integer giving minimum edit distance sequence must less equal . See details .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Lorenz curve — lorenzCurve","title":"Lorenz curve — lorenzCurve","text":"Plots Lorenz curve derived frequency amino acid sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lorenz curve — lorenzCurve","text":"","code":"lorenzCurve(repertoire_ids, study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lorenz curve — lorenzCurve","text":"repertoire_ids character vector repertoire_id names list. study_table tibble generated using LymphoSeq function readImmunoSeq productiveSeq.  \"duplicate_frequency\" required column.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lorenz curve — lorenzCurve","text":"Returns Lorenz curve.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lorenz curve — lorenzCurve","text":"Gini coefficient alternative metric used calculate repertoire diversity derived Lorenz curve.  Lorenz curve drawn x-axis represents cumulative percentage unique sequences y-axis represents cumulative percentage reads.  line passing origin slope 1 reflects equal frequencies sequences.  Gini coefficient ratio area line equality observed Lorenz curve total area line equality. plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/lorenzCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lorenz curve — lorenzCurve","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  repertoire_ids <- stable %>% dplyr::pull(repertoire_id) %>% unique() #> Error in stable %>% dplyr::pull(repertoire_id) %>% unique(): could not find function \"%>%\"  lorenzCurve(repertoire_ids = repertoire_ids, study_table = stable) #> Error in .approxfun(x, y, v, method, yleft, yright, f, na.rm): object 'repertoire_ids' not found  atable <- productiveSeq(study_table = stable, aggregate = \"junction_aa\")  repertoire_ids <- atable %>% dplyr::pull(repertoire_id) %>% unique() #> Error in atable %>% dplyr::pull(repertoire_id) %>% unique(): could not find function \"%>%\"  lorenzCurve(repertoire_ids = repertoire_ids, study_table = atable) #> Error in .approxfun(x, y, v, method, yleft, yright, f, na.rm): object 'repertoire_ids' not found  # Change the legend labels, line colors, and add a title repertoire_ids <- c(\"TRB_Unsorted_0\", \"TRB_Unsorted_32\",     \"TRB_Unsorted_83\", \"TRB_Unsorted_949\", \"TRB_Unsorted_1320\")  lorenz_curve <- lorenzCurve(repertoire_ids = repertoire_ids, study_table = atable)  labels <- c(\"Day 0\", \"Day 32\", \"Day 83\", \"Day 949\", \"Day 1320\")  colors <- c(\"navyblue\", \"red\", \"darkgreen\", \"orange\", \"purple\",              \"yellow\", \"pink\", \"lightgreen\", \"cyan\", \"maroon\")  lorenz_curve +  ggplot2::scale_color_manual(name = \"repertoire_ids\",                              breaks = repertoire_ids,                              labels = labels, values = colors) +  ggplot2::ggtitle(\"Figure Title\") #> Scale for 'colour' is already present. Adding another scale for 'colour', #> which will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison plot — pairwisePlot","title":"Pairwise comparison plot — pairwisePlot","text":"Creates heat map Bhattacharyya, Similarity, Sorensen, PSI matrix.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison plot — pairwisePlot","text":"","code":"pairwisePlot(matrix)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison plot — pairwisePlot","text":"matrix Bhattacharyya, Similarity, Sorensen, PSI matrix produced LymphoSeq2 scoringMatrix function.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise comparison plot — pairwisePlot","text":"pairwise comparison heat map.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pairwise comparison plot — pairwisePlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/pairwisePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise comparison plot — pairwisePlot","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  atable <- productiveSeq(stable, aggregate = \"junction_aa\")  similarity_matrix <- scoringMatrix(productive_table = atable, mode=\"Similarity\")  pairwisePlot(matrix = similarity_matrix)   bhattacharyya_matrix <- scoringMatrix(productive_table = atable, mode=\"Bhattacharyya\")  pairwisePlot(matrix = bhattacharyya_matrix)   # Change plot color, title legend, and add title pairwisePlot(matrix = similarity_matrix) +  ggplot2::scale_fill_gradient(low = \"#deebf7\", high = \"#3182bd\") +  ggplot2::labs(fill = \"Similarity score\") +  ggplot2::ggtitle(\"Figure Title\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent similarity index — percentSI","title":"Percent similarity index — percentSI","text":"Calculates Percent similarity index two groups repertoires. Percent similarity index, compares number similar dissimilar species present two sites, also incorporate abundance.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent similarity index — percentSI","text":"","code":"percentSI(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent similarity index — percentSI","text":"sample1 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns. sample2 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/percentSI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percent similarity index — percentSI","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create phylogenetic tree — phyloTree","title":"Create phylogenetic tree — phyloTree","text":"Create phylogenetic tree using neighbor joining tree estimation amino acid junction CDR3 sequences list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create phylogenetic tree — phyloTree","text":"","code":"phyloTree(   study_table,   repertoire_ids,   type = \"junction\",   layout = \"rectangular\",   label = TRUE )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create phylogenetic tree — phyloTree","text":"study_table tibble unproductive junction sequences productive junction sequences generated LymphoSeq function productiveSeq. v_family, d_family, j_family, duplicate_count required columns. repertoire_ids character vector indicating name repertoire_id study table. type character vector indicating whether \"junction_aa\" \"junction\" sequences compared. layout character vector indicating tree layout.  Options include \"rectangular\", \"slanted\", \"fan\", \"circular\", \"radial\" \"unrooted\". label Boolean indicating sequencing duplicate_count shown next leaves.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create phylogenetic tree — phyloTree","text":"Returns phylogenetic tree leaf represents sequence color coded V, D, J gene usage.  number next leaf refers sequence duplicate_count.  triangle shaped leaf indicates dominant sequence.  Refer ggtree Bioconductor package documentation details manipulate tree.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/phyloTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create phylogenetic tree — phyloTree","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 58 rows [31, 33, 40, 41, 90, 96, 109, 117, 146, 154, 178, 189, 238, 252, 255, 260, 270, 278, 315, 320, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 10 rows [204, 206, 265, 347, 410, 411, 419, 512, 582, 608]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 492 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 3 rows [134, 143, 251]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 209 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 20 rows [4, 27, 34, 37, 52, 53, 55, 69, 81, 87, 88, 90, 95, 108, 111, 131, 151, 158, 160, 200]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 436 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 47 rows [21, 22, 28, 59, 63, 69, 78, 79, 82, 87, 90, 91, 116, 121, 149, 170, 182, 188, 216, 237, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 27 rows [117, 121, 146, 157, 178, 199, 296, 310, 322, 323, 324, 325, 349, 351, 363, 420, 421, 467, 468, 484, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, vAlign... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 85 rows [38, 58, 79, 83, 92, 119, 127, 145, 149, 161, 162, 169, 187, 191, 199, 237, 250, 272, 275, 283, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 275 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (24): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 24 rows [9, 29, 40, 42, 61, 84, 87, 101, 104, 106, 108, 119, 146, 170, 177, 192, 201, 206, 214, 248, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  ntable <- productiveSeq(study_table = stable, aggregate = \"junction\")  phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction\",           layout = \"rectangular\") #> Found more than one class \"phylo\" in cache; using the first, from namespace 'phyloseq' #> Also defined by ‘tidytree’ #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead.   phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction_aa\",           layout = \"circular\") #> Found more than one class \"phylo\" in cache; using the first, from namespace 'phyloseq' #> Also defined by ‘tidytree’ #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead.            # Add scale and title to figure phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction_aa\",           layout = \"rectangular\") +          ggtree::theme_tree2() +          ggplot2::theme(legend.position = \"right\", legend.key = ggplot2::element_rect(colour = \"white\")) +          ggplot2::ggtitle(\"Title\") #> Found more than one class \"phylo\" in cache; using the first, from namespace 'phyloseq' #> Also defined by ‘tidytree’ #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead.            # Hide legend and leaf labels phyloTree(study_table = ntable, repertoire_ids = \"IGH_MVQ92552A_BL\", type = \"junction\",           layout = \"rectangular\", label = FALSE) +          ggplot2::theme(legend.position=\"none\") #> Found more than one class \"phylo\" in cache; using the first, from namespace 'phyloseq' #> Also defined by ‘tidytree’ #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"Generate MSA alignment figures results alignSeq","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"","code":"plotAlignment(msa)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"msa msa object obtained alignSeq function LymphoSeq2.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"Multiple sequence alignment plot.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotAlignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize multiple sequence alignment of CDR3 sequences — plotAlignment","text":"","code":"file_path <- system.file(\"extdata\", \"IGH_sequencing\", package = \"LymphoSeq2\")  stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 58 rows [31, 33, 40, 41, 90, 96, 109, 117, 146, 154, 178, 189, 238, 252, 255, 260, 270, 278, 315, 320, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFun... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 41 rows [14, 15, 33, 36, 48, 78, 119, 123, 130, 135, 149, 167, 176, 190, 198, 210, 245, 247, 250, 262, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 694 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 10 rows [204, 206, 265, 347, 410, 411, 419, 512, 582, 608]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 492 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 3 rows [134, 143, 251]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 209 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 20 rows [4, 27, 34, 37, 52, 53, 55, 69, 81, 87, 88, 90, 95, 108, 111, 131, 151, 158, 160, 200]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 436 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (25): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction, dFunction, ... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 47 rows [21, 22, 28, 59, 63, 69, 78, 79, 82, 87, 90, 91, 116, 121, 149, 170, 182, 188, 216, 237, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (17): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (9): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, fracti... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 27 rows [117, 121, 146, 157, 178, 199, 296, 310, 322, 323, 324, 325, 349, 351, 363, 420, 421, 467, 468, 484, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (26): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl  (8): vOrphon, dOrphon, jOrphon, vFunction, dFunction, jFunction, vAlign... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 85 rows [38, 58, 79, 83, 92, 119, 127, 145, 149, 161, 162, 169, 187, 191, 199, 237, 250, 272, 275, 283, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 275 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (24): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (18): count (reads), frequencyCount (%), cdr3Length, vDeletion, n1Insert... #> lgl (10): vFamilyTies, jGeneAlleleTies, vOrphon, dOrphon, jOrphon, vFunction... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Warning: Expected 2 pieces. Additional pieces discarded in 24 rows [9, 29, 40, 42, 61, 84, 87, 101, 104, 106, 108, 119, 146, 170, 177, 192, 201, 206, 214, 248, ...]. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")  ntable <- productiveSeq(stable, aggregate = \"junction\")  msa <- alignSeq(ntable, repertoire_id = \"IGH_MVQ92552A_BL\", type = \"junction\",           method = \"ClustalW\") #> use default substitution matrix"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"Given study table, sample plot rarefaction curves estimate repertoire diversity. method used generate rarefaction curve derived Chao et al., (2014) using iNEXT library","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"","code":"plotRarefactionCurve(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"aminoAcid\", \"count\", \"frequencyCount\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotRarefactionCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rarefication and extrapolation curves for samples — plotRarefactionCurve","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clone — plotTrack","title":"Plot clone — plotTrack","text":"Creates alluvial tracking amino acid frequencies across multiple samples","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clone — plotTrack","text":"","code":"plotTrack(   clone_table,   alist = NULL,   apal = NULL,   breaks = 2,   alphas = 0,   breaks_pal = c(\"#7fc97f\", \"#beaed4\") )"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clone — plotTrack","text":"clone_table tibble productive amino acid sequences generated LymphoSeq function cloneTrack alist optional list amino acid, list provided sequences highlighted apal optional list palatte colors used amino acids highlighted breaks Add additional band behind alluvial plot highligh group, specificies bar break appear alphas Set alpha band breaks_pal Specify palette bands","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clone — plotTrack","text":"alluvial diagram tracking particular clone across samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot clone — plotTrack","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clone — plotTrack","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- LymphoSeq2::readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") atable <- LymphoSeq2::productiveSeq(stable, aggregate = \"junction_aa\") ctable <- LymphoSeq2::cloneTrack(study_table = atable,                                 sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\")) LymphoSeq2::plotTrack(ctable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight clones — plotTrackSingular","title":"Highlight clones — plotTrackSingular","text":"Create alluvial plots highlighting sequence amino acid list","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight clones — plotTrackSingular","text":"","code":"plotTrackSingular(ctable)  highlightPlot(aseq, ctable)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight clones — plotTrackSingular","text":"ctable tibble productive amino acid sequences highlight generated LymphoSeq function cloneTrack aseq CDR3 amino acid sequence highlight","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight clones — plotTrackSingular","text":"list alluvial plots highlighting single sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highlight clones — plotTrackSingular","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Highlight clones — plotTrackSingular","text":"highlightPlot: Highligh specific amino acid sequence","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/plotTrackSingular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight clones — plotTrackSingular","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- LymphoSeq2::readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") atable <- LymphoSeq2::productiveSeq(stable, aggregate = \"junction_aa\") ctable <- LymphoSeq2::cloneTrack(study_table = atable,                                 sample_list = c(\"TRB_CD8_949\", \"TRB_CD8_CMV_369\"))"},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Productive sequences — productiveSeq","text":"","code":"productiveSeq(study_table, aggregate = \"junction_aa\", prevalence = FALSE)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/productiveSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Productive sequences — productiveSeq","text":"study_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. aggregate Indicates whether values \"duplicate_count\", \"duplicate_frequency\", \"esimatedNumberGenomes\" aggregated amino acid junction sequence.  Acceptable values \"junction_aa\" \"junction\".  \"junction_aa\" selected, resulting data frame columns corresponding junction_aa, duplicate_count, duplicate_frequency. \"junction\" selected columns original list present outputted list.  difference output due fact amino acid CDR3 sequence may encoded multiple unique junction sequences differing V, D, J genes. prevalence Boolean value indicating new column added data frames giving prevalence CDR3 amino acid sequence 55 healthy donor peripheral blood samples.  TRUE means column added FALSE means .  Values range 0 100\\ 100\\ Returns list data frames productive amino acid sequences recomputed values \"duplicate_count\", \"duplicate_frequency\". productive sequences defined sequences frame early stop codon.  productiveSeq Remove unproductive CDR3 sequences list data frames.  file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- readImmunoSeq(path = file_path) atable <- productiveSeq(study_table = stable,                         aggregate = \"junction_aa\",                         prevalence = TRUE)","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GLIPH files — readGliph","title":"Read GLIPH files — readGliph","text":"readGliph Imports tab-separated value (.tsv) files generated GLIPH","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GLIPH files — readGliph","text":"","code":"readGliph(gliph_path)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GLIPH files — readGliph","text":"gliph_path Path containing GLIPH convergence group files. file name used repertoire_id output, advisable rename GLIPH files match input TRB file names GLIPH table repertoire table can merged","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GLIPH files — readGliph","text":"Tibble four columns, repertoire_id, gliph count, specificity group junction amino acid sequence. GLIPH file name used repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read GLIPH files — readGliph","text":"#' @details files contain three columns, gliph convergence group count, specificity group sequence space separated list junction_aa sequences. function reads files tibble three columns, expanding junction_aa column row tibble corresponds one junction_aa","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readGliph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GLIPH files — readGliph","text":"","code":"file_path <- base::system.file(\"extdata\", \"TCRB_gliph\", package = \"LymphoSeq2\")  gliph_table <- LymphoSeq2::readGliph(file_path)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ImmunoSeq files — readImmunoSeq","title":"Read ImmunoSeq files — readImmunoSeq","text":"Imports tab-separated value (.tsv) files exported Adaptive Biotechnologies ImmunoSEQ analyzer, BGI IR-SEQ, MiXCR stores MiAIRR compliant tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ImmunoSeq files — readImmunoSeq","text":"","code":"readImmunoSeq(path, recursive = FALSE)  getStandard(clone_file, airr_fields, matching_fields)  readFiles(clone_file, empty_airr_frame, matching_fields, progress)  iReceptorFormat(clone_frame)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ImmunoSeq files — readImmunoSeq","text":"path Path directory containing tab-delimited files.  files extension .tsv imported.  names data frames names files. clone_file .tsv file containing results AIRRSeq pipeline airr_fields character vector MiAIRR headers clone_frame AIRR compliant tibble","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ImmunoSeq files — readImmunoSeq","text":"Returns tibble MiAIRR headers repertoire_id Tibble given data MiAIRR fields Tibble MiAIRR format Tibble iReceptor format","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"get-standard-headers","dir":"Reference","previous_headings":"","what":"Get standard headers","title":"Read ImmunoSeq files — readImmunoSeq","text":"Retrives MiAIRR standard compliant fields clone files","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"read-clone-file-from-path","dir":"Reference","previous_headings":"","what":"Read clone file from path","title":"Read ImmunoSeq files — readImmunoSeq","text":"Given path single AIRRSeq clone file, generate MiAIRR compliant tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/readImmunoSeq.html","id":"get-ireceptor-standard-format","dir":"Reference","previous_headings":"","what":"Get iReceptor standard format","title":"Read ImmunoSeq files — readImmunoSeq","text":"Returns tibble compliant iReceptor repertoire format.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove sequence — removeSeq","title":"Remove sequence — removeSeq","text":"Removes amino acid sequence associated data instances within list data frames recomputes frequencyCount.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove sequence — removeSeq","text":"","code":"removeSeq(study_table, sequence)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove sequence — removeSeq","text":"study_table list data frames imported using LymphoSeq function readImmunoSeq.  \"aminoAcid\", \"count\", \"frequencyCount\" required columns. sequence character vector one amino acid sequences remove list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/removeSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove sequence — removeSeq","text":"Returns list data frames like one imported except rows specified amino acid sequence removed.  frequencyCount recalculated.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":null,"dir":"Reference","previous_headings":"","what":"Run iNEXT on repertoire_ids — runINext","title":"Run iNEXT on repertoire_ids — runINext","text":"Given repertoire_id table, generate rarefaction curves estimate repertoire diversity. method used generate rarefaction curve derived Chao et al., (2014) using iNEXT library","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run iNEXT on repertoire_ids — runINext","text":"","code":"runINext(sample_table, color = \"repertoire_id\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run iNEXT on repertoire_ids — runINext","text":"sample_table tibble consisting antigen receptor sequencing data imported LymphoSeq function readImmunoSeq. \"junction_aa\", \"duplicate_count\", \"duplicate_frequency\" required columns. color","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/runINext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run iNEXT on repertoire_ids — runINext","text":"","code":"file_path <- system.file(\"extdata\", \"TCRB_sequencing\", package = \"LymphoSeq2\") stable <- readImmunoSeq(path = file_path) #> Rows: 1 Columns: 144 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (69): sequence_id, sequence, sequence_aa, locus, v_call, d_call, d2_call... #> dbl (70): v_score, v_identity, v_support, d_score, d_identity, d_support, d2... #> lgl  (5): rev_comp, productive, vj_in_frame, stop_codon, complete_vdj #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (33): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (4): vFamilyTies, jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 414 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (35): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (2): jFamilyTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 920 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vFami... #> dbl (14): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (9): vGeneAllele, vGeneAlleleTies, dGeneAllele, dFamilyTies, dGeneAllel... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") #> Rows: 1000 Columns: 52 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (34): nucleotide, aminoAcid, vMaxResolved, vFamilyName, vGeneName, vGene... #> dbl (15): count (templates/reads), frequencyCount (%), cdr3Length, vDeletion... #> lgl  (3): jFamilyTies, jGeneNameTies, jGeneAlleleTies #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"sequence\", \"sequence_aa\", \"v_call\", \"d_call\", \"d2_call\", #> \"j_call\", \"junction\", \"junction_aa\", \"duplicate_count\", \"clone_id\", #> \"repertoire_id\") atable <- productiveSeq(stable,                          aggregate = \"junction_aa\",                          prevalence = TRUE) atable <- atable %>% dplyr::filter(repertoire_id == \"TRB_Unsorted_1320\") #> Error in atable %>% dplyr::filter(repertoire_id == \"TRB_Unsorted_1320\"): could not find function \"%>%\" rtable <- runINext(atable) #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used #> Warning: the condition has length > 1 and only the first element will be used"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"Calculates Bhattacharyya coefficient, Similarity score, Sorensen Index, Percent Similarity Index pairwise comparison list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"","code":"scoringMatrix(productive_table, mode = \"Bhattacharyya\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"productive_table tibble productive sequences generated LymphoSeq function productiveSeq.  \"duplicate_frequency\" \"junction_aa\" required columns. mode mode use calculating pairwise similarity. Can take values \"Bhattacharyya\", \"Similarity\", \"Sorensen\", \"PSI\". Default \"Bhattacharyya\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/scoringMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bhattacharyya, Similarity, Sorensen, or PSI matrix — scoringMatrix","text":"data frame Bhattacharyya coefficients, Similarity scores, Sorensen Index, Percent Similarity Index calculated pairwise comparisons list repertoire_id data frames.  metrics measure amount overlap two samples. value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"","code":"searchDB(study_table, credential)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"study_table tibble generated LymphoSeq functions searchPublished topSeqs.  \"aminoAcid\", \"frequencyCount\", \"count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchDB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity from iReceptor2 — searchDB","text":"Returns tibble sample name instance sample published TCR sequence appeared along additional information including disease status, sample type, PubMed ID (PMID) reference sequence characterized.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"","code":"searchIreceptor(...)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"row_tibble row tibble mapped searchDB","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchIreceptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences in iReceptor — searchIreceptor","text":"Returns tibble sample name instance sample published TCR sequence appeared along additional information including disease status, sample type, PubMed ID (PMID) reference sequence characterized.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"Search published T cell receptor beta CDR3 amino acid sequences known antigen specificity list data frames.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"","code":"searchPublished(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"study_table tibble generated LymphoSeq functions readImmunoSeq productiveSeq.  \"junction_aa\", \"frequencyCount\", \"count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchPublished.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for T cell receptor beta CDR3 amino acid sequences with known antigen\nspecificity — searchPublished","text":"Returns data frame repertoire_id name instance repertoire_id published TCR sequence appeared along additional information including antigen specificity, epitope, HLA type, PubMed ID (PMID) reference sequence characterized.  publishedTRB database located separate package called LymphoSeqDB loaded automatically.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for a sequence — searchSeq","title":"Search for a sequence — searchSeq","text":"Search one amino acid junction CDR3 sequences study tibble.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for a sequence — searchSeq","text":"","code":"searchSeq(   study_table,   sequence,   seq_type = \"junction\",   edit_distance = 0,   match = \"global\" )  findSeq(sequence, query_list, edit_distance, seq_type, match)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for a sequence — searchSeq","text":"study_table tibble generated LymphoSeq2 functions readImmunoSeq productiveSeq.  \"junction_aa\" \"junction\", \"duplicate_frequency\", \"duplicate_count\" required columns. sequence character vector one ore amino acid junction CDR3 sequences search. seq_type character vector specifying type sequence(s) searched.  Available options \"junction_aa\" \"junction\". edit_distance integer giving minimum edit distance sequence must less equal .  See details . match string indicating type sequence matching perform. Acceptable values \"global\" \"partial\". See details .","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for a sequence — searchSeq","text":"Returns rows every instance list data frames searched sequence(s) appeared.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for a sequence — searchSeq","text":"exact partial match means searched sequence contained within target sequence.  exact global match means searched sequence identical target sequence. Edit distance way quantifying dissimilar two sequences one another counting minimum number operations required transform one sequence .  example, edit distance 0 means sequences identical edit distance 1 indicates sequences different single amino acid junction.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/searchSeq.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Search for a sequence — searchSeq","text":"findSeq: Find sequences edit distance threshold query list","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence matrix — seqMatrix","title":"Sequence matrix — seqMatrix","text":"Creates data frame unique, productive amino acid sequences rows repertoire_id names headers.  value data frame represents frequency sequence appeared repertoire_id.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence matrix — seqMatrix","text":"","code":"seqMatrix(productive_aa, sequences = NULL, by = \"duplicate_frequency\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence matrix — seqMatrix","text":"productive_aa tibble productive amino acid sequences generated LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". sequences character vector amino acid sequences interest.  useful specify output LymphoSeq functions uniqueSeqs topSeqs subsetting \"junction_aa\" column.  See examples . Available options \"duplicate_frequency\" \"duplicate_count\". Default \"duplicate_frequence\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/seqMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence matrix — seqMatrix","text":"Returns data frame unique, productive amino acid sequences rows \\","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Similarity score — similarityScore","title":"Similarity score — similarityScore","text":"Calculates similarity score two samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similarity score — similarityScore","text":"","code":"similarityScore(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similarity score — similarityScore","text":"sample1 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns. sample2 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/similarityScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Similarity score — similarityScore","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorensen index — sorensenIndex","title":"Sorensen index — sorensenIndex","text":"Calculates Sorensen index two groups repertoires. Similar Jaccard index, Sorensen index gives greater weight shared sequences unique sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorensen index — sorensenIndex","text":"","code":"sorensenIndex(sample_list)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorensen index — sorensenIndex","text":"sample1 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns. sample2 data frame consisting frequencies antigen receptor sequences.  \"junction_aa\" \"duplicate_count\" required columns.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/sorensenIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorensen index — sorensenIndex","text":"Returns similarity score, measure amount overlap two samples.  value ranges 0 1 1 indicates sequence frequencies identical two samples 0 indicates shared frequencies.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary statistics for each repertoire_id in the analysis — summarySeq","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"Get summary statistics repertoire_id analysis","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"","code":"summarySeq(study_table)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"sample_table immune repertoire tibble repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/summarySeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary statistics for each repertoire_id in the analysis — summarySeq","text":"Tibble summarizing sequence information repertoire_id","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Top frequencies — topFreq","title":"Top frequencies — topFreq","text":"Creates data frame top productive amino acid sequences specified minimum frequency threshold reports number samples sequence appears along minimum, maximum, mean frequency across samples.  T cell receptor beta sequences, \\ antigen specificity sequence also provided.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top frequencies — topFreq","text":"","code":"topFreq(productive_table, frequency = 0.1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top frequencies — topFreq","text":"productive_table tibble productive amino acid sequences imported using function LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". frequency minimum frequency sequence appears listed samples.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top frequencies — topFreq","text":"data frame amino acid sequences number samples sequence appears along minimum, maximum, mean frequency across samples. T cell receptor beta sequences, additionally reported \\Also provided antigen specificity sequence known comparing database previously reported sequences literature.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Top sequences — topSeqs","title":"Top sequences — topSeqs","text":"Creates tibble selected number top productive sequences study table.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top sequences — topSeqs","text":"","code":"topSeqs(productive_table, top = 1)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top sequences — topSeqs","text":"productive_table tibble productive sequences generated LymphoSeq function productiveSeq.  \"duplicate_frequency\" \"junction_aa\" required columns. top number top productive sequences data frame subset frequencies.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top sequences — topSeqs","text":"Returns tibble selected number top productive sequences list data frames.","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative frequency bar plot of top sequences — topSeqsPlot","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"Create cumulative frequency bar plot specified number top sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"","code":"topSeqsPlot(study_table, top = 10)"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"study_table study tibble imported using LymphoSeq function readImmunoSeq productiveSeq. top number top sequences colored bar plot.  , less frequent sequences colored violet.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"Returns cumulative frequency bar plot top sequences.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/topSeqsPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative frequency bar plot of top sequences — topSeqsPlot","text":"plot made using package ggplot2 can reformatted using ggplot2 functions.  See examples .","code":""},{"path":[]},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique sequences — uniqueSeqs","title":"Unique sequences — uniqueSeqs","text":"Aggregates productive sequences within list data frames duplicate_count.","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique sequences — uniqueSeqs","text":"","code":"uniqueSeqs(productive_table = productive_table, unique_type = \"junction_aa\")"},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique sequences — uniqueSeqs","text":"productive_table tibble productive amino acid sequences imported using function LymphoSeq function productiveSeq aggregate parameter set \"junction_aa\". unique_type Use \"junction_aa\" aggregate amino acid sequences. Use \"junction\" aggregate nucleotide sequences. Default \"junction_aa\".","code":""},{"path":"https://shashidhar22.github.io/LymphoSeq2/reference/uniqueSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique sequences — uniqueSeqs","text":"data frame unique amino acid sequences list data frames aggregated duplicate_count.","code":""}]
